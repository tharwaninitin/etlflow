steps:
  - name: 'gcr.io/mint-bi-reporting/scala-mill'
    id: Create assembly jar for core and package jar for examples
    entrypoint: /bin/sh
    args:
    - '-c'
    - |
      set -x && \
      mill modules.core.assembly
      mill modules.core.publishLocal
      mill modules.cloud.publishLocal
      mill modules.spark.publishLocal
      mill modules.shceduler.publishLocal
      mill examples.jar


  - name: 'gcr.io/mint-bi-reporting/scala-mill'
    id: Save version in temp file
    entrypoint: /bin/sh
    args:
      - '-c'
      - |
        set -x && \
        mill show modules.publishVersion | sed -e 's/^"//' -e 's/"$//' > /workspace/version.txt


  - name: 'gcr.io/cloud-builders/gsutil'
    id: Copy core jar to GCS
    entrypoint: /bin/sh
    args:
      - '-c'
      - |
        set -x && \
        mv /workspace/out/modules/core/assembly/dest/out.jar /workspace/out/modules/core/assembly/dest/etlflow-core-assembly-$(cat /workspace/version.txt).jar
        gsutil cp /workspace/out/modules/core/assembly/dest/etlflow-core-assembly-$(cat /workspace/version.txt).jar ${_GCS_BUCKET}


  - name: 'gcr.io/cloud-builders/gsutil'
    id: Copy examples jar to GCS
    entrypoint: /bin/sh
    args:
      - '-c'
      - |
        set -x && \
        mv /workspace/out/examples/jar/dest/out.jar /workspace/out/examples/jar/dest/etlflow-examples_2.12-$(cat /workspace/version.txt).jar
        gsutil cp /workspace/out/examples/jar/dest/etlflow-examples_2.12-$(cat /workspace/version.txt).jar ${_GCS_BUCKET}

  - name: 'gcr.io/mint-bi-reporting/scala-mill'
    id: Build docker image and publish to container registry
    entrypoint: /bin/sh
    args:
      - '-c'
      - |
        set -x && \
        mill modules.core.publishLocal
        mill modules.cloud.publishLocal
        mill modules.spark.publishLocal
        mill modules.shceduler.publishLocal
        mill examples.docker.push

  - id: Deploy to GKE
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: bash
    args:
      - '-c'
      - |
        set -x && \
        sed -i 's|git_commit_hash: gsha_.*|git_commit_hash: gsha_'$SHORT_SHA'|g' ${_PATH}/etlflow-deployment.yaml
        gcloud container clusters get-credentials ${_CLUSTER} --region ${_REGION} --project $PROJECT_ID
        kubectl apply -f ${_PATH}
        kubectl set image deployment/etlflow-test etlflow-test=${_REGISTRY}/$PROJECT_ID/${_IMAGE}:$(cat /workspace/version.txt) -n dev
        kubectl rollout status deployment etlflow-test -n dev

timeout: "3000s"
