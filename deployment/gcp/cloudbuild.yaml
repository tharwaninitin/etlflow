steps:
  - id: 'Restore Cache'
    name: 'gcr.io/$PROJECT_ID/restore_cache'
    args:
      - '--bucket=$_CACHE_PATH'
      - '--key=build-cache-$( checksum build.sbt )'
    waitFor: ['-']

  - id: 'Check Cache'
    name: 'ubuntu'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        ls -lah /workspace/.ivy2/cache | wc -l
    waitFor: ['Restore Cache']

  - name: 'asia.gcr.io/$PROJECT_ID/scala-sbt'
    id: 'Create assembly jar for core and package jar for examples'
    args: ['-ivy', '/workspace/.ivy2', 'project core', 'clean', 'assembly', 'project root', 'publishLocal', 'project examples', 'package']

  - name: 'asia.gcr.io/$PROJECT_ID/scala-sbt'
    id: Build docker image and publish to container registry
    entrypoint: /bin/sh
    args:
      - '-c'
      - |
        set -x && \
        sbt "project root" publishLocal "project examples" 'set dockerRepository := Some("$_REGISTRY")' 'set packageName in Docker := "$PROJECT_ID/${_IMAGE}"' docker:publish
  #    waitFor: ['-']

  - name: 'asia.gcr.io/$PROJECT_ID/scala-sbt'
    id: Save version in temp file
    entrypoint: /bin/sh
    args:
      - '-c'
      - |
        set -x && \
        sbt 'inspect actual version' | grep "Setting: java.lang.String" | cut -d '=' -f2 | tr -d ' ' > /workspace/version.txt

  - name: 'gcr.io/cloud-builders/gsutil'
    id: Copy core jar to GCS
    entrypoint: /bin/sh
    args:
      - '-c'
      - |
        set -x && \
        gsutil cp /workspace/modules/core/target/scala-2.12/etlflow-core-assembly-$(cat /workspace/version.txt).jar ${_GCS_BUCKET}

  - name: 'gcr.io/cloud-builders/gsutil'
    id: Copy examples jar to GCS
    entrypoint: /bin/sh
    args:
      - '-c'
      - |
        set -x && \
        gsutil cp /workspace/examples/target/scala-2.12/etlflow-examples_2.12-$(cat /workspace/version.txt).jar ${_GCS_BUCKET}

  - id: Deploy to GKE
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: bash
    args:
      - '-c'
      - |
        set -x && \
        sed -i 's|git_commit_hash: gsha_.*|git_commit_hash: gsha_'$SHORT_SHA'|g' ${_PATH}/etlflow-deployment.yaml
        gcloud container clusters get-credentials ${_CLUSTER} --region ${_REGION} --project $PROJECT_ID
        kubectl apply -f ${_PATH}
        kubectl set image deployment/etlflow-test etlflow-test=${_REGISTRY}/$PROJECT_ID/${_IMAGE}:$(cat /workspace/version.txt) -n dev
        kubectl rollout status deployment etlflow-test -n dev

  - id: 'save cache'
    name: 'gcr.io/$PROJECT_ID/save_cache'
    args:
      - --bucket=$_CACHE_PATH
      - --key=build-cache-$( checksum build.sbt )
      - --path=/workspace/.ivy2/cache
      - --no-clobber
    waitFor: ['Create assembly jar for core and package jar for examples']

timeout: "3000s"

options:
  machineType: 'N1_HIGHCPU_32'
  diskSizeGb: 20