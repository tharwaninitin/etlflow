{"version":3,"sources":["utils/Global.js","components/CurrentTime.js","components/Error.js","cards/MemoryGraph.js","components/Refresh.js","components/Loader.js","cards/Metrics.js","cards/BarGraph.js","pages/Stats.js","components/Notification.js","cards/Credential.js","pages/Credential.js","cards/JobList.js","pages/JobList.js","cards/JobRuns.js","pages/JobRuns.js","cards/RunningJobs.js","pages/RunningJobs.js","cards/JobRunDetails.js","Routes.js","components/Login.js","App.js","index.js"],"names":["GRAPHQL_URL","fetchCall","url","query","token","localStorage","getItem","fetch","method","headers","body","JSON","stringify","CurrentTime","props","state","currentime","a","response","json","data","this","fetchEtlFlowJobs","then","setState","prevState","current_time","className","React","Component","Error","custom_error","status_code","class","ws_url","URL","window","location","href","protocol","replace","MemoryGraph","used","total","free","max","error","error_code","ws","WebSocket","options","low","showArea","showPoint","close_ws","close","document","getElementById","innerText","console","log","readyState","CLOSED","onopen","onmessage","evt","message","res","parse","memory","onclose","used_memory_data","series","free_memory_data","total_memory_data","used_memory_chart","Chartist","Line","free_memory_chart","total_memory_chart","updateMemoryChart","getMemoryData","call","type","push","chart","point","memType","length","shift","update","setTimeout","data-toggle","role","aria-expanded","aria-controls","id","onClick","Refresh","Loader","Metrics","setMetrics","loader","active_jobs","active_subscribers","etl_jobs","cron_jobs","build_time","BarGraph","setJobLogs","load_bar","callApi","jobLogs","barChart","catch","filter","limit","filterOperation","limitOperation","status","logout","removeItem","ok","statusText","params","seriesBarDistance","axisX","offset","axisY","labelInterpolationFnc","value","scaleMinSpace","job_name_labels","job_success","job_failed","map","job_name","success","failed","Bar","labels","filter_button_name","limit_button_name","aria-labelledby","setInitialState","Stats","fetchEtlFlowMetrics","metrics","Notification","notification_var","notification","is_error","errors","data-dismiss","aria-label","setNotification","aria-hidden","job_props","CredentialData","credential","jdbc_values","aws_values","jdbc_keys","aws_keys","credential_name","credential_type","insert_credential_type","name","props_updated","replaceAll","update_credentials","setJobErrorDeails","add_credentials","el","i","placeholder","disabled","onChange","setInsertValues","bind","setValues","event","target","final_props","updateCreds","cred_name","insertCreds","setAddCredInitialState","filter_insert_button_name","data-target","tabindex","createAddCredUI","addCredentials","valid_from","createUpdateCredUI","updateCredentials","Credential","setCredentials","fetchEtlFlowCreds","refresh","JobListData","jobs","run_job_props","is_active","values","keys","run_job","dt","$","DataTable","column","visible","job_properties","key","html","modal","history","setRunJobKeys","setRunJobValues","removeProps","splice","runEtlJob","setJobDeails","aria-describedby","defaultChecked","e","updateJobActiveState","update_job_state","get_etl_jobs","handleOnClick","schedule","nextSchedule","data-order","schduleRemainingTime","last_run_time","last_run_description","showModal","createUI","addProps","submitRunJob","withRouter","JobList","JobRunsData","job_run_id","retry_job_name","timerID","setInterval","data_jobruns","default_props","includes","job_id","button","filter_button_job_name","filter_start_date","filter_end_date","filter_back_button","paginationValue","decPaginationValue","undefined","match","aria-haspopup","setFilterName","list","setJobName","setFilterStartDate","setFilterEndDate","job_type","start_time","elapsed_time","showJobRunStateModal","properties","retryJobRun","incPaginationValue","JobRuns","setJobRuns","jobruns","clearInterval","RunningJobsData","queue","submitted_from","execution_time","details","JobLogs","setEtlFlowQueueStats","fetchEtlFlowQueueStats","queueStats","RunningJobs","JobRunDetails","stepruns","setEtlFlowJobById","fetchEtlFlowJobById","step_run_id_flag","item","step_run_id","linked_jobs","remoteStep","step_type","step_name","showStepRunStateModal","Routes","user","doLogout","decoded","jwt_decode","fetchEtlFlowUserDetails","to","remove_token","exact","path","component","render","Login","user_name","password","login","login_validation","set_login_user_name","set_login_password","fetchLoginDetails","token_value","setItem","doLogin","alert","align","onSubmit","preventDefault","App","args_token","args_user","GRAPHQL_LOGIN_URL","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.9b2263d7.chunk.js","sourcesContent":["\nconst GRAPHQL_URL = '/api/etlflow'\nconst GRAPHQL_LOGIN_URL = '/api/login' \n\n// const GRAPHQL_URL = 'https://devetlflow.startv.com/api/etlflow'\n// const GRAPHQL_LOGIN_URL = 'https://devetlflow.startv.com/api/login'\n\nvar fetchCall = function(url,query) {\n    const token = localStorage.getItem('Authorization')\n    var response = fetch(url, {\n        method: 'POST',\n        headers: {\n          'content_type': 'applcation/json',\n          'Authorization': token,\n        },\n        body:  JSON.stringify(\n          {\n            query: query\n          }\n        )  \n      })\n\n    return response\n}\n   \n// exports.fetchCall = fetchCall;\n\nexport { GRAPHQL_URL, GRAPHQL_LOGIN_URL, fetchCall }","import React from 'react';\nimport {fetchCall,GRAPHQL_URL}  from '../utils/Global';\n\nclass CurrentTime extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { currentime: '' }    \n  }\n\n  async fetchEtlFlowJobs() {\n    \n    var query =  ` query {  currentime {  current_time  } } `\n    const response = await fetchCall(GRAPHQL_URL,query)\n\n    const {data} = await response.json();\n    return data;    \n  }\n\n\n  componentDidMount() {\n    this.fetchEtlFlowJobs().then(({currentime}) => {\n      this.setState(prevState => ({\n        currentime: currentime.current_time\n      }))\n    })\n }\n  \n render(){\n    return (\n         <li className =\"nav-item\">\n             <a className = \"nav-link disabled\">\n                {this.state.currentime} \n             </a>\n         </li>\n    );\n  }\n}\nexport default CurrentTime;","\nimport PropTypes from 'prop-types'\n\nfunction Error(props) {\n    var custom_error = ''\n    if(props.status_code === 0) {\n      custom_error = \"ERR_CONNECTION_REFUSED.Server is down\"\n    } else if(props.status_code === 403) { \n      custom_error = \"ERR_ABORTED 403 (Forbidden)\"\n    } else {\n      custom_error = props.status_code\n    }\n\n    return (\n      <div>\n        <table className = \"table table-striped\">\n            <thead class=\"thead-dark\">\n               <tr>\n                 <th>Error</th>\n               </tr>\n            </thead> \n            <tbody>\n                <tr>\n                    <td class=\"text-danger\">{custom_error} </td>\n                </tr>   \n            </tbody>  \n        </table>\n      </div>\n    );\n}\n\nError.propTypes = {\n  status_code: PropTypes.number\n};\n\nexport default Error;\n","\nimport React from 'react';\nimport 'chartist/dist/chartist.min.css';\nimport 'chartist/dist/chartist.js';\nimport Chartist from 'chartist/dist/chartist.min.js';\nimport ErrorComponent from '../components/Error';\n\nvar ws_url = new URL(\"/ws/etlflow\" , window.location.href)\nws_url.protocol = ws_url.protocol.replace(\"http\",\"ws\")\n\nclass MemoryGraph extends React.Component {\n  constructor(props){\n    super(props);\n    const GRAPHQL_URL = '/ws/etlflow'\n \n    this.state  = {\n      used: '',\n      total: '',\n      free: '',\n      max: '',\n      error:'',\n      error_code:0,\n    }\n    this.ws = new WebSocket(ws_url + \"/\" + localStorage.getItem('Authorization'))\n \n    this.options =  {\n      low: 0,\n      showArea: true,\n      showPoint: false\n    };\n  }\n \n  call(close_ws){\n \n    if(close_ws === \"true\"){\n      this.ws.close(1000,\"User closed the connection\")\n      document.getElementById(\"statslinknotify\").innerText = \"Real-Time Stats (Offline)\"\n      console.log('ws closed')\n    }\n    else{\n      document.getElementById(\"statslinknotify\").innerText = \"Real-Time Stats (Online)\" \n      if (this.ws.readyState === WebSocket.CLOSED) {\n        this.ws = new WebSocket(ws_url + \"/\" + localStorage.getItem('Authorization'))\n      }\n      this.ws.onopen = () => {\n      console.log('ws connected')\n      }  \n  \n      this.ws.onmessage = evt => {\n      const message = evt.data\n      const obj = JSON.parse(message);\n      var res = obj.memory;\n      this.setState(prevState => ({\n        used: res.used,\n        total: res.total,\n        free: res.free,\n        max: res.max\n      }))\n      } \n  \n      this.ws.onclose = () => {\n        console.log('disconnected')\n      }\n \n      var used_memory_data = {\n       series: [[]]\n        };\n   \n      var free_memory_data = {\n        series: [[]]\n      };\n      \n      var total_memory_data = {\n        series: [[]]\n      };\n  \n      var used_memory_chart = new Chartist.Line('.ct-chart', used_memory_data, this.options);\n      var free_memory_chart = new Chartist.Line('.cpu-chart', free_memory_data, this.options);\n      var total_memory_chart = new Chartist.Line('.cpu-chart-1', total_memory_data, this.options);\n \n      \n      this.updateMemoryChart(used_memory_chart, used_memory_data, this.getMemoryData('usedMemory'),'usedMemory' , 30)\n      this.updateMemoryChart(free_memory_chart, free_memory_data, this.getMemoryData('freeMemory'), 'freeMemory' ,30)\n      this.updateMemoryChart(total_memory_chart, total_memory_data, this.getMemoryData('totalMemory'), 'totalMemory',30)\n    }\n  }\n\n  componentDidMount() {\n    this.call()\n  }\n \n  componentWillUnmount() {\n    this.ws.close()\n  }\n\n  getMemoryData(type) {\n    var used = [];\n    var free = [];\n    var total = [];\n\n    if(type === 'usedMemory') {\n      used.push(this.state.used)\n      return used[0];\n    }\n    else if (type === 'freeMemory') {\n      free.push(this.state.free)\n      return free[0];\n    }\n    else {\n      total.push(this.state.total)\n      return total[0];\n    }\n  }\n\n  updateMemoryChart(chart,data,point,memType,length) {\n    if(data.series[0].length >= length) {\n      data.series[0].shift();\n    }\n    data.series[0].push(point);\n    chart.update(data);\n    setTimeout(() => { this.updateMemoryChart(chart,data,this.getMemoryData(memType),memType,length) }, 1000);\n  }\n\n   render(){ \n    if (this.state.error !== ''){\n      return (\n        <div>\n          <ErrorComponent error={this.state.error}/>\n        </div>\n      );\n     } else {\n      return (\n      <div class=\"card\">\n      <div class=\"card-header\">\n        <a className = \"btn btn-secondary btn-sm\" data-toggle = \"collapse\"  href = \"#streamnotify\" role = \"button\" \n          aria-expanded = \"true\" aria-controls = \"streamnotify\" id = \"statslinknotify\">\n        </a>\n        <ul class = \"pagination float-right\">\n              <button class= \"btn btn btn-sm ml-2\" type=\"button \" onClick = {() => {\n                    this.call(\"false\")\n                }} >\n                Connect\n              </button>\n              <button class= \"btn btn btn-sm ml-2\" type=\"button \" onClick = {() => {\n                  this.call(\"true\")\n                }} >\n                Close\n              </button>\n        </ul>      \n      </div>\n    <div className = \"collapse\" id = \"streamnotify\">\n    <div class= \"card-body\">\n    <div class = \"row\">\n      <div class=\"col-sm-3\">\n          <div class=\"card\">\n              <div class=\"card-header\">Used Memory</div>\n              <div class= \"card-body\">\n                  <div class=\"ct-chart\"></div>\n              </div>\n          </div>\n      </div>\n      <div class=\"col-sm-3\">\n          <div class=\"card\">\n              <div class=\"card-header\">Free Memory</div>\n              <div class= \"card-body\">\n                  <div class=\"cpu-chart\"></div>\n              </div>\n          </div>\n      </div>\n      <div class=\"col-sm-3\">\n          <div class=\"card\">\n              <div class=\"card-header\">Total Memory</div>\n              <div class= \"card-body\">\n                  <div class=\"cpu-chart-1 \"></div>\n              </div>\n          </div>\n      </div>\n      <div class=\"col-sm-3\">\n        <div class=\"card\">\n           <div class=\"card-header\">Current Usage</div>\n              <div class= \"card-body\">\n                <div>\n                   <ul class=\"list-group \">\n                       <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                         <b>Used Memory</b>\n                         <span class=\"badge badge-secondary badge-pill\">{this.state.used}</span>\n                       </li>\n                       <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                         <b>Free Memory</b>\n                         <span class=\"badge badge-secondary badge-pill\">{this.state.free}</span>\n                       </li>\n                       <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                         <b>Total Memory</b>\n                         <span class=\"badge badge-secondary badge-pill\">{this.state.total}</span>\n                       </li>\n                       <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                         <b>Max Memory</b>\n                         <span class=\"badge badge-secondary badge-pill\">{this.state.max}</span>\n                       </li>\n                   </ul>\n                </div> \n              </div>\n      </div>\n      </div>\n    </div>\n    <br/>\n    </div>\n    </div>\n    </div>\n  );}\n  }       \n}\n \nexport default MemoryGraph;\n \n\n","function Refresh(props) {\n    return (\n      <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n          props.call()\n      }}>\n        Refresh\n      </button>\n    );\n  }\nexport default Refresh;","function Loader() {\n  return (\n    <div class=\"d-flex justify-content-center\">\n      <div class=\"spinner-border m-5\" role=\"status\">\n        <span class=\"sr-only\">Loading...</span>\n      </div>\n    </div>\n  );\n}\nexport default Loader;\n","\nimport React from 'react';\nimport Error from '../components/Error';\nimport Refresh from '../components/Refresh';\nimport Loader from '../components/Loader';\nimport PropTypes from 'prop-types';\n\nclass Metrics extends React.Component { \n  render(){\n    if (this.props.error !== ''){\n      return (\n        <div class=\"container\">\n            <ul class = \"pagination justify-content-center\">\n              <Refresh call = {this.props.setMetrics}/>\n            </ul>\n              <Error status_code={this.props.error_code}/>\n        </div>\n      );\n    }\n    else if (this.props.loader){\n        return (\n          <div>\n            <Loader />\n          </div>\n        )\n    } \n    else {\n      return (\n      <div class=\"card\">\n      <div class=\"card-header\">\n        <a className = \"btn btn-secondary btn-sm\" data-toggle = \"collapse\"  href = \"#streamnotify2\" role = \"button\" \n           aria-expanded = \"true\" aria-controls = \"streamnotify\" id = \"statslinknotify\">Metrics\n        </a>\n        <ul class = \"pagination float-right\">\n          <Refresh call = {this.props.setMetrics}/>  \n        </ul> \n      </div>\n      <div className = \"collapse\" id = \"streamnotify2\">\n      <div class= \"card-body\">\n      <ul class=\"list-group\">\n          <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n              <b>Active Jobs</b>\n            <span  class=\"items1s\" class=\"badge badge-secondary badge-pill\">{this.props.data.active_jobs}</span>\n          </li>\n          <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n              <b>Active Subscribers</b>\n            <span class=\"badge badge-secondary badge-pill\">{this.props.data.active_subscribers}</span>\n          </li>\n          <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n              <b>Etl Jobs</b>\n            <span class=\"badge badge-secondary badge-pill\">{this.props.data.etl_jobs}</span>\n          </li>\n          <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n              <b>Cron Jobs</b>\n            <span class=\"badge badge-secondary badge-pill\">{this.props.data.cron_jobs}</span>\n          </li> \n          <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n              <b>Build Time</b>\n            <span class=\"badge badge-secondary badge-pill\">{this.props.data.build_time}</span>\n          </li>  \n      </ul>\n      </div>\n      </div>\n  </div>\n    );}\n  }\n}\n\nMetrics.propTypes = {\n  data: PropTypes.array,\n  error : PropTypes.string,\n  error_code : PropTypes.number,\n  loader : PropTypes.string,\n}\n\nexport default Metrics;\n \n\n","\nimport React from 'react';\nimport 'chartist/dist/chartist.min.css';\nimport 'chartist/dist/chartist.js';\nimport Chartist from 'chartist/dist/chartist.min.js';\nimport Error from '../components/Error';\nimport {fetchCall,GRAPHQL_URL}  from '../utils/Global';\nimport Loader from '../components/Loader';\n\nclass BarGraph extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = {\n      jobLogs:[],\n      filter: '',\n      limit: '',\n      error:'',\n      error_code:0,\n      load_bar:false\n    }\n \n    this.filterOperation = ['2','5','10']\n    this.limitOperation = ['2','5','10','30','50']\n \n    this.options = {\n      low: 0,\n      showArea: true,\n      showPoint: false\n    };\n  }\n \n  async callApi() {\n \n    var query =  ` query { jobLogs { job_name success failed }}`\n   \n    if(this.state.filter !== '' && this.state.limit !== '') {\n      query =  ` query { jobLogs(limit: ${this.state.limit}, filter: ${this.state.filter}  ) { job_name success failed }}`\n    } else  if (this.state.filter !== '') {\n      query =  ` query { jobLogs(filter: ${this.state.filter}) { job_name success failed }}`\n    } else  if (this.state.limit !== '') {\n      query =  ` query { jobLogs(limit: ${this.state.limit}) { job_name success failed }}`\n    }\n \n    this.setState(prevState => ({\n      loader: true,\n      error: ''\n    }))\n\n    const response = await fetchCall(GRAPHQL_URL,query)\n\n    if (response.status === 403) {\n      this.props.logout() \n      localStorage.removeItem(\"Authorization\")\n    } \n\n    if (!response.ok) {\n      var message = `An error has occured: ${response.statusText}`;\n      this.setState(prevState => ({\n        error_code: response.status\n      }))\n      throw  new Error(message);\n    } \n    else {   \n      const {data} = await response.json()\n      return data;   \n    }\n  }\n\n  setErrorState(error,error_code) {\n    this.setState(prevState => ({\n      error: error,\n      error_code: error_code\n    }))\n  }\n\n  barChart(){\n    var params = {\n      seriesBarDistance: 10,\n      axisX: {\n        offset: 60\n      },\n      axisY: {\n        offset: 80,\n        labelInterpolationFnc: function(value) {\n          return value\n        },\n        scaleMinSpace: 15\n      }\n    }\n\n    if(this.state.load_bar){\n      var job_name_labels = []\n      var job_success = []\n      var job_failed = []\n  \n      this.state.jobLogs.map( (data) => {\n       job_name_labels.push(data.job_name)\n       job_success.push(data.success)\n       job_failed.push(data.failed)\n      })\n  \n      new Chartist.Bar('.ct-chart-2', {\n        labels: job_name_labels,\n        series: [\n          job_success,\n          job_failed,\n        ]\n      }, params);\n    } \n    else{\n      new Chartist.Bar('.ct-chart-2', {\n        labels: [0],\n        series: [\n          [0],\n          [0],\n        ]\n      }, params);  \n  }}\n \n  componentDidMount() {\n    this.setJobLogs(false)\n    this.barChart()  \n  }\n \n\n  setInitialState(){\n    this.setState(prevState => ({ \n      filter: '',\n      limit: ''   \n    }), () => this.setJobLogs(true))\n  }\n \n  setJobLogs = (load_bar) => {\n    this.callApi().then(({jobLogs}) => {\n      this.setState(prevState => ({\n        jobLogs: jobLogs,\n        load_bar: load_bar\n      }),() => this.barChart())\n    }).catch(error => {\n      this.setState(prevState => ({\n        error: error,\n        loader: false\n      }))\n    });  \n  }\n\n  render(){\n\n    var filter_button_name = ''\n    var limit_button_name = ''\n \n    if (this.state.filter !== '') {\n      filter_button_name = this.state.filter\n    }else {\n      filter_button_name = \"Add Filter (In Days)\"\n    }\n \n    if (this.state.limit !== '') {\n      limit_button_name = this.state.limit\n    }else {\n      limit_button_name = \"Add limit\"\n    }\n\n\n    if (this.state.error !== ''){\n      return (\n        <div class=\"container\">\n         <ul class = \"pagination justify-content-center\">\n             <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                    this.setJobLogs(true) \n                }}>\n               Refresh\n             </button>\n         </ul>\n          <Error status_code={this.state.error_code}/>\n        </div>\n      );\n     } \n    else {\n    return (\n      <div class=\"card\">\n      <div class=\"card-header\">\n      <a className = \"btn btn-secondary btn-sm\" data-toggle = \"collapse\"  href = \"#streamnotify1\" role = \"button\" \n        aria-expanded = \"true\" aria-controls = \"streamnotify1\">Etl Jobs Vs Count (Success/Failed)\n      </a> \n        <ul class = \"pagination float-right\">\n        <div class=\"dropdown\">\n            <button type=\"button\" class=\"btn btn-light dropdown-toggle\" data-toggle=\"dropdown\">\n              {filter_button_name}\n            </button>\n            <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n              { this.filterOperation.map ( filter => (\n                <a class=\"dropdown-item\">\n                   <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                   this.setState(prevState => ({\n                       filter: filter\n                 }))}}> {filter} </button>\n                </a>\n              ))}\n            </div>\n          </div>\n          <div class=\"dropdown\">\n            <button type=\"button\" class=\"btn btn-light dropdown-toggle\" data-toggle=\"dropdown\">\n            {limit_button_name}\n            </button>\n            <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n              { this.limitOperation.map ( limit => (\n                <a class=\"dropdown-item\">\n                   <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                   this.setState(prevState => ({\n                       limit: limit\n                 }))}}> {limit} </button>\n                </a>\n              ))}\n            </div>\n          </div>\n          <button class= \"btn btn btn-sm ml-2\" type=\"button \" onClick = {() => {\n                this.setInitialState()\n          }}>Clear</button>\n          <button class= \"btn btn btn-sm ml-2\" type=\"button \" onClick = {() => {\n              this.setJobLogs(true)\n          }} >\n          Refresh\n          </button>\n        </ul>      \n        </div>\n        <div className = \"collapse\" id = \"streamnotify1\">\n        <div class= \"card-body\">\n            <div class=\"ct-chart-2\"></div>\n        </div>\n        </div>\n  </div>\n  );}\n  }       \n}\n \nexport default BarGraph;\n \n\n","\nimport React from 'react';\nimport MemoryGraph from '../cards/MemoryGraph';\nimport Metrics from '../cards/Metrics';\nimport BarGraph from '../cards/BarGraph';\nimport {fetchCall,GRAPHQL_URL}  from '../utils/Global';\n\nclass Stats extends React.Component {\n  constructor(props){\n    super(props);\n    this.state  = { \n      metrics: [],\n      error: '',\n      loader: false,\n      error_code: 0\n    }\n  }\n\n  async fetchEtlFlowMetrics() {\n \n    this.setState(prevState => ({\n      loader: true,\n      error: ''\n    }))\n    \n    var body = ` query { metrics { active_jobs  active_subscribers etl_jobs cron_jobs  build_time } }`\n    \n    const response = await fetchCall(GRAPHQL_URL,body)  \n \n    if (response.status === 403) {\n      this.props.logout() \n      localStorage.removeItem(\"Authorization\")\n    } \n\n    if (!response.ok) {\n      var message = `An error has occured: ${response.statusText}`;\n      this.setState(prevState => ({\n        error_code: response.status\n      }))\n      throw  new Error(message);\n    } \n    else {  \n      const {data} = await response.json();\n      return data; \n    }  \n  }\n \n  componentDidMount() {\n    this.setMetrics()\n  }\n \n  setMetrics = () => {\n    this.fetchEtlFlowMetrics().then(({metrics}) => {\n      this.setState(prevState => ({\n          metrics: metrics,\n          loader: false\n      }))\n    }).catch(error => {\n      this.setState(prevState => ({\n        error: error,\n        loader: false\n      }))\n  });  \n  }\n  \n  render(){\n    return (\n         <div class = \"container-fluid\">\n                <MemoryGraph logout={this.props.logout}  />    \n         <br/>\n        <div class = \"row\">\n            <div class=\"col-sm-9\">\n                <BarGraph logout = {this.props.logout} />   \n            </div>\n            <div class=\"col-sm-3\">\n                <Metrics  \n                    data = {this.state.metrics} \n                    setMetrics={this.setMetrics} \n                    error = {this.state.error} \n                    error_code = {this.state.error_code} \n                    loader = {this.state.loader}\n                />  \n            </div>    \n        </div>\n      </div>\n    );\n  }\n  }       \n \nexport default Stats;\n \n\n","import PropTypes from 'prop-types'\n\nfunction Notification(props) {\n    var notification_var = \"\"\n    if(props.notification){\n      if(props.is_error) {\n         notification_var =\n         <div class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">\n            <h4 class=\"alert-heading\">{props.message}</h4>\n            <p>{props.errors}</p>\n            <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" onClick = {() => {props.setNotification(false)}}>\n               <span aria-hidden=\"true\">&times;</span>\n            </button>\n         </div>\n       } else {\n          notification_var =\n          <div class=\"alert alert-success alert-dismissible fade show\" role=\"alert\">\n             <h4 class=\"alert-heading\">{props.message}</h4>\n             <p>{props.job_props}</p>\n             <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" onClick = {() => {props.setNotification(false)}}>\n                <span aria-hidden=\"true\">&times;</span>\n             </button>\n          </div>\n        }  \n    }\n\n    return (\n        <div>\n          {notification_var}\n        </div>\n    );\n}\n\nNotification.propTypes = {\n   notification: PropTypes.bool,\n   is_error: PropTypes.bool,\n   errors: PropTypes.string,\n   job_props: PropTypes.string,\n   message: PropTypes.string\n };\n\nexport default Notification;\n","import PropTypes from 'prop-types';\nimport React from 'react';\n//Bootstrap and jQuery libraries\nimport Notification from '../components/Notification';\nimport {fetchCall,GRAPHQL_URL}  from '../utils/Global';\n\nclass CredentialData extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { credential: [],\n      loader:false,\n      jdbc_values: [],\n      aws_values: [],\n      jdbc_keys: [\"url\",\"user\",\"password\",\"driver\"],\n      aws_keys: [\"access_key\",\"secret_key\"],\n      errors: '',\n      is_error: false,\n      credential_name:'',\n      credential_type:'',\n      insert_credential_type: '',\n      error:'',\n      error_code:0,\n\n    }\n    this.filterOperation = [\"JDBC\",\"AWS\"]\n  }\n  \n  async updateCreds(name,type,value) {\n    var props_updated = JSON.stringify(value).replaceAll(\"\\\"?\",\"\").replaceAll(\"?\\\"\",\"\")\n\n    var query = ` mutation { update_credentials (name:\\\"${name}\\\", type:JDBC, value: ${props_updated}) { name } }`\n    if(type === \"aws\") {\n      query = ` mutation { update_credentials (name:\\\"${name}\\\", type:AWS, value: ${props_updated}) { name } }`\n    }\n\n\n    const response = await fetchCall(GRAPHQL_URL,query)\n    if (response.status === 403) {\n      this.props.logout() \n      localStorage.removeItem(\"Authorization\")\n    } \n    \n    if (!response.ok) {\n      var message = `An error has occured: ${response.statusText}`;\n      this.setState(prevState => ({\n        error_code: response.status\n      }))\n      throw  new Error(message);\n    } \n    else {  \n      const {data,errors} = await response.json();\n\n      if(JSON.parse(JSON.stringify(data.update_credentials)) !== null){\n        this.setJobErrorDeails(false)\n      }\n      else {\n        this.setJobErrorDeails(true,JSON.parse(JSON.stringify(errors)))\n      }\n  \n      return data;    \n    }   \n  }\n\n  async insertCreds(name,type,value) {\n    \n    var props_updated = JSON.stringify(value).replaceAll(\"\\\"?\",\"\").replaceAll(\"?\\\"\",\"\")\n    var query = ` mutation { add_credentials (name:\\\"${name}\\\", type:JDBC, value: ${props_updated}) { name } }`\n    if(type === \"AWS\") {\n      query = ` mutation { add_credentials (name:\\\"${name}\\\", type:AWS, value: ${props_updated}) { name } }`\n    }\n\n    const response = await fetchCall(GRAPHQL_URL,query)\n\n    if (!response.ok) {\n      var message = `An error has occured: ${response.statusText}`;\n      this.setState(prevState => ({\n        error_code: response.status\n      }))\n      throw  new Error(message);\n    } \n    else {  \n      const {data,errors} = await response.json();\n      if(JSON.parse(JSON.stringify(data.add_credentials)) !== null){\n        this.setJobErrorDeails(false)\n      }\n      else {\n        this.setJobErrorDeails(true,errors[0].message)\n      }\n  \n      return data;    \n    } \n    \n  }\n\n  setUpdateCredInitialState(){\n    this.setState(prevState => ({  \n      aws_values: [],\n      jdbc_values: []\n    }))\n  }\n\n  setNotification = state => {\n    this.setState(prevState => ({\n      notification: state\n    }))\n  }\n\n  createUpdateCredUI(){\n    if(this.state.credential_type === \"jdbc\"){\n    return this.state.jdbc_keys.map((el, i) => \n        <div key={i}>\n        <div class=\"row\">\n          <div class=\"col-xs-4 col-sm-4 col-md-4\">\n            <div class=\"form-group\">\n               <input class=\"form-control\" type=\"text\" placeholder={this.state.jdbc_keys[i]} disabled/>\n            </div>\n          </div>  \n          <div class=\"col-xs-7 col-sm-7 col-md-7\">\n            <div class=\"form-group\">\n              <input class=\"form-control\"  type=\"text\"  placeholder=\"***********\" onChange={this.setInsertValues.bind(this, i)} />\n            </div>    \n          </div> \n        </div> \n        </div>            \n    )\n    }else if(this.state.credential_type === \"aws\"){\n      return this.state.aws_keys.map((el, i) => \n        <div key={i}>\n        <div class=\"row\">\n          <div class=\"col-xs-4 col-sm-4 col-md-4\">\n            <div class=\"form-group\">\n               <input class=\"form-control\" type=\"text\" placeholder={this.state.aws_keys[i]} disabled/>\n            </div>\n          </div>  \n          <div class=\"col-xs-7 col-sm-7 col-md-7\">\n            <div class=\"form-group\">\n              <input class=\"form-control\"  type=\"text\"  placeholder=\"***********\" onChange={this.setInsertValues.bind(this, i)} />\n            </div>\n          </div> \n        </div> \n        </div>            \n    )\n    }\n  }\n\n  createAddCredUI(){\n    if(this.state.insert_credential_type === \"JDBC\"){\n    return this.state.jdbc_keys.map((el, i) => \n        <div key={i}>\n        <div class=\"row\">\n          <div class=\"col-xs-4 col-sm-4 col-md-4\">\n            <div class=\"form-group\">\n               <input class=\"form-control\" type=\"text\" placeholder={this.state.jdbc_keys[i]} disabled/>\n            </div>\n          </div>  \n          <div class=\"col-xs-7 col-sm-7 col-md-7\">\n            <div class=\"form-group\">\n              <input class=\"form-control\"  type=\"text\"  placeholder=\"Type Value\" onChange={this.setValues.bind(this, i)} />\n            </div>\n          </div> \n        </div> \n        </div>            \n    )\n    }else if(this.state.insert_credential_type === \"AWS\"){\n      return this.state.aws_keys.map((el, i) => \n        <div key={i}>\n        <div class=\"row\">\n          <div class=\"col-xs-4 col-sm-4 col-md-4\">\n            <div class=\"form-group\">\n               <input class=\"form-control\" type=\"text\" placeholder={this.state.aws_keys[i]} disabled/>\n            </div>\n          </div>  \n          <div class=\"col-xs-7 col-sm-7 col-md-7\">\n            <div class=\"form-group\">\n              <input class=\"form-control\"  type=\"text\"  placeholder=\"Type Value\" onChange={this.setValues.bind(this, i)} />\n            </div>\n          </div> \n        </div> \n        </div>            \n    )\n    }\n  }\n\n  setAddCredInitialState(){\n  this.setState(prevState => ({  \n    insert_credential_type: '',\n    aws_values: [],\n    jdbc_values: []\n  }))\n  document.getElementById(\"cred_name\").value = ''\n  }\n\n  setValues(i, event) {\n\n  if(this.state.insert_credential_type === \"JDBC\") {\n    let jdbc_values = [...this.state.jdbc_values];\n    jdbc_values[i] =  event.target.value;\n    this.setState({ jdbc_values });\n   } else{ \n    let aws_values = [...this.state.aws_values];\n    aws_values[i] =  event.target.value;\n    this.setState({ aws_values });\n   }\n  }\n \n  setInsertValues(i, event) {\n\n  if(this.state.credential_type === \"jdbc\") {\n    let jdbc_values = [...this.state.jdbc_values];\n    jdbc_values[i] =  event.target.value;\n    this.setState({ jdbc_values });\n   } else{ \n    let aws_values = [...this.state.aws_values];\n    aws_values[i] =  event.target.value;\n    this.setState({ aws_values });\n   }\n  }\n\n  setCredUpdateDeails(name){\n    this.setState(prevState => ({\n      credential_name: name\n      }))\n  } \n\n  updateCredentials() {\n\n    var final_props = []\n    var i;\n\n    if(this.state.credential_type === \"jdbc\") {\n      for (i = 0; i < this.state.jdbc_keys.length; i++) {\n        var props = {[\"?key?\"] : this.state.jdbc_keys[i],[\"?value?\"] : this.state.jdbc_values[i]}\n       final_props[i] =  props\n       }\n     } else{ \n       for (i = 0; i < this.state.aws_keys.length; i++) {\n         var props = {[\"?key?\"] : this.state.aws_keys[i],[\"?value?\"] : this.state.aws_values[i]}\n        final_props[i] =  props\n        }\n     }\n \n   var props = ''\n \n   this.updateCreds(this.state.credential_name,this.state.credential_type,final_props).then(({update_credentials}) => {\n     this.setNotification(true)\n     var data =  JSON.parse(JSON.stringify(update_credentials))\n   }).catch(error => {\n    this.setState(prevState => ({\n      error: error,\n      loader: false\n    }))\n});\n\n   this.setState(prevState => ({  \n    credential_type: '',\n    aws_values: [],\n    jdbc_values: []\n  }))\n  }\n\n  async addCredentials() {\n\n    var final_props = []\n    var i;\n\n    if(this.state.insert_credential_type === \"JDBC\") {\n     for (i = 0; i < this.state.jdbc_keys.length; i++) {\n       var props = {[\"?key?\"] : this.state.jdbc_keys[i],[\"?value?\"] : this.state.jdbc_values[i]}\n      final_props[i] =  props\n      }\n    } else{ \n      for (i = 0; i < this.state.aws_keys.length; i++) {\n        var props = {[\"?key?\"] : this.state.aws_keys[i],[\"?value?\"] : this.state.aws_values[i]}\n       final_props[i] =  props\n       }\n    }\n \n   var props = ''\n \n   var cred_name = document.getElementById(\"cred_name\").value\n\n   this.insertCreds(cred_name,this.state.insert_credential_type,final_props).then(({add_credentials}) => {\n     this.setNotification(true)\n     var data =  JSON.parse(JSON.stringify(add_credentials))\n   }, () => this.setAddCredInitialState())\n\n   this.setState(prevState => ({  \n    insert_credential_type: '',\n    aws_values: [],\n    jdbc_values: []\n  }))\n  document.getElementById(\"cred_name\").value = ''\n  }\n\n  setJobErrorDeails(is_error,errors){\n    this.setState(prevState => ({\n      is_error: is_error,\n      errors: errors                   \n      }))\n  }\n\n  render(){\n\n    var filter_button_name = ''\n    if (this.state.credential_type !== '') {\n      filter_button_name = this.state.credential_type  \n    }else {\n      filter_button_name = \"Add Credential Type\"\n    } \n\n    var filter_insert_button_name = ''\n    if (this.state.insert_credential_type !== '') {\n      filter_insert_button_name = this.state.insert_credential_type  \n    }else {\n      filter_insert_button_name = \"Add Credential Type\"\n    } \n\n    var filter_update_button_name = ''\n    if (this.state.credential_type !== '') {\n      filter_update_button_name = this.state.credential_type  \n    }else {\n      filter_update_button_name = \"Add Credential Type\"\n    } \n\n    var message = \"\"\n    var job_props = ''\n    var errors = ''\n\n    if(this.state.notification){\n      if(this.state.is_error) {\n         message = 'Error while Updatating Credential ! '\n         job_props = ''\n         errors = this.state.errors\n       } else {\n          message = 'Credentials  submitted successfully! '\n          job_props = ''\n          errors = ''\n        }  \n    }\n\n    return (\n      <div className=\"container\">\n      <div><Notification notification={this.state.notification} is_error={this.state.is_error}  errors = {errors}  message={message} job_props = {job_props} setNotification={this.setNotification}/></div>\n        <ul class = \"pagination justify-content-center\">\n          <div class=\"inner\"> \n             <button type=\"button\" class=\"btn btn-warning ml-2\" data-toggle=\"modal\" data-target=\"#exampleModal1\">\n                 Add New Credentials\n             </button>\n             <div class=\"modal fade\" id=\"exampleModal1\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel1\" aria-hidden=\"true\">\n                <div class=\"modal-dialog\" role=\"document\">\n                  <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                      <h5 class=\"modal-title\" id=\"exampleModalLabel1\">Add Credentials</h5>\n                      <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                        <span aria-hidden=\"true\">&times;</span>\n                      </button>\n                    </div>\n                    <div class=\"modal-body\">\n                      <div class=\"row\">\n                        <div class=\"col-xs-7 col-sm-7 col-md-7\">\n                          <div class=\"form-group\">\n                             Credential Name\n                             <input class=\"form-control\" placeholder=\"Add Name\"  type=\"text\" id=\"cred_name\"/>\n                          </div>\n                        </div> \n                        <div class=\"col-xs-7 col-sm-7 col-md-7\">\n                          <div class=\"form-group\">\n                          <div class=\"dropdown\">\n                            <button type=\"button\" class=\"btn btn-light dropdown-toggle\" data-toggle=\"dropdown\">\n                              {filter_insert_button_name}\n                            </button>\n                            <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n                              { this.filterOperation.map ( filter => (\n                                <a class=\"dropdown-item\">\n                                   <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                                   this.setState(prevState => ({\n                                    insert_credential_type: filter\n                                 }))\n                                 }}> {filter} </button>\n                                </a>\n                              ))}\n                            </div>\n                          </div> \n                          </div>\n                        </div>  \n                      </div> \n                      {this.createAddCredUI()} \n                      <input type=\"button\" class=\"btn btn-primary ml-2\" value=\"Submit\" onClick = {() => this.addCredentials()}/>\n                    </div>\n                    <div class=\"modal-footer\">\n                      <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n           </div>\n        </ul>\n        <table id=\"jobruns\" class=\"table table-sm table-bordered\">\n            <thead class=\"thead-dark\">\n                  <tr>\n                    <th>Credential Name</th>\n                    <th>Type</th>\n                    <th>Last Updated</th>\n                    <th>Action</th>\n                  </tr>\n                </thead>\n                  <tbody>\n                  {this.props.data.map( data => (\n                    <tr>\n                      <td>{data.name}</td>\n                      <td>{data.type}</td>\n                      <td>{data.valid_from}</td>\n                      <td>\n                      <div class=\"inner\">\n                           <button type=\"button\" class=\"btn btn-warning ml-2\" data-toggle=\"modal\" data-target=\"#exampleModal\"  onClick = {() => \n                                    this.setState(prevState => ({\n                                      credential_name: data.name,\n                                      credential_type: data.type\n                                }))}>\n                               Update\n                           </button>\n                           <div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                              <div class=\"modal-dialog\" role=\"document\">\n                                <div class=\"modal-content\">\n                                  <div class=\"modal-header\">\n                                    <h5 class=\"modal-title\" id=\"exampleModalLabel\">Update Credentials</h5>\n                                    <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                      <span aria-hidden=\"true\">&times;</span>\n                                    </button>\n                                  </div>\n                                  <div class=\"modal-body\">\n                                  <div class=\"row\">\n                                      <div class=\"col-xs-7 col-sm-7 col-md-7\">\n                                        <div class=\"form-group\">\n                                           Credential Name\n                                           <input class=\"form-control\" placeholder={this.state.credential_name}  type=\"text\" disabled/>\n                                        </div>\n                                      </div> \n                                      <div class=\"col-xs-7 col-sm-7 col-md-7\">\n                                        <div class=\"form-group\">\n                                            Type\n                                           <input class=\"form-control\" placeholder={this.state.credential_type}   type=\"text\" disabled/>\n                                        </div>\n                                      </div>  \n                                    </div> \n                                    {this.createUpdateCredUI()}        \n                                    <input type=\"button\" class=\"btn btn-primary ml-2\" value=\"Submit\" onClick = {() => this.updateCredentials()}/>\n                                  </div>\n                                  <div class=\"modal-footer\">\n                                    <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                         </div>\n                      </td>\n                    </tr>\n                  ))}\n                  </tbody>\n             </table>  \n           </div>\n    );\n  }      \n}\n\nCredentialData.propTypes = {\n  data: PropTypes.array\n}\n\nexport default CredentialData;\n","import React from 'react';\n\nimport Loader from '../components/Loader';\nimport Error from '../components/Error';\nimport Refresh from '../components/Refresh';\nimport CredentialData from '../cards/Credential';\n\nimport {fetchCall,GRAPHQL_URL}  from '../utils/Global';\n\nclass Credential extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { \n      credential: [],\n      loader:false,\n      error:'',\n      error_code:0\n    }\n  }\n  \n  async fetchEtlFlowCreds() {\n    \n    this.setState(prevState => ({\n      loader: true,\n      error: ''\n    }))\n\n    var body = ` query { credential { name  type  valid_from } } `\n    const response = await fetchCall(GRAPHQL_URL ,body)\n\n    if (response.status === 403) {\n      this.props.logout() \n      localStorage.removeItem(\"Authorization\")\n    } \n    \n    if (!response.ok) {\n      var message = `An error has occured: ${response.statusText}`;\n      this.setState(prevState => ({\n        error_code: response.status\n      }))\n      throw  new Error(message);\n    } \n    else {  \n      const {data} = await response.json();\n      return data;   \n  }\n}\n\n  componentDidMount() {\n    //calling getInfo api\n    this.setCredentials()\n  }\n\n  setCredentials = () => {\n    this.fetchEtlFlowCreds().then(({credential}) => {\n      this.setState(prevState => ({\n        credential: credential,\n        loader: false\n      }))\n    }).catch(error => {\n        this.setState(prevState => ({\n          error: error,\n          loader: false\n        }))\n    });\n  }\n\n  render(){\n\n    var refresh = <ul class = \"pagination justify-content-center\"><Refresh call = {this.setCredentials}/></ul>\n    if (this.state.error !== ''){\n      return (\n        <div class=\"container\">\n            {refresh}\n            <Error status_code ={this.state.error_code}/>\n        </div>\n      );\n    } \n    else if (this.state.loader){\n      return (\n        <div>\n          <Loader/>\n        </div>\n      );\n    }\n    else{\n      return (\n        <div className=\"container\">\n            {refresh}\n            <CredentialData data = {this.state.credential} />\n        </div>\n      );\n   }      \n  }\n}\n\nexport default Credential;","import React from 'react';\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport PropTypes from 'prop-types';\nimport '../css/App.css'\nimport { withRouter } from 'react-router'\nimport Notification from '../components/Notification';\nimport {fetchCall,GRAPHQL_URL}  from '../utils/Global';\n\nimport $ from 'jquery';\n\nclass JobListData extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { \n      jobs: [],\n      notification: false,\n      run_job_props: '',\n      job_name: '',\n      errors: [],\n      is_error: false,\n      is_active: true,\n      values: [],keys: [],\n      error_code:0,\n\n    }\n  }\n\n  async updateJobActiveState(job_name,state) {\n    var body = `mutation {  update_job_state (name:\\\"${job_name}\\\" ,state: ${state}){ } }`\n    const response = await fetchCall(GRAPHQL_URL,body)\n    \n    if (response.status === 403) {\n      this.props.logout() \n      localStorage.removeItem(\"Authorization\")\n    } \n\n    if (!response.ok) {\n      var message = `An error has occured: ${response.statusText}`;\n      this.setState(prevState => ({\n        error_code: response.status\n      }))\n      throw  new Error(message);\n    } else {  \n      const {data} = await response.json();\n      return data;    \n    }   \n  }\n\n  async runEtlJob(job_name,props) {\n    var query =  `\n      mutation {\n        run_job (name:\\\"${job_name}\\\"){\n          name\n          props {key value}\n      }\n      }\n    ` \n    if(props.length > 0) {\n      var props_updated = JSON.stringify(props).replaceAll(\"\\\"$\",\"\").replaceAll(\"$\\\"\",\"\")\n      query =  `\n      mutation {\n        run_job (name:\\\"${job_name}\\\" ,props: ${props_updated}){\n          name\n          props {key value}\n      }\n      }\n    ` \n    }\n    this.setState(prevState => ({\n      loader: true\n    }))\n    \n    const response = await fetchCall(GRAPHQL_URL,query)\n\n   if (response.status === 403) {\n      this.props.logout() \n      localStorage.removeItem(\"Authorization\")\n    } \n\n    if (!response.ok) {\n      var message = `An error has occured: ${response.statusText}`;\n      this.setState(prevState => ({\n        error_code: response.status\n      }))\n      throw  new Error(message);\n    } \n    else {  \n      const {data,errors} = await response.json();\n      if(JSON.parse(JSON.stringify(data.run_job)) !== null){\n          this.setJobErrorDeails(false)\n      }\n      else {\n        this.setJobErrorDeails(true,JSON.parse(JSON.stringify(errors)))\n      }\n      return data;  \n    }\n  }\n\n  componentDidMount() {\n    var dt = $('#joblist').DataTable({\n      \"order\": [[ 6, \"desc\" ]]\n  });\n    dt.column(6).visible(false);\n    dt.column(3).visible(false);\n\n  }\n\n  showModal(data)\n  {\n    var job_properties = \"\" \n    { \n      data.map(  props =>\n        job_properties  += \"<b>\"+ props.key + \"</b>\" +\"=\" + props.value + \"<br></br>\"\n    )}\n\n   {$(\"#jobListeModal .modal-body\").html(job_properties)}\n   $(\"#jobListeModal\").modal();\n  }\n\n  setNotification = state => {\n    this.setState(prevState => ({\n      notification: state\n    }))\n  }\n\n  setJobDeails(job_name,props){\n    this.setState(prevState => ({\n      job_name: job_name,\n      run_job_props: props                    \n      }))\n  }\n\n  setErrorState(error,error_code) {\n    this.setState(prevState => ({\n      error: error,\n      error_code: error_code\n    }))\n  }\n\n  setJobErrorDeails(is_error,errors){\n    this.setState(prevState => ({\n      is_error: is_error,\n      errors: errors                    \n      }))\n  }\n\n  handleOnClick(job_name){    \n    this.props.history.push('/JobRuns/' + job_name)\n  }\n\n  createUI(){\n    return this.state.values.map((el, i) => \n        <div key={i}>\n        <div class=\"row\">\n          <div class=\"col-xs-4 col-sm-4 col-md-4\">\n            <div class=\"form-group\">\n               <input class=\"form-control\" value={this.state.keys[i]} type=\"text\" placeholder=\"Type Key\" onChange={this.setRunJobKeys.bind(this, i)} />\n            </div>\n          </div>  \n          <div class=\"col-xs-7 col-sm-7 col-md-7\">\n            <div class=\"form-group\">\n              <input class=\"form-control\" value={el||''} type=\"text\"  placeholder=\"Type Value\" onChange={this.setRunJobValues.bind(this, i)} />\n            </div>\n          </div> \n         <div class=\"col-xs-3\">\n             <input type='button' class=\"btn btn-danger\" value='-' onClick={this.removeProps.bind(this, i)}/>\n         </div>\n        </div> \n        </div>            \n    )\n  }\n\n\n  setRunJobValues(i, event) {\n    let values = [...this.state.values];\n    values[i] =  event.target.value;\n    this.setState({ values });\n  }\n\n  setRunJobKeys(i, event) {\n  let keys = [...this.state.keys];\n  keys[i] =  event.target.value;\n  this.setState({ keys });\n  }\n \n  addProps(){\n   this.setState(prevState => ({ values: [...prevState.values, '']}))\n  }\n \n  removeProps(i){\n\n    let values = [...this.state.values];\n    values.splice(i,1); \n    this.setState({ values });\n\n    let keys = [...this.state.keys];\n    keys.splice(i,1);\n    this.setState({ keys });\n  }\n\n  submitRunJob() {\n\n   var final_props = []\n   var i;\n   for (i = 0; i < this.state.keys.length; i++) {\n    var props = {[\"$key$\"] : this.state.keys[i],[\"$value$\"] : this.state.values[i]}\n    final_props[i] =  props\n   }\n\n  var props = ''\n\n  this.runEtlJob(this.state.job_name.replace(/^\"(.*)\"$/, '$1'),final_props).then(({run_job}) => {\n    this.setNotification(true)\n    var data =  JSON.parse(JSON.stringify(run_job))\n    if(data !== null){\n        props = JSON.stringify(data[\"props\"]) \n        var job_name = JSON.stringify(data[\"name\"]) \n        this.setJobDeails(job_name,props)\n   }})    \n  }\n\n  render(){  \n\n    var message = ''\n    var job_props = ''\n    var errors = ''\n    if(this.state.notification){\n      job_props = this.state.run_job_props\n      if(this.state.is_error) {\n          message = 'Error while submitting job!'\n          JSON.parse(JSON.stringify(this.state.errors)).map( (data) => {\n            errors = data.message\n          })\n       } else {\n          message = ' Job ' +  this.state.job_name.replace(/^\"(.*)\"$/, '$1') +  ' submitted successfully! '\n        }  \n    } \n\n    return (\n          <div class=\"container-fluid\">\n          <div><Notification notification={this.state.notification} is_error={this.state.is_error}  errors = {errors}  message={message} job_props = {job_props} setNotification={this.setNotification}/></div>\n          <table id=\"joblist\" class=\"table table-sm table-bordered\">\n            <thead class=\"thead-dark\">\n                  <tr>\n                    <th>Active/Inactive</th>\n                    <th>Job Name</th>\n                    <th>Schedule</th>\n                    <th>Next Schedule</th>\n                    <th>Schedule Remaining Time</th>\n                    <th>Job Last Run</th>\n                    <th>Job Last Time</th>\n                    <th>Action</th>\n                  </tr>\n                </thead>\n                  <tbody>\n                  {this.props.data.map( (data) => (\n                    <tr>\n                      <td>{(() => {\n                           if (this.state.is_active && data.is_active) {\n                             return (\n                               <div className = \"checkbox\">\n                                 <input type=\"checkbox\"\n                                     aria-describedby=\"UsernameHelp\"\n                                     data-toggle = \"toggle\"\n                                     defaultChecked\n                                     onClick={e => this.updateJobActiveState(data.name,false).then(({update_job_state}) => {\n                                      this.props.get_etl_jobs()\n                                      this.setState(prevState => ({  \n                                        is_active: false\n                                      }))\n                                    })}>\n                                 </input>\n                               </div>\n                             )\n                           } else {\n                            return (\n                              <div className = \"checkbox\">\n                                <input type=\"checkbox\"\n                                     aria-describedby=\"UsernameHelp\"\n                                     data-toggle = \"toggle\"\n                                     onClick={e => this.updateJobActiveState(data.name,true).then(({update_job_state}) => {\n                                      this.props.get_etl_jobs()\n                                      this.setState(prevState => ({  \n                                        is_active: true\n                                      }))\n                                    })}>\n                                 </input>\n                              </div>\n                            )\n                           }\n                         })()}\n                      </td>\n                        <td> <button type=\"button\" class=\"btn btn-link\" data-dismiss=\"modal\" onClick = {() => this.handleOnClick(data.name)}>{data.name}</button></td>\n                      <td>{data.schedule}</td>\n                      <td>{data.nextSchedule}</td>\n                      <td data-order={data.nextSchedule}>{data.schduleRemainingTime}</td>\n                      <td data-order={data.last_run_time}>\n                      {(() => {\n\n                           if (data.last_run_time === 0) {\n                             return (\n                               <div>\n                               </div>\n                             )\n                           } else {\n                             return (\n                               <div>  \n                                  {data.last_run_description}\n                               </div>\n                             )\n                           } \n                         })()}\n                      </td>\n                      <td>{data.last_run_time}</td>\n\n                      <td >\n                      <div class='row'>\n                      <div class='col-xs-12 button-wrapper' class=\"inner\">\n                          <button type=\"button\" class=\"btn btn-secondary ml-2\" data-toggle=\"modal\" onClick = {() => this.showModal(data.props)}>\n                            Properties\n                          </button>\n                          <div class=\"modal fade\" id=\"jobListeModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                            <div class=\"modal-dialog\" role=\"document\">\n                              <div class=\"modal-content\">     \n                                <div class=\"modal-header\">\n                                  <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                  <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                    <span aria-hidden=\"true\">&times;</span>\n                                  </button>\n                                </div>\n                                <div class=\"modal-body\">\n                                </div>\n                                <div class=\"modal-footer\">\n                                  <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n\n\n                          <div class=\"inner\">\n                             <button type=\"button\" class=\"btn btn-warning ml-2\" data-toggle=\"modal\" data-target=\"#exampleModal\" onClick = {() => \n                                      this.setState(prevState => ({\n                                          job_name: data.name\n                                  }))}>\n                                 Run\n                             </button>\n                             <div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                                <div class=\"modal-dialog\" role=\"document\">\n                                  <div class=\"modal-content\">\n                                    <div class=\"modal-header\">\n                                      <h5 class=\"modal-title\" id=\"exampleModalLabel\">Run Job</h5>\n                                      <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                        <span aria-hidden=\"true\">&times;</span>\n                                      </button>\n                                    </div>\n                                    <div class=\"modal-body\">\n                                       {this.createUI()}        \n                                      <input type='button' class=\"btn btn-primary ml-2\" value='Add Properties' onClick={this.addProps.bind(this)}/>\n                                      <input type=\"button\" class=\"btn btn-primary ml-2\" value=\"Submit\" onClick = {() => this.submitRunJob()}/>\n                                    </div>\n                                    <div class=\"modal-footer\">\n                                      <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                    </div>\n                                  </div>\n                                </div>\n                              </div>\n                           </div>\n                           </div>\n                           </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n            </table>\n      </div>     \n    );\n  }\n}\n\nJobListData.propTypes = {\n  data: PropTypes.array\n}\n\nexport default withRouter(JobListData)","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Loader from '../components/Loader';\nimport Error from '../components/Error';\nimport Refresh from '../components/Refresh';\nimport JobListData from '../cards/JobList';\n\nclass JobList extends React.Component {\n  render(){  \n    var refresh =  <ul class = \"pagination justify-content-center\"><Refresh call = {this.props.get_etl_jobs}/> </ul>\n    if (this.props.error !== ''){\n      return (\n        <div class=\"container\">\n          {refresh}\n          <Error status_code={this.props.error_code}/>\n        </div>\n      );\n     } \n     else if (this.props.loader){\n      return (\n        <div>\n          <Loader />\n        </div>\n      );\n    }\n    else{\n    return (\n        <div class=\"container-fluid\">\n          {refresh}\n          <JobListData  data = {this.props.jobs}/>\n        </div>     \n    );}\n  }\n}\n\nJobList.propTypes = {\n  jobs: PropTypes.array,\n  error: PropTypes.string,\n  loader: PropTypes.string,\n}\n\nexport default JobList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport $ from 'jquery';\nimport '../css/App.css'\nimport Notification from '../components/Notification';\nimport { withRouter } from 'react-router'\nimport {fetchCall, GRAPHQL_URL}  from '../utils/Global';\n\nclass JobRunsData extends React.Component {\n  constructor(props){\n    super(props); \n    this.job_run_id = ''\n    this.filterOperation = [\"IN\",\"NOT IN\"]\n    this.state  = { \n      retry_job_name: '',\n      errors: [],\n      is_error: false,\n      notification: false,\n      run_job_props: '',\n      error:'',\n      error_code:0\n    }\n  }\n\n  async runEtlJob(job_name,props) {\n    const token = localStorage.getItem('Authorization')\n\n    var query =  `\n      mutation {\n        run_job (name:\\\"${job_name}\\\"){\n          name\n          props {key value}\n      }\n      }\n    ` \n    if(props.length > 0) {\n      var props_updated = [JSON.stringify(props).replaceAll(\"\\\"$\",\"\").replaceAll(\"$\\\"\",\"\")]   \n      query =  `\n      mutation {\n        run_job (name:\\\"${job_name}\\\" ,props: ${props_updated}){\n          name\n          props {key value}\n      }\n      }\n    ` \n    }\n    this.setState(prevState => ({\n      loader: true\n    }))\n\n    const response = await fetchCall(GRAPHQL_URL,query)\n\n    if (!response.ok) {\n      var message = `An error has occured: ${response.statusText}`;\n      this.setState(prevState => ({\n        error_code: response.status\n      }))\n      throw  new Error(message);\n    } \n    else {  \n      this.setState(prevState => ({\n        loader: false\n      }))\n      const {data,errors} = await response.json();\n      if(JSON.parse(JSON.stringify(data.run_job)) !== null){\n        this.setJobErrorDeails(false)\n      }\n      else {\n        this.setJobErrorDeails(true,JSON.parse(JSON.stringify(errors)))\n      }\n      return data;  \n    }  \n  }\n\n  setJobErrorDeails(is_error,errors){\n    this.setState(prevState => ({\n      is_error: is_error,\n      errors: errors                    \n      }))\n  }\n\n  setInterval() {\n    this.timerID = setInterval(\n      () => this.fetchEtlFlowJobs(),\n      1000 * 1000\n    );\n  }\n\n  showModal(data)\n {\n   var props = ''\n   var data_jobruns = JSON.parse(data)\n\n   for(var key in data_jobruns) {\n   { \n       props  += \"<b>\"+ key + \"</b>\" +\"=\" + data_jobruns[key]+ \"<br></br>\"\n   }\n  {$(\"#jobRunModal .modal-body\").html(props)}\n  $(\"#jobRunModal\").modal();\n }\n  }\n\n  retryJobRun(job_name,data)\n  {\n   var final_props = []\n   var data_jobruns = JSON.parse(data)\n   var default_props=[\"job_send_slack_notification\", \"job_enable_db_logging\", \"job_notification_level\"];\n\n   var i = 0\n   var final_props = []\n   var i;\n   for(var key in data_jobruns) {\n     if(!default_props.includes(key)){\n        final_props[i] =  {[\"$key$\"] : key,[\"$value$\"] : data_jobruns[key]}\n        i++\n     }\n   }\n   var props = ''\n\n\n   this.runEtlJob(job_name,final_props).then(({run_job}) => {\n    this.setNotification(true)\n    var data =  JSON.parse(JSON.stringify(run_job))\n    if(data !== null){\n        props = JSON.stringify(data[\"props\"]) \n        var job_name = JSON.stringify(data[\"name\"]) \n        this.setJobDeails(job_name,props)\n   }});     \n  }\n\n  setJobDeails(job_name,props){\n  this.setState(prevState => ({\n    retry_job_name: job_name,\n    run_job_props: props                    \n    }))\n  }\n\n  setNotification = state => {\n    this.setState(prevState => ({\n      notification: state\n    }))\n  }\n\n  showJobRunStateModal(data)\n {\n  {$(\"#jobRunStateModal .modal-body\").html(data)}\n  $(\"#jobRunStateModal\").modal();\n  }\n\n  handleOnClick(job_id){    \n  this.props.history.push('/JobRunDetails/' + job_id)\n  }\n\n  render(){\n\n    \n   var button = ''\n   var filter_button_name = '' \n   var filter_button_job_name = '' \n   var filter_start_date = ''  \n   var filter_end_date = ''  \n   var filter_back_button = ''\n\n   var message = ''\n   var job_props = ''\n   var errors = ''\n   if(this.state.notification){\n     job_props = this.state.run_job_props\n     if(this.state.is_error) {\n         message = 'Error while submitting job!'\n         JSON.parse(JSON.stringify(this.state.errors)).map( (data) => {\n           errors = data.message\n         })\n      } else {\n         message = ' Job ' +  this.state.retry_job_name.replace(/^\"(.*)\"$/, '$1') +  ' submitted successfully! '\n       }  \n   } \n\n   //Code for adding pagination element\n  if (this.props.paginationValue === 0) {\n    button = <li class=\"page-item disabled\">\n    <input type=\"button\" value=\"Previous\" class=\"page-link btn btn-secondary btn-sm\"/></li>\n  } else {\n    button =  <li class=\"page-item\">\n    <input type=\"button\" value=\"Previous\" class=\"page-link btn btn-secondary btn-sm\" onClick = {() => {\n            this.props.decPaginationValue(this.state.paginationValue - 10)\n    }}/></li>\n  } \n\n   //Code for adding button name\n  if (this.props.filter !== '') {\n    filter_button_name = this.props.filter\n  }else {\n    filter_button_name = \"Add Filter\"\n  } \n\n   //Code for adding button name\n  if (this.props.job_name !== '') {\n     filter_button_job_name = this.props.job_name\n  }else {\n     filter_button_job_name = \"Type to search\"\n  } \n\n  if (this.props.filter_start_date !== '') {\n   filter_start_date = this.props.filter_start_date\n  }else {\n    filter_start_date = \"Start Date\"\n  } \n\n  if (this.props.filter_end_date !== '') {\n    filter_end_date = this.props.filter_end_date\n  }else {\n    filter_end_date = \"End Date\"\n  } \n\n  if(this.props.match.params.job_name !== undefined){\n    filter_back_button= <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                          this.props.history.push('/')\n                         }} >\n                        Back\n                        </button>\n  }\n\n  return (\n     <div className=\"container-fluid\">\n       <div><Notification notification={this.state.notification} is_error={this.state.is_error}  errors = {this.state.errors}  message={message} job_props = {job_props} setNotification={this.setNotification}/></div>\n       <ul class = \"pagination justify-content-center\">\n         <div class=\"dropdown\">\n            <button class=\"btn btn-light dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n               {filter_button_name}\n            </button>\n            <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n              { this.filterOperation.map ( filter => (\n                   <a class=\"dropdown-item\">\n                      <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                           this.props.setFilterName(filter)\n                       }}> {filter} </button>\n                   </a>\n              ))}\n            </div>\n         </div>\n         <div className =\"form-inline float-right\">\n             <div className=\"mb-1\">\n             <input type=\"text\"\n                        className=\"form-control input-sm\"\n                        list = \"datalistOptions\"\n                        id = \"exampleDataList\"\n                        placeholder = {filter_button_job_name}\n                        onChange={e => this.props.setJobName(document.getElementById(\"exampleDataList\").value)}></input>      \n             </div>\n             <datalist id = \"datalistOptions\">\n               {this.props.jobs.map( data => (\n                 <option value = {data.name}></option>\n               ))}\n             </datalist> \n         </div>\n         <div class = \"form-inline float-right\">\n              <div class = \"mb-1\"> \n                  <input type=\"date\"\n                         className=\"form-control input-sm\"\n                         placeholder={filter_start_date}\n                         id = \"start_date\"\n                         onChange={e => this.props.setFilterStartDate(document.getElementById(\"start_date\").value)}\n                   ></input>\n              </div>\n              <div class = \"mb-1\"> \n                  <input type=\"date\"\n                         className=\"form-control input-sm\"\n                         placeholder={filter_end_date}\n                         id = \"end_date\"\n                         onChange={e => this.props.setFilterEndDate(document.getElementById(\"end_date\").value)}\n                   ></input> \n              </div>    \n         </div> \n         <button class= \"btn btn btn-sm\" type=\"button \" onClick= {() => {\n            this.props.setInitialState()\n            }}>\n            Clear\n         </button>\n         {/* <RefreshComponent call = {this.props.setJobRuns}/> */}\n         {filter_back_button}\n       </ul>\n       <table id=\"jobruns\" class=\"table table-sm table-bordered\">\n           <thead class=\"thead-dark\">\n                 <tr>\n                   <th>Job Name</th>\n                   <th>Job Type</th>\n                   <th>Job Start Time</th>\n                   <th>Elapsed Time</th>\n                   <th>Job Status</th>\n                   <th>Actions</th>\n                 </tr>\n               </thead>\n                 <tbody>\n                 {this.props.data.map( data => (\n                   <tr>\n                     <td> <button type=\"button\" class=\"btn btn-link\" data-dismiss=\"modal\" onClick = {() => this.handleOnClick(data.job_run_id)}>{data.job_name}</button></td>\n                     <td>{data.job_type}</td>\n                     <td>{data.start_time}</td>\n                     <td>{data.elapsed_time}</td>\n                     <td>\n                     {(() => {\n                           if (data.state === \"pass\" || data.state == \"\" ) {\n                             return (\n                               <div>\n                                 <p className = \"text-success\">{data.state}</p>\n                               </div>\n                             )\n                           } else if (data.state === \"started\" || data.state == \"running\" ) {\n                             return (\n                               <div>\n                                 <p className = \"text-warning\">{data.state}</p>\n                               </div>\n                             )\n                           } else {\n                            return (\n                              <div>\n                                 <button type=\"button\" class=\"btn btn-danger btn btn-sm\" data-toggle=\"modal\" onClick = {() => this.showJobRunStateModal(data.state)}>\n                                     Error\n                                 </button>\n                            \n                                 <div class=\"modal fade\" id=\"jobRunStateModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                                   <div class=\"modal-dialog\" role=\"document\">\n                                     <div class=\"modal-content\">\n                                       <div class=\"modal-header\">\n                                         <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                         <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                           <span aria-hidden=\"true\">&times;</span>\n                                         </button>\n                                       </div>\n                                       <div class=\"modal-body\">\n                                       </div>\n                                       <div class=\"modal-footer\">\n                                         <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                       </div>\n                                     </div>\n                                   </div>\n                                 </div>\n                              </div>\n                            )\n                           }\n                         })()}\n                     </td>\n                     <td>\n                     <div class='row'>\n                     <div class='col-xs-12 button-wrapper' class=\"inner\">\n                         <button type=\"button\" class=\"btn btn-secondary btn-sm ml-2\" data-toggle=\"modal\" onClick = {() => this.showModal(data.properties)}>\n                           Properties\n                         </button>\n                         \n                         <div class=\"modal fade\" id=\"jobRunModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                           <div class=\"modal-dialog\" role=\"document\">\n                             <div class=\"modal-content\">\n                               <div class=\"modal-header\">\n                                 <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                 <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                   <span aria-hidden=\"true\">&times;</span>\n                                 </button>\n                               </div>\n                               <div class=\"modal-body\">\n                               </div>\n                               <div class=\"modal-footer\">\n                                 <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                               </div>\n                             </div>\n                           </div>\n                         </div>\n\n                         {(() => {\n                           if (data.state === \"pass\" || data.state == \"\" || data.state == \"started\" ) {\n                             return (\n                               <div>\n                               </div>\n                             )\n                           } else {\n                             return (\n                               <div class=\"inner\">  \n                                  <button type=\"button\" class=\"btn btn-warning btn-sm ml-2\" data-toggle=\"modal\" onClick = {() => this.retryJobRun(data.job_name,data.properties)}>\n                                      Retry\n                                  </button>\n                               </div>\n                             )\n                           } \n                         })()}\n                        </div>\n                        </div> \n                     </td>\n                   </tr>\n                 ))}\n                 </tbody>\n            </table>  \n            <nav aria-label=\"Page navigation example\">\n               <ul class=\"pagination justify-content-center\">\n                 {button}\n                 <li class=\"page-item\"><input type=\"button\" value=\"Next\" class=\"page-link btn btn-secondary btn-sm\" onClick = {() => {\n                    this.props.incPaginationValue()\n                   }}/>\n                 </li>\n               </ul>\n            </nav>\n          </div>\n   );\n  }\n}\n\n\nJobRunsData.propTypes = {\n  jobs: PropTypes.array,\n  job_name : PropTypes.string,\n  filter : PropTypes.string,\n  filter_start_date : PropTypes.string,\n  filter_end_date : PropTypes.string,\n  paginationValue  : PropTypes.number\n}\n\n\n// export default JobRunsData; \nexport default withRouter(JobRunsData)\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../css/App.css'\nimport Error from '../components/Error';\nimport Loader from '../components/Loader';\nimport Refresh from '../components/Refresh';\nimport JobRunsData from '../cards/JobRuns';\nimport {fetchCall, GRAPHQL_URL}  from '../utils/Global';\nimport { withRouter } from 'react-router'\n\nclass JobRuns extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { \n      jobruns: [],\n      job_name: '',\n      filter: '',\n      filter_start_date: '',\n      filter_end_date: '',\n      error:'',\n      error_code:0,\n      paginationValue:0\n    }\n    this.incPaginationValue = this.incPaginationValue.bind(this);\n    this.decPaginationValue = this.decPaginationValue.bind(this);\n    this.setJobName         = this.setJobName.bind(this);\n    this.setFilterStartDate = this.setFilterStartDate.bind(this);\n    this.setFilterEndDate   = this.setFilterEndDate.bind(this);\n    this.setInitialState    = this.setInitialState.bind(this);\n    this.setFilterName      = this.setFilterName.bind(this);\n  }\n\n  async fetchEtlFlowJobs(value) {\n    const limit = 10;\n    const offset = value\n\n    var query = ` query { jobruns(limit: ${limit} , offset: ${offset}){ job_run_id job_name properties state start_time elapsed_time job_type is_master}}`\n    \n    if(this.props.match.params.job_name !== undefined){\n      query = ` query { jobruns(limit: ${limit} , offset: ${offset} ,filter: \"IN\", jobName: \\\"${this.props.match.params.job_name}\\\"  )\n              { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n\n      if (this.state.filter_end_date !== \"\") {\n        query = ` query { jobruns(limit: ${limit} , offset: ${offset},  startTime: \\\"${this.state.filter_start_date}\\\", endTime: \\\"${this.state.filter_end_date}\\\",filter: \"IN\", jobName: \\\"${this.props.match.params.job_name}\\\"  )\n        { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n      } \n\n      this.setState(prevState => ({\n        filter: 'IN',\n        job_name: this.props.match.params.job_name\n      }))\n\n    } else {\n      if (this.state.filter_end_date !== \"\" && this.state.filter !== \"\" ) {\n        query = ` query { jobruns(limit: ${limit} , offset: ${offset},  startTime: \\\"${this.state.filter_start_date}\\\", endTime: \\\"${this.state.filter_end_date}\\\",filter: \\\"${this.state.filter}\\\", jobName: \\\"${this.state.job_name}\\\"  )\n        { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n      } else if (this.state.filter_end_date !== \"\" ){\n        query = ` query { jobruns(limit: ${limit} , offset: ${offset},  startTime: \\\"${this.state.filter_start_date}\\\", endTime: \\\"${this.state.filter_end_date}\\\")\n        { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n      } else if (this.state.filter !== \"\" && this.state.job_name !== \"\") {\n        query = ` query { jobruns(limit: ${limit} , offset: ${offset}, filter: \\\"${this.state.filter}\\\", jobName: \\\"${this.state.job_name}\\\"  )\n        { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n      } else if (this.state.filter === \"\" && this.state.job_name !== \"\" ) {\n        query = ` query { jobruns(limit: ${limit} , offset: ${offset} ,filter: \"IN\", jobName: \\\"${this.state.job_name}\\\"  )\n        { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n      } else {\n        query = ` query { jobruns(limit: ${limit} , offset: ${offset}){ job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n      }\n    }\n\n    this.setState(prevState => ({\n      loader: true,\n      error: ''\n    }))\n\n    const response = await fetchCall(GRAPHQL_URL,query)\n\n    if (response.status === 403) {\n      this.props.logout() \n      localStorage.removeItem(\"Authorization\")\n    } \n\n    if (!response.ok) {\n      var message = `An error has occured: ${response.statusText}`;\n      this.setState(prevState => ({\n        error_code: response.status\n      }))\n      throw  new Error(message);\n    } \n    else {  \n      this.setState(prevState => ({\n        loader: false\n      }))\n      const {data} = await response.json();\n      return data;  \n    } \n  }\n\n  setJobName(value) {\n  this.setState(prevState => ({\n    job_name: value\n  }))\n  }\n\n  setFilterName(value) {\n    this.setState(prevState => ({\n      filter: value\n    }))\n    }\n\n  setFilterStartDate(value) {\n   this.setState(prevState => ({\n    filter_start_date: value\n   }))\n  }\n\n  setFilterEndDate(value) {\n   this.setState(prevState => ({\n    filter_end_date: value\n   }))\n  } \n\n  componentDidMount() {\n    this.setJobRuns()\n  }\n\n  componentWillUnmount() {\n   clearInterval(this.timerID);\n  }\n\n  setJobRuns = value => {\n    const offset = value || this.state.paginationValue;\n    this.fetchEtlFlowJobs(offset).then(({jobruns}) => {\n      this.setState(prevState => ({\n        jobruns: jobruns,\n        loader: false\n      }))\n     }).catch(error => {\n      this.setState(prevState => ({\n        error: error,\n        loader: false\n      }))})\n  }\n  \n  \n  incPaginationValue() {\n    this.setState(\n      prevState => ({ paginationValue: prevState.paginationValue + 10 })\n    )\n    this.setJobRuns(this.state.paginationValue + 10)\n  }\n\n  decPaginationValue() {\n    this.setState(\n      prevState => ({ paginationValue: prevState.paginationValue - 10 }),\n      () =>  this.setJobRuns(this.state.paginationValue)\n    )\n   \n  }\n\n  setInitialState(){\n    this.props.match.params.job_name = undefined\n    this.setState(prevState => ({  \n      job_name: '',\n      filter: '',\n      filter_start_date: '',\n      filter_end_date: '',\n      paginationValue: 0\n    }),()=> this.setJobRuns(0))\n  }\n\n  render(){\n    \n    var refresh = <ul class = \"pagination justify-content-center\"><Refresh call = {this.setJobRuns}/></ul> \n    if (this.state.error !== ''){\n      return (\n        <div class=\"container\">\n            {refresh} \n            <Error status_code = {this.state.error_code}/>\n        </div>\n      );\n    }\n    else if (this.state.loader){\n      return (\n        <div>\n            <Loader />\n        </div>\n      );\n    }\n    else{\n      return (\n        <div className=\"container-fluid\">\n            {refresh}  \n            <JobRunsData \n               data = {this.state.jobruns} \n               jobs = {this.props.jobs}\n               setJobName  = {this.setJobName}\n               setFilterStartDate  = {this.setFilterStartDate}\n               setFilterEndDate  = {this.setFilterEndDate}\n               setFilterName  = {this.setFilterName}\n               incPaginationValue = {this.incPaginationValue}\n               decPaginationValue = {this.decPaginationValue}\n               setInitialState = {this.setInitialState}\n               job_name = {this.state.job_name}\n               filter = {this.state.filter}\n               filter_start_date = {this.state.filter_start_date}\n               filter_end_date = {this.state.filter_end_date}\n               paginationValue   = {this.state.paginationValue}\n            />\n        </div>);\n    }\n  }\n}\n\nJobRuns.propTypes = {\n  jobs: PropTypes.array\n}\n// export default JobRuns; \nexport default withRouter(JobRuns)\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport $ from 'jquery';\n\nclass RunningJobsData extends React.Component {\n\n  showModal(data)\n  {\n    var props = ''\n    var queue = JSON.parse(data)\n \n    for(var key in queue) {\n    { \n        props  += \"<b>\"+ key + \"</b>\" +\"=\" + queue[key]+ \"<br></br>\"\n    }\n\n   {$(\"#queueStats .modal-body\").html(props)}\n   $(\"#queueStats\").modal();\n  }\n  }\n\n  render(){\n    return(\n      <div class=\"container\">\n        <table id=\"joblist\" class=\"table table-sm table-bordered\">\n          <thead class=\"thead-dark\">\n              <tr>\n                <th>Job Name</th>\n                <th>Submitted From</th>\n                <th>Execution Time</th>\n                <th>Details</th>\n              </tr>\n              </thead>\n                <tbody>\n                {this.props.data.map( (data) => (\n                  <tr key={data.name}>\n                    <td>{data.name}</td>\n                    <td>{data.submitted_from}</td>\n                    <td>{data.execution_time}</td>\n                    <td>\n                        <button type=\"button\" class=\"btn btn-secondary btn-sm\" data-toggle=\"modal\" onClick = {() => this.showModal(data.details)}>\n                          Stats\n                        </button>\n                        \n                        <div class=\"modal fade\" id=\"queueStats\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                          <div class=\"modal-dialog\" role=\"document\">\n                            <div class=\"modal-content\">\n                              <div class=\"modal-header\">\n                                <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                  <span aria-hidden=\"true\">&times;</span>\n                                </button>\n                              </div>\n                              <div class=\"modal-body\">\n                              </div>\n                              <div class=\"modal-footer\">\n                                <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n          </table>\n      </div>     \n    );      \n  }\n}\n\nRunningJobsData.propTypes = {\n  data: PropTypes.array\n}\n\nexport default RunningJobsData;","import React from 'react';\nimport Error from '../components/Error';\nimport Loader from '../components/Loader';\nimport Refresh from '../components/Refresh';\nimport RunningJobsData from '../cards/RunningJobs';\nimport {fetchCall, GRAPHQL_URL}  from '../utils/Global';\nimport $ from 'jquery';\n\nclass JobLogs extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = {\n      \n      queueStats: [],\n      loader:false,\n      error:'',\n      error_code:0,\n      errors: [],\n    }\n  }\n\n  async fetchEtlFlowQueueStats() {\n\n    this.setState(prevState => ({\n      loader: true,\n      error: ''\n    }))\n\n    var body = ` query { queueStats { name  details submitted_from execution_time  } }`\n    const response = await fetchCall(GRAPHQL_URL,body)\n\n    if (response.status === 403) {\n      this.props.logout() \n      localStorage.removeItem(\"Authorization\")\n    } \n    \n    if (!response.ok) {\n      var message = `An error has occured: ${response.statusText}`;\n      this.setState(prevState => ({\n        error_code: response.status\n      }))\n      throw  new Error(message);\n    } \n    else {  \n      const {data} = await response.json()\n      return data;   \n    } \n  }\n\n  setJobErrorDeails(is_error,errors){\n    this.setState(prevState => ({\n      is_error: is_error,\n      errors: errors                    \n      }))\n  }\n\n  componentDidMount() {\n    //calling getInfo api\n    this.setEtlFlowQueueStats()\n  }\n\n  setEtlFlowQueueStats = () => {\n    this.fetchEtlFlowQueueStats().then(({queueStats}) => {\n      this.setState(prevState  => ({\n        queueStats: queueStats,\n        loader: false\n      }))\n    }).catch((error) => {\n      this.setState(prevState => ({\n        error: error,\n        loader: false,\n      }))\n  }); \n  }\n\n  showModal(data)\n  {\n    var props = ''\n    var queue = JSON.parse(data)\n \n    for(var key in queue) {\n    { \n        props  += \"<b>\"+ key + \"</b>\" +\"=\" + queue[key]+ \"<br></br>\"\n    }\n\n   {$(\"#queueStats .modal-body\").html(props)}\n   $(\"#queueStats\").modal();\n  }\n  }\n\n  render(){\n    var refresh = <ul class = \"pagination justify-content-center\"><Refresh call = {this.setEtlFlowQueueStats}/></ul>\n    if (this.state.error !== ''){\n      return (\n        <div class=\"container\">\n            {refresh}\n            <Error status_code = {this.state.error_code}/>\n        </div>\n      );\n    } \n    else if (this.state.loader){\n      return (\n        <div>\n          <Loader />\n        </div>\n      );\n    }\n    else{ \n      return (\n        <div>\n          {refresh}\n          <RunningJobsData data = {this.state.queueStats}/>\n       </div>\n    ); \n    }         \n  }\n}\n\nexport default JobLogs;","import React from 'react';\nimport Loader from '../components/Loader';\nimport Error from '../components/Error';\nimport { fetchCall, GRAPHQL_URL } from '../utils/Global';\nimport $ from 'jquery';\nimport { withRouter } from 'react-router'\n\n\nclass JobRunDetails extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { \n      stepruns: [],\n      loader:false,\n      error:'',\n      error_code:0\n    }  \n  }\n\n  async fetchEtlFlowJobById(job_run_id) {\n    this.setState(prevState => ({\n      loader: true\n    }))\n\n\n    var body =  ` query { stepruns(job_run_id: \\\"${job_run_id}\\\"){ job_run_id step_name properties state start_time elapsed_time step_type step_run_id  } }`\n    const response = await fetchCall(GRAPHQL_URL,body)\n\n    if (response.status === 403) {\n      this.props.logout() \n      localStorage.removeItem(\"Authorization\")\n    } \n\n    if (!response.ok) {\n      var message = `An error has occured: ${response.statusText}`;\n      this.setState(prevState => ({\n        error_code: response.status\n      }))\n      throw  new Error(message);\n    } \n    else {  \n      const {data} = await response.json();\n      return data;\n    }    \n  }\n\n  setInterval() {\n    this.timerID = setInterval(\n      () => this.fetchEtlFlowJobs(),\n      1000 * 1000\n    );\n  }\n \n  componentDidMount() {\n    this.setEtlFlowJobById(this.props.match.params.id)\n    // set Interval\n    this.setInterval();\n  }\n\n  setEtlFlowJobById(id) {\n    this.fetchEtlFlowJobById(id).then(({stepruns}) => {\n      this.setState(prevState => ({\n        stepruns: stepruns,\n        loader : false\n      }))\n    })\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n \n  showModal(data)\n {\n   var props = ''\n   var data_jobruns = JSON.parse(data)\n\n   for(var key in data_jobruns) {\n   { \n       props  += \"<b>\"+ key + \"</b>\" +\"=\" + data_jobruns[key]+ \"<br></br>\"\n   }\n  {$(\"#stepRunModal .modal-body\").html(props)}\n  $(\"#stepRunModal\").modal();\n }\n  }\n\n  showStepRunStateModal(data)\n {\n  {$(\"#stepRunStateModal .modal-body\").html(data)}\n  $(\"#stepRunStateModal\").modal();\n  }\n\n  handleOnClick(job_id){    \n  this.props.history.push('/StepRunsById/' + job_id)\n  }\n\n  render(){\n   var step_run_id_flag = false\n   this.state.stepruns.map( item => {if(item.step_run_id !== \"\") step_run_id_flag = true})\n   var linked_jobs = ''\n   if(step_run_id_flag) {\n    linked_jobs = <th>Linked Job</th>\n   } else {\n    linked_jobs = \"\"\n   }\n\n   var remoteStep = [\"EtlFlowJobStep\",\"DPSparkJobStep\",\"ParallelETLStep\"];\n   if (this.state.error !== ''){\n    return (\n      <div>\n        <Error error={this.state.error_code}/>\n      </div>\n    );\n   } else if (this.state.loader){\n    return (\n      <div>\n        <Loader/>\n      </div>\n    );\n   }\n   else{\n   return (\n     <div className=\"container-fluid\">\n         <table id=\"job runs\" class=\"table table-sm table-bordered\">\n           <thead class=\"thead-dark\">\n                 <tr>\n                   <th>Job Run Id</th>\n                   <th>Step Type</th>\n                   <th>Step Name</th>\n                   <th>Start Time</th>\n                   <th>Elapsed Time</th>\n                   <th>Status</th>\n                   <th>Properties</th> \n                   {linked_jobs}\n                   <th>\n                        <button className=\"btn btn-secondary btn-block\" onClick = {() => {\n                          this.props.history.push('/JobRuns')\n                         }} >Back</button>\n                   </th>\n                 </tr>\n               </thead>\n                 <tbody>\n                 {this.state.stepruns.map( data => (\n                   <tr>\n                     <td>{data.job_run_id}</td>\n                     <td>{data.step_type}</td>\n                     <td>{data.step_name}</td>\n                     <td>{data.start_time}</td>\n                     <td>{data.elapsed_time}</td>\n                     <td>\n                     {(() => {\n                           if (data.state === \"pass\" || data.state == \"\" ) {\n                             return (\n                               <div>\n                                 <p className = \"text-success\">{data.state}</p>\n                               </div>\n                             )\n                           } else if (data.state === \"started\" || data.state == \"running\" ) {\n                             return (\n                               <div>\n                                 <p className = \"text-warning\">{data.state}</p>\n                               </div>\n                             )\n                           } else {\n                            return (\n                              <div>\n                                 <button type=\"button\" class=\"btn btn-danger btn btn-sm\" data-toggle=\"modal\" onClick = {() => this.showStepRunStateModal(data.state)}>\n                                     Error\n                                 </button>\n                            \n                                 <div class=\"modal fade\" id=\"stepRunStateModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                                   <div class=\"modal-dialog\" role=\"document\">\n                                     <div class=\"modal-content\">\n                                       <div class=\"modal-header\">\n                                         <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                         <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                           <span aria-hidden=\"true\">&times;</span>\n                                         </button>\n                                       </div>\n                                       <div class=\"modal-body\">\n                                       </div>\n                                       <div class=\"modal-footer\">\n                                         <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                       </div>\n                                     </div>\n                                   </div>\n                                 </div>\n                              </div>\n                            )\n                           }\n                         })()}\n                     </td>\n                     <td>\n                          <button type=\"button\" class=\"btn btn-secondary btn-sm\" data-toggle=\"modal\" onClick = {() => this.showModal(data.properties)}>\n                            Properties\n                          </button>\n                          \n                          <div class=\"modal fade\" id=\"stepRunModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                            <div class=\"modal-dialog\" role=\"document\">\n                              <div class=\"modal-content\">\n                                <div class=\"modal-header\">\n                                  <h5 class=\"modal-title\" id=\"exampleModalLabel\">Step Properties</h5>\n                                  <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                    <span aria-hidden=\"true\">&times;</span>\n                                  </button>\n                                </div>\n                                <div class=\"modal-body\">\n                                </div>\n                                <div class=\"modal-footer\">\n                                  <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                      </td>\n                     <td>\n                         {(() => {\n                            if (remoteStep.includes(data.step_type)) {\n                              return (\n                                <input type=\"button\" value=\"Check Progress\" class=\"btn btn-secondary btn-sm\" onClick = {() => this.setEtlFlowJobById(data.step_run_id)}/>\n                              )\n                            } else {\n                              return (\n                                <div></div>\n                              )\n                            }\n                          })()}\n                    </td>\n                   </tr>\n                 ))}\n                 </tbody>\n            </table>\n          </div>\n    );\n    }\n  }\n}\nexport default withRouter(JobRunDetails)\n","import React from 'react';\n\nimport jwt_decode from \"jwt-decode\";\nimport CurrentTime from './components/CurrentTime';\nimport Stats from './pages/Stats';\nimport Credentials from './pages/Credential';\nimport JobList from './pages/JobList';\nimport JobRuns from './pages/JobRuns';\nimport RunningJobs from './pages/RunningJobs';\nimport { fetchCall, GRAPHQL_URL } from './utils/Global';\n\nimport './css/App.css'\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport JobRunDetails from './cards/JobRunDetails';\n\n\nclass Routes extends React.Component {\n\n  constructor(props){\n    super(props); \n    this.state  = {\n      jobs: [],\n      metrics: [],\n      user: '',\n      loader:false,\n      error:'',\n      error_code:0,\n    }\n  }\n\n  async fetchEtlFlowJobs() {\n    this.setState(prevState => ({\n      loader: true,\n      error:''\n    }))\n    var body =  ` query { jobs { name  schedule props {key value} nextSchedule schduleRemainingTime is_active  last_run_time last_run_description } } `\n    const response = await fetchCall(GRAPHQL_URL,body)\n\n    if (response.status === 403) {\n      this.props.doLogout() \n      localStorage.removeItem(\"Authorization\")\n    } \n    \n    if (!response.ok) {\n      var message = `An error has occured: ${response.statusText}`;\n      this.setState(prevState => ({\n        error_code: response.status\n      }))\n      throw  new Error(message);\n    } \n    else {  \n      this.setState(prevState => ({\n        loader: false\n      }))  \n      const {data} = await response.json();\n\n      return data;    \n    }\n  }\n\n  setInterval() {\n    this.timerID = setInterval(\n      () => this.get_etl_jobs(),\n      1000 * 1000\n    );\n  }\n\n  fetchEtlFlowUserDetails() {\n    const token = localStorage.getItem('Authorization')\n    var decoded = JSON.parse(JSON.stringify(jwt_decode(token)));\n    this.setState({\n      user: decoded[\"user\"]\n    })\n  }\n\n  componentDidMount() {\n    //calling jobs api\n    this.get_etl_jobs()\n    this.fetchEtlFlowUserDetails()\n }\n\n  get_etl_jobs = () => {\n   this.fetchEtlFlowJobs().then(({jobs}) => {\n     this.setState(prevState => ({\n       jobs: jobs,\n       loader: false\n     }))\n   }).catch(error => {\n     this.setState(prevState => ({\n       error: error,\n       loader: false\n     }))\n    });\n  }\n\n  remove_token() {\n   localStorage.removeItem(\"Authorization\")\n   this.props.doLogout(\"\")\n}\n\n  render(){\n    return (\n       <Router>\n          <nav className = \"navbar navbar-expand-lg navbar-dark bg-dark mb-3\">\n              <ul className = \"nav navbar-nav w-100\">\n                <li className = \"nav-item nav-link\" ><Link to=\"/\">Jobs</Link> </li>\n                <li className = \"nav-item nav-link\" ><Link to=\"/JobRuns\">Job Runs</Link> </li>\n                <li className = \"nav-item nav-link\" ><Link to=\"/RunningJobs\">Running Jobs</Link> </li>\n                <li className = \"nav-item nav-link\" ><Link to=\"/Stats\">Stats</Link> </li>\n                <li className = \"nav-item nav-link\" ><Link to=\"/Credentials\">Credentials</Link> </li>\n              </ul>\n              <div class=\"navbar-collapse collapse w-100 order-3 dual-collapse2\">\n              <ul class=\"nav justify-content-end w-100\">\n              <CurrentTime GRAPHQL_URL = {this.props.GRAPHQL_URL}/>\n                <li class=\"nav-item dropdown\">\n\t                <a class=\"nav-link  dropdown-toggle\" href=\"#\" data-toggle=\"dropdown\">{this.state.user}</a>\n\t                  <ul class=\"dropdown-menu\">\n\t\t                  <li>\n                        <a class=\"dropdown-item\" href=\"https://github.com/tharwaninitin/etlflow\">\n                           Git Hub \n                        </a>\n                      </li>\n                      <li>\n                        <a class=\"dropdown-item\" href=\"https://tharwaninitin.github.io/etlflow/site/\">\n                          Docs\n                        </a>\n                      </li>\n                      <li>\n                        <a class=\"dropdown-item\">\n                          <input type=\"button\" class=\"btn btn-secondary btn-sm\" value=\"LogOut\" onClick = {() => this.remove_token()}></input>\n                        </a>\n                      </li>\n\t                  </ul>\n\t              </li>\n              </ul>\n            </div>\n          </nav>\n          <Switch>\n              <Route exact path=\"/\" component={() => (<JobList jobs={this.state.jobs} logout={this.props.doLogout} get_etl_jobs = {this.get_etl_jobs} error = {this.state.error}  error_code = {this.state.error_code} loader = {this.state.loader}/>)}/>\n              <Route path=\"/JobRuns/:job_name?\" render={props => (<JobRuns logout={this.props.doLogout} jobs={this.state.jobs}/>)}/>\n              <Route path=\"/RunningJobs\" render={props => (<RunningJobs logout={this.props.doLogout}/>)}/>\n              <Route path=\"/Stats\" render={props => (<Stats logout={this.props.doLogout}/>)}/>\n              <Route path=\"/Credentials\" render={props => ( <Credentials logout={this.props.doLogout} />)}/>\n              <Route path=\"/JobRunDetails/:id\" render={props => ( <JobRunDetails />)}/>\n          </Switch>\n       </Router>\n    );\n    }\n}\nexport default Routes;\n// export default withRouter(Routes)\n\n","import React from 'react';\nimport {fetchCall,GRAPHQL_LOGIN_URL}  from '../utils/Global';\nimport '../css/App.css'\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nclass Login extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = {\n         user_name: '',\n         password: '',\n         token: '', \n         login: [],\n        }\n\n    this.login_validation = this.login_validation.bind(this);\n    this.set_login_user_name = this.set_login_user_name.bind(this);\n    this.set_login_password = this.set_login_password.bind(this);\n  }\n\n  async fetchLoginDetails(user_name,password) {\n\n    var query =   ` mutation { login (user_name: \\\"${user_name}\\\", password: \\\"${password}\\\") { message token } }`\n    const response = await fetchCall(GRAPHQL_LOGIN_URL,query)\n    const {data} = await response.json();\n    return data;        \n  }\n\n login_validation() {\n    this.fetchLoginDetails(this.state.user_name,this.state.password).then(({login}) => {\n        var token_value = JSON.parse(JSON.stringify(login)).token\n        if(token_value !== \"\")\n        {\n            localStorage.setItem('Authorization', token_value);   \n            this.props.doLogin(token_value)\n            this.setState(prevState => ({\n                token: token_value\n              }))\n        }\n        else \n        {\n            alert(\"Invalid User\")\n        }\n    })   \n  } \n\n  set_login_user_name() {\n    this.setState(prevState => ({\n        user_name: document.getElementById(\"user_name\").value\n      }))\n  }\n\n  set_login_password() {\n    this.setState(prevState => ({\n        password: document.getElementById(\"password\").value\n      }))\n  }\n\n  render(){\n    return (\n    <div className=\"main\" align=\"center\">\n         <nav className = \"navbar navbar-expand-lg navbar-dark bg-dark mb-3\">\n             <ul className = \"nav navbar-nav w-50\">\n                 <li className = \"nav-item nav-link\">EtlFlow</li>\n             </ul>\n         </nav>   \n           <div className=\"col-md-3\">\n            <div className=\"login-form \">\n                <form id=\"form_login\" className = \"text-center border border-dark p-5\" onSubmit={(e) => {this.login_validation(); e.preventDefault();}  }>\n                    <p className = \"h4 mb-4\">EtlFlow Login</p>\n                    <div className=\"form-group\">\n                        <input type=\"text\"\n                         className=\"form-control\" \n                         aria-describedby=\"UsernameHelp\"\n                         placeholder=\"Username\"\n                         id=\"user_name\"\n                         onChange={e => this.set_login_user_name()}></input>\n                    </div>\n                    <div className=\"form-group\">\n                        <input\n                         type=\"password\"\n                         className=\"form-control\"\n                         aria-describedby=\"PasswordHelp\"\n                         placeholder=\"Password\"\n                         id=\"password\"\n                         onChange={e => this.set_login_password()}></input>\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-secondary btn-block\">Submit</button>\n                </form>   \n            </div>\n        </div>\n    </div>\n    );\n  }\n}\nexport default Login;","import React from 'react';\nimport Routes from './Routes';\nimport LoginComponent from './components/Login';\nimport './css/App.css'\n\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props);\n\n    this.state = {\n      token: '',\n    }   \n   this.doLogin = this.doLogin.bind(this)\n   this.doLogout = this.doLogout.bind(this)\n  }\n\n  doLogin(args_token,args_user) {\n    this.setState({\n      token: args_token\n    })\n  }\n\n  doLogout(args_token) {\n    this.setState({\n      token: ''\n    })\n  }\n\n  render(){\n    if(localStorage.getItem(\"Authorization\") === null){\n      return (  \n          <div>\n            <LoginComponent  GRAPHQL_LOGIN_URL = {this.GRAPHQL_LOGIN_URL} doLogin = {this.doLogin}/>  \n          </div>\n      );\n    } else {\n      return (  \n        <div>\n          <Routes  GRAPHQL_URL = {this.GRAPHQL_URL} doLogout = {this.doLogout}/>  \n        </div>\n     );\n    }\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}