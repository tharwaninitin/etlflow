{"version":3,"sources":["components/JobList.js","components/StepRuns.js","components/JobRuns.js","components/Metrics.js","components/Routes.js","components/Login.js","App.js","index.js"],"names":["JobList","props","state","jobs","notification","run_job_props","job_name","a","token","localStorage","getItem","fetch","method","headers","body","JSON","stringify","query","response","json","data","$","DataTable","job_properties","map","key","value","html","modal","this","setState","prevState","notification_var","class","role","replace","type","data-dismiss","aria-label","onClick","set_notification","aria-hidden","id","is_active","className","aria-describedby","data-toggle","defaultChecked","e","updateJobActiveState","name","job_deploy_mode","schedule","nextSchedule","schduleRemainingTime","show_modal","aria-labelledby","run_etl_job","then","run_job","console","log","parse","React","Component","StepRuns","stepruns","job_run_id","timerID","setInterval","fetchEtlFlowJobs","fetchEtlFlowJobById","clearInterval","data_jobruns","step_run_id_flag","item","step_run_id","linked_jobs","remoteStep","set_job_run_state","step_type","step_name","start_time","elapsed_time","properties","tabindex","includes","JobRuns","resetForm","jobruns","filter","filter_start_date","filter_end_date","paginationValue","stepRun","filterOperation","baseState","bind","limit","offset","document","getElementById","button","filter_button_name","aria-haspopup","aria-expanded","list","placeholder","onChange","set_job_name","set_filter_start_date","set_filter_end_date","window","location","reload","job_type","show_job_run_stat_modal","Metrics","metrics","fetchEtlFlowMetrics","active_jobs","active_subscribers","etl_jobs","cron_jobs","used_memory","free_memory","total_memory","max_memory","build_time","Routes","removeItem","doLogout","to","href","remove_token","exact","path","component","Login","user_name","password","login","login_validation","set_login_user_name","set_login_password","fetchLoginDetails","token_value","setItem","doLogin","alert","align","onSubmit","preventDefault","App","args_token","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3b7db998.chunk.js","sourcesContent":["import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n\nimport '../css/App.css'\n\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport $ from 'jquery';\n\nclass JobList extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { \n      jobs: [],\n      notification: false,\n      run_job_props: '',\n      job_name: ''\n      }\n  }\n\n  async updateJobActiveState(job_name,state) {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n            mutation {\n              update_job_state (name:\\\"${job_name}\\\" ,state: ${state}){\n             }\n           }\n          `\n        }\n      )  \n    })\n    const {data} = await response.json();\n    return data;    \n  }\n\n  async run_etl_job(job_name,state) {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n            mutation {\n              run_job (name:\\\"${job_name}\\\" ,props: { key: \\\"\\\", value: \\\"\\\" }){\n                name\n                props {key value}\n             }\n           }\n          `\n        }\n      )  \n    })\n    const {data} = await response.json();\n    return data;    \n  }\n\n\n  componentDidMount() {\n    $('#joblist').DataTable();\n  }\n\n show_modal(data)\n  {\n    var job_properties = \"\"\n    { \n      data.map(  props =>\n        job_properties  += \"<b>\"+ props.key + \"</b>\" +\"=\" + props.value + \"<br></br>\"\n    )}\n\n   {$(\"#jobListeModal .modal-body\").html(job_properties)}\n   $(\"#jobListeModal\").modal();\n  }\n\n  set_notification(state){\n    this.setState(prevState => ({\n      notification: state\n      }))\n  }\n\n\n  render(){\n\n    var props = ''\n    var notification_var = \"\"\n    if(this.state.notification) {\n      notification_var =\n      <div class=\"alert alert-success alert-dismissible fade show\" role=\"alert\">\n         <h4 class=\"alert-heading\">Job {this.state.job_name.replace(/^\"(.*)\"$/, '$1')} submitted successfully!  </h4>\n         <p>{this.state.run_job_props}</p>\n         <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" onClick = {() => {this.set_notification(false)}}>\n            <span aria-hidden=\"true\">&times;</span>\n         </button>\n      </div>\n    } \n\n\n    return (\n          <div class=\"container-fluid\">\n          <div>{notification_var}</div>\n          <table id=\"joblist\" class=\"table table-sm table-bordered\">\n            <thead class=\"thead-dark\">\n                  <tr>\n                    <th>Active/Inactive</th>\n                    <th>Job Name</th>\n                    <th>Schedule</th>\n                    <th>Next Schedule</th>\n                    <th>Schdule Remaining Time</th>\n                    <th>Job Deploy Mode</th>\n                    <th>Properties</th>\n                    <th>Action</th>\n                  </tr>\n                </thead>\n                  <tbody>\n                  {this.props.jobs.map( (data) => (\n                    <tr>\n                      <td>{(() => {\n                           if (data.is_active ) {\n                             return (\n                               <div className = \"checkbox\">\n                                 <input type=\"checkbox\"\n                                     aria-describedby=\"UsernameHelp\"\n                                     data-toggle = \"toggle\"\n                                     defaultChecked\n                                     onClick={e => this.updateJobActiveState(data.name,false)}>\n                                 </input>\n                               </div>\n                             )\n                           } else {\n                            return (\n                              <div className = \"checkbox\">\n                                <input type=\"checkbox\"\n                                     aria-describedby=\"UsernameHelp\"\n                                     data-toggle = \"toggle\"\n                                     onClick={e => this.updateJobActiveState(data.name,true)}>\n                                 </input>\n                              </div>\n                            )\n                           }\n                         })()}\n                      </td>\n                      <td>{(() => {\n                           if (data.job_deploy_mode === \"NA\" ) {\n                             return (\n                               <div>\n                                 <p className = \"text-danger\">{data.name}</p>\n                               </div>\n                             )\n                           } else {\n                            return (\n                              <div>\n                               {data.name}\n                              </div>\n                            )\n                           }\n                         })()}</td>\n                      <td>{data.schedule}</td>\n                      <td>{data.nextSchedule}</td>\n                      <td>{data.schduleRemainingTime}</td>\n                      <td>{data.job_deploy_mode}</td>\n                      <td>\n                          <button type=\"button\" class=\"btn btn-secondary btn-sm\" data-toggle=\"modal\" onClick = {() => this.show_modal(data.props)}>\n                            Properties\n                          </button>\n                          \n                          <div class=\"modal fade\" id=\"jobListeModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                            <div class=\"modal-dialog\" role=\"document\">\n                              <div class=\"modal-content\">\n                                <div class=\"modal-header\">\n                                  <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                  <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                    <span aria-hidden=\"true\">&times;</span>\n                                  </button>\n                                </div>\n                                <div class=\"modal-body\">\n                                </div>\n                                <div class=\"modal-footer\">\n                                  <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                      </td>\n                      <td>\n                        {/* <form onSubmit={(e) => {this.run_etl_job(data.name).then(({run_job}) => {\n                                console.log(run_job)\n                              }); this.set_notification(true)}}> */}\n                          <input type=\"button\" value=\"Run\" class=\"btn btn-secondary btn-sm\" onClick = {() => {\n                                 this.run_etl_job(data.name).then(({run_job}) => {\n                                  console.log(JSON.parse(JSON.stringify(run_job)))\n                                  this.set_notification(true)\n                                  var data =  JSON.parse(JSON.stringify(run_job))\n                                  for(var key in data) {\n                                    {  \n                                       if(key === \"props\") {\n                                        props = JSON.stringify(data[key])\n                                        this.setState(prevState => ({\n                                          run_job_props: props\n                                          }))\n                                       } else {\n                                        this.setState(prevState => ({\n                                          job_name: JSON.stringify(data[key])\n                                          }))\n                                       }\n                                    }\n                                   }\n                                 });\n                                 \n                         }}  />\n                        {/* </form> */}\n                        </td>\n                    </tr>\n                  ))}\n                </tbody>\n            </table>\n      </div>     \n    );\n  }\n}\nexport default JobList;\n","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport $ from 'jquery';\n\nclass StepRuns extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { \n      stepruns: []\n    }\n    \n  }\n\n  async fetchEtlFlowJobById(job_run_id) {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    console.log(\"job_run_id :\" + job_run_id )\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          query {\n            stepruns(job_run_id:    \\\"${job_run_id}\\\"){\n                job_run_id\n                step_name\n                properties\n                state\n                start_time\n                elapsed_time\n                step_type\n                step_run_id\n             }\n           }\n          `\n        }\n      )  \n    })\n    const {data} = await response.json();\n    return data;    \n  }\n\n  setInterval() {\n    this.timerID = setInterval(\n      () => this.fetchEtlFlowJobs(),\n      1000 * 1000\n    );\n  }\n \n  componentDidMount() {\n    this.fetchEtlFlowJobById(this.props.job_run_id).then(({stepruns}) => {\n      console.log(stepruns)\n      this.setState(prevState => ({\n        stepruns: stepruns\n      }))\n    })\n    // set Interval\n    this.setInterval();\n }\n\n componentWillUnmount() {\n  clearInterval(this.timerID);\n }\n \n show_modal(data)\n {\n   var props = ''\n   var data_jobruns = JSON.parse(data)\n   console.log(\"data_jobruns :\" + data_jobruns  )\n\n   for(var key in data_jobruns) {\n   { \n       props  += \"<b>\"+ key + \"</b>\" +\"=\" + data_jobruns[key]+ \"<br></br>\"\n       console.log(\"result is :\" + key + \" value: \" + data_jobruns[key])\n   }\n  {$(\"#stepRunModal .modal-body\").html(props)}\n  $(\"#stepRunModal\").modal();\n }\n}\n\nshow_step_run_stat_modal(data)\n {\n  console.log(\"data state  :\" + data  )\n\n  {$(\"#stepRunStateModal .modal-body\").html(data)}\n  $(\"#stepRunStateModal\").modal();\n }\n\n\n\n render(){\n   var step_run_id_flag = false\n   this.state.stepruns.map( item => {if(item.step_run_id !== \"\") step_run_id_flag = true})\n   var linked_jobs = ''\n   if(step_run_id_flag) {\n    linked_jobs = <th>Linked Job</th>\n   } else {\n    linked_jobs = \"\"\n   }\n\n   var remoteStep = [\"EtlFlowJobStep\",\"DPSparkJobStep\"];\n   return (\n     <div className=\"container-fluid\">\n         <table id=\"job runs\" class=\"table table-sm table-bordered\">\n           <thead class=\"thead-dark\">\n                 <tr>\n                   <th>Job Run Id</th>\n                   <th>Step Type</th>\n                   <th>Step Name</th>\n                   <th>Start Time</th>\n                   <th>Elapsed Time</th>\n                   <th>Status</th>\n                   <th>Properties</th> \n                   {linked_jobs}\n                   <th>\n                        <button className=\"btn btn-secondary btn-block\" onClick = {() => this.props.set_job_run_state()}>Back</button>\n                   </th>\n                 </tr>\n               </thead>\n                 <tbody>\n                 {this.state.stepruns.map( data => (\n                   <tr>\n                     <td>{data.job_run_id}</td>\n                     <td>{data.step_type}</td>\n                     <td>{data.step_name}</td>\n                     <td>{data.start_time}</td>\n                     <td>{data.elapsed_time}</td>\n                     <td>\n                     {(() => {\n                           if (data.state === \"pass\" || data.state == \"\" ) {\n                             return (\n                               <div>\n                                 <p className = \"text-success\">{data.state}</p>\n                               </div>\n                             )\n                           } else if (data.state === \"started\" || data.state == \"running\" ) {\n                             return (\n                               <div>\n                                 <p className = \"text-warning\">{data.state}</p>\n                               </div>\n                             )\n                           } else {\n                              <div>\n                                  <button type=\"button\" class=\"btn btn-secondary btn-sm\" data-toggle=\"modal\" onClick = {() => alert(\"jghg\")}>\n                                   Error\n                                  </button>\n                        \n                                  <div class=\"modal fade\" id=\"stepRunStateModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                                   <div class=\"modal-dialog\" role=\"document\">\n                                     <div class=\"modal-content\">\n                                       <div class=\"modal-header\">\n                                         <h5 class=\"modal-title\" id=\"exampleModalLabel\">Status</h5>\n                                         <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                           <span aria-hidden=\"true\">&times;</span>\n                                         </button>\n                                       </div>\n                                       <div class=\"modal-body\">\n                                       </div>\n                                       <div class=\"modal-footer\">\n                                         <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                       </div>\n                                     </div>\n                                   </div>\n                                  </div>\n                              </div>\n                           }\n                         })()}\n                     </td>\n                     <td>\n                          <button type=\"button\" class=\"btn btn-secondary btn-sm\" data-toggle=\"modal\" onClick = {() => this.show_modal(data.properties)}>\n                            Properties\n                          </button>\n                          \n                          <div class=\"modal fade\" id=\"stepRunModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                            <div class=\"modal-dialog\" role=\"document\">\n                              <div class=\"modal-content\">\n                                <div class=\"modal-header\">\n                                  <h5 class=\"modal-title\" id=\"exampleModalLabel\">Step Properties</h5>\n                                  <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                    <span aria-hidden=\"true\">&times;</span>\n                                  </button>\n                                </div>\n                                <div class=\"modal-body\">\n                                </div>\n                                <div class=\"modal-footer\">\n                                  <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                      </td>\n                     <td>\n                         {(() => {\n                            if (remoteStep.includes(data.step_type)) {\n                              return (\n                                <input type=\"button\" value=\"Check Progress\" class=\"btn btn-secondary btn-sm\" onClick = {() => this.fetchEtlFlowJobById(data.step_run_id).then(({stepruns}) => {\n                                    console.log(stepruns)\n                                    this.setState(prevState => ({\n                                      stepruns: stepruns\n                                    }))\n                                  })}/>\n                              )\n                            } else {\n                              return (\n                                <div></div>\n                              )\n                            }\n                          })()}\n                    </td>\n                   </tr>\n                 ))}\n                 </tbody>\n            </table>\n          </div>\n    );\n  }\n}\nexport default StepRuns;     ","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery/dist/jquery.min.js';\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport StepRuns from './StepRuns';\nimport $ from 'jquery';\n\nclass JobRuns extends React.Component {\n  constructor(props){\n    super(props); \n    this.job_run_id = ''\n    this.filterOperation = [\"IN\",\"NOT IN\"]\n    this.state  = { \n      jobruns: [],\n      filter: '',\n      job_name: '',\n      filter_start_date: '',\n      filter_end_date: '',\n      paginationValue: 0,\n      stepRun: false\n    }\n    this.baseState = this.state \n    this.set_job_run_state = this.set_job_run_state.bind(this);    \n  }\n\n  resetForm = () => {\n    this.setState({jobruns: this.state.jobruns,\n      filter: '',\n      job_name: '',\n      filter_start_date: '',\n      filter_end_date: '',\n      paginationValue: 0,\n      stepRun: false})\n  }\n\n\n  async fetchEtlFlowJobs() {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    console.log(\"paginationValue :\" + this.state.paginationValue)\n    const limit = 10;\n    const offset = this.state.paginationValue;\n\n    var query = ` query { jobruns(limit: ${limit} , offset: ${offset}){ job_run_id job_name description properties state start_time elapsed_time job_type is_master}}`\n    \n    if (this.state.filter_end_date !== \"\" && this.state.filter !== \"\" ) {\n      query = ` query { jobruns(limit: ${limit} , offset: ${offset},  startTime: \\\"${this.state.filter_start_date}\\\", endTime: \\\"${this.state.filter_end_date}\\\",filter: \\\"${this.state.filter}\\\", jobName: \\\"${this.state.job_name}\\\"  )\n      { job_run_id job_name description properties state start_time elapsed_time job_type is_master}}`\n    } else if (this.state.filter_end_date !== \"\" ){\n      query = ` query { jobruns(limit: ${limit} , offset: ${offset},  startTime: \\\"${this.state.filter_start_date}\\\", endTime: \\\"${this.state.filter_end_date}\\\")\n      { job_run_id job_name description properties state start_time elapsed_time job_type is_master}}`\n    } else if (this.state.filter !== \"\") {\n      query = ` query { jobruns(limit: ${limit} , offset: ${offset}, filter: \\\"${this.state.filter}\\\", jobName: \\\"${this.state.job_name}\\\"  )\n      { job_run_id job_name description properties state start_time elapsed_time job_type is_master}}`\n    } else if (this.state.filter === \"\" && this.state.job_name !== \"\") {\n      query = ` query { jobruns(limit: ${limit} , offset: ${offset} ,filter: \"IN\", jobName: \\\"${this.state.job_name}\\\"  )\n      { job_run_id job_name description properties state start_time elapsed_time job_type is_master}}`\n    } else {\n      query = ` query { jobruns(limit: ${limit} , offset: ${offset}){ job_run_id job_name description properties state start_time elapsed_time job_type is_master}}`\n    }\n    \n    console.log(\"Query is :\" + query)\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: query\n        }\n      )  \n    })\n    const {data} = await response.json();\n    return data;   \n  }\n\n  setInterval() {\n    this.timerID = setInterval(\n      () => this.fetchEtlFlowJobs(),\n      1000 * 1000\n    );\n  }\n \n  componentDidMount() {\n    this.fetchEtlFlowJobs().then(({jobruns}) => {\n      console.log(jobruns)\n      this.setState(prevState => ({\n        jobruns: jobruns\n      }))\n    })\n\n\n    // set Interval\n    this.setInterval();\n }\n\n componentWillUnmount() {\n  clearInterval(this.timerID);\n }\n\n set_job_run_state() {\n  this.setState(state => ({\n    stepRun: !state.stepRun\n  }))\n }\n \n\n set_job_name() {\n  this.setState(prevState => ({\n    job_name: document.getElementById(\"exampleDataList\").value\n  }))\n }\n\n set_filter_start_date() {\n  this.setState(prevState => ({\n    filter_start_date: document.getElementById(\"start_date\").value\n  }))\n }\n\n set_filter_end_date() {\n  this.setState(prevState => ({\n    filter_end_date: document.getElementById(\"end_date\").value\n  }))\n }\n\n\n show_modal(data)\n {\n   var props = ''\n   var data_jobruns = JSON.parse(data)\n   console.log(\"data_jobruns :\" + data_jobruns  )\n\n   for(var key in data_jobruns) {\n   { \n       props  += \"<b>\"+ key + \"</b>\" +\"=\" + data_jobruns[key]+ \"<br></br>\"\n       console.log(\"result is :\" + key + \" value: \" + data_jobruns[key])\n   }\n  {$(\"#jobRunModal .modal-body\").html(props)}\n  $(\"#jobRunModal\").modal();\n }\n}\n\n show_job_run_stat_modal(data)\n {\n  {$(\"#jobRunStateModal .modal-body\").html(data)}\n  $(\"#jobRunStateModal\").modal();\n }\n\n render(){\n   \n   var button = ''\n   var filter_button_name = '' \n\n   //Code for adding pagination element\n   if (this.state.paginationValue === 0) {\n     button = <li class=\"page-item disabled\">\n     <input type=\"button\" value=\"Previous\" class=\"page-link btn btn-secondary btn-sm\"/></li>\n   } else {\n     button =  <li class=\"page-item\">\n     <input type=\"button\" value=\"Previous\" class=\"page-link btn btn-secondary btn-sm\" onClick = {() => {\n              this.setState(prevState => ({\n               paginationValue: this.state.paginationValue  -   10\n             }))\n             this.fetchEtlFlowJobs(this.state.paginationValue - 10).then(({jobruns}) => {\n               console.log(jobruns)\n               this.setState(prevState => ({\n                 jobruns: jobruns\n               }))\n             }) \n     }}/></li>\n   } \n\n   //Code for adding button name\n   if (this.state.filter !== '') {\n     filter_button_name = this.state.filter\n   }else {\n     filter_button_name = \"Add Filter\"\n   } \n\n   if(this.state.stepRun) {\n     return (\n       <div>\n         <StepRuns job_run_id={this.job_run_id}  set_job_run_state = {this.set_job_run_state} />\n       </div>\n     );\n   } else{\n   return (\n     <div className=\"container-fluid\">\n       <ul class = \"pagination justify-content-center\">\n         <div class=\"dropdown\">\n            <button class=\"btn btn-light dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n               {filter_button_name}\n            </button>\n            <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n              { this.filterOperation.map ( filter => (\n                   <a class=\"dropdown-item\">\n                      <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                           this.setState(prevState => ({\n                               filter: filter\n                       }))}}> {filter} </button>\n                   </a>\n              ))}\n            </div>\n         </div>\n         <div className =\"form-inline float-right\">\n             <div className=\"mb-1\">\n             <input type=\"text\"\n                        className=\"form-control input-sm\"\n                        list = \"datalistOptions\"\n                        id = \"exampleDataList\"\n                        placeholder = \"Type to search\"\n                        onChange={e => this.set_job_name()}></input>      \n             </div>\n             <datalist id = \"datalistOptions\">\n               {this.props.jobs.map( data => (\n                 <option value = {data.name}></option>\n               ))}\n             </datalist> \n         </div>\n         <div class = \"form-inline float-right\">\n              <div class = \"mb-1\"> \n                  <input type=\"date\"\n                         className=\"form-control input-sm\"\n                         placeholder=\"startdate(YYYY-MM-DD)\" \n                         id = \"start_date\"\n                         onChange={e => this.set_filter_start_date()}\n                   ></input>\n              </div>\n              <div class = \"mb-1\"> \n                  <input type=\"date\"\n                         className=\"form-control input-sm\"\n                         placeholder=\"enddate(YYYY-MM-DD)\"\n                         id = \"end_date\"\n                         onChange={e => this.set_filter_end_date()}\n                   ></input> \n              </div>    \n         </div> \n         <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                window.location.reload(true)\n             }} >\n            Clear\n         </button>\n         <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                this.fetchEtlFlowJobs().then(({jobruns}) => {\n                     console.log(jobruns)\n                     this.setState(prevState => ({\n                       jobruns: jobruns\n                     }))\n                   })\n             }} >\n            Refresh\n         </button>\n       </ul>\n       <table id=\"jobruns\" class=\"table table-sm table-bordered\">\n           <thead class=\"thead-dark\">\n                 <tr>\n                   <th>Job Name</th>\n                   <th>Job Type</th>\n                   <th>Job Start Time</th>\n                   <th>Elapsed Time</th>\n                   <th>Job Status</th>\n                   <th>Job Properties</th>\n                   <th>Step Properties</th>\n                 </tr>\n               </thead>\n                 <tbody>\n                 {this.state  .jobruns.map( data => (\n                   <tr>\n                     <td>{data.job_name}</td>\n                     <td>{data.job_type}</td>\n                     <td>{data.start_time}</td>\n                     <td>{data.elapsed_time}</td>\n                     <td>\n                     {(() => {\n                           if (data.state === \"pass\" || data.state == \"\" ) {\n                             return (\n                               <div>\n                                 <p className = \"text-success\">{data.state}</p>\n                               </div>\n                             )\n                           } else if (data.state === \"started\" || data.state == \"running\" ) {\n                             return (\n                               <div>\n                                 <p className = \"text-warning\">{data.state}</p>\n                               </div>\n                             )\n                           } else {\n                            return (\n                              <div>\n                                 <button type=\"button\" class=\"btn btn-danger btn btn-sm\" data-toggle=\"modal\" onClick = {() => this.show_job_run_stat_modal(data.state)}>\n                                     Error\n                                 </button>\n                            \n                                 <div class=\"modal fade\" id=\"jobRunStateModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                                   <div class=\"modal-dialog\" role=\"document\">\n                                     <div class=\"modal-content\">\n                                       <div class=\"modal-header\">\n                                         <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                         <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                           <span aria-hidden=\"true\">&times;</span>\n                                         </button>\n                                       </div>\n                                       <div class=\"modal-body\">\n                                       </div>\n                                       <div class=\"modal-footer\">\n                                         <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                       </div>\n                                     </div>\n                                   </div>\n                                 </div>\n                              </div>\n                            )\n                           }\n                         })()}\n                     </td>\n                     <td>\n                         <button type=\"button\" class=\"btn btn-secondary btn-sm\" data-toggle=\"modal\" onClick = {() => this.show_modal(data.properties)}>\n                           Properties\n                         </button>\n                         \n                         <div class=\"modal fade\" id=\"jobRunModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                           <div class=\"modal-dialog\" role=\"document\">\n                             <div class=\"modal-content\">\n                               <div class=\"modal-header\">\n                                 <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                 <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                   <span aria-hidden=\"true\">&times;</span>\n                                 </button>\n                               </div>\n                               <div class=\"modal-body\">\n                               </div>\n                               <div class=\"modal-footer\">\n                                 <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                               </div>\n                             </div>\n                           </div>\n                         </div>\n                     </td>\n                     <td><input type=\"button\" value=\"Step Properties\" class=\"btn btn-secondary btn-sm\" onClick = {() => {\n                       this.set_job_run_state()\n                       this.job_run_id =  data.job_run_id\n                     }}/></td>\n                   </tr>\n                 ))}\n                 </tbody>\n            </table>  \n            <nav aria-label=\"Page navigation example\">\n               <ul class=\"pagination justify-content-center\">\n                 {button}\n                 <li class=\"page-item\"><input type=\"button\" value=\"Next\" class=\"page-link btn btn-secondary btn-sm\" onClick = {() => {\n                   this.setState(prevState => ({\n                     paginationValue: this.state.paginationValue  + 10\n                   }))\n                   this.fetchEtlFlowJobs(this.state.paginationValue + 10).then(({jobruns}) => {\n                     console.log(jobruns)\n                     this.setState(prevState => ({  \n                       jobruns: jobruns\n                     }))\n                   })\n                   }}/></li>\n               </ul>\n         </nav>\n          </div>\n   );\n  }\n }\n}\nexport default JobRuns;     ","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n\n\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport $ from 'jquery';\n\nclass Metrics extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { metrics: [] }\n  }\n\n  async fetchEtlFlowMetrics() {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          query {\n            metrics {\n                active_jobs\n                active_subscribers\n                etl_jobs\n                cron_jobs\n                used_memory\n                free_memory\n                total_memory\n                max_memory\n                build_time\n              }\n           }\n          `\n        }\n      )  \n    })\n    const {data} = await response.json();\n    return data;    \n  }\n\n  componentDidMount() {\n    //calling getInfo api\n    this.fetchEtlFlowMetrics().then(({metrics}) => {\n        console.log(metrics)\n        this.setState(prevState => ({\n            metrics: metrics\n        }))\n      })\n   }\n\n\n  render(){\n    return (\n      <div class=\"container\">\n          <ul class = \"pagination justify-content-center\">\n             <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                   this.fetchEtlFlowMetrics().then(({metrics}) => {\n                    console.log(metrics)\n                    this.setState(prevState => ({\n                        metrics: metrics\n                    }))\n                  })\n                }} >\n               Refresh\n             </button>\n         </ul>\n         <ul class=\"list-group \">\n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Active Jobs</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.active_jobs}</span>\n            </li>\n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Active Subscribers</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.active_subscribers}</span>\n            </li>\n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Etl Jobs</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.etl_jobs}</span>\n            </li>\n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Cron Jobs</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.cron_jobs}</span>\n            </li>  \n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Used Memory</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.used_memory}</span>\n            </li> \n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Free Memory</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.free_memory}</span>\n            </li>  \n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Total Memory</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.total_memory}</span>\n            </li>\n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Max Memory</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.max_memory}</span>\n            </li> \n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Build Time</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.build_time}</span>\n            </li>   \n         </ul>\n      </div>     \n    );          \n  }\n}\nexport default Metrics;\n","import React from 'react';\nimport JobList from './JobList';\nimport JobRuns from './JobRuns';\nimport Metrics from './Metrics';\n\nimport '../css/App.css'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nclass Routes extends React.Component {\n\n  constructor(props){\n    super(props); \n    this.state  = {\n      jobs: [],\n      metrics: []\n    }\n  }\n\n  async fetchEtlFlowJobs() {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          query {\n              jobs {\n                name \n                schedule\n                props {key value} \n                nextSchedule \n                schduleRemainingTime \n                is_active \n                job_deploy_mode \n                max_active_runs\n             }\n           }\n          `\n        }\n      )  \n    })\n    const {data} = await response.json();\n    return data;    \n  }\n\n  setInterval() {\n    this.timerID = setInterval(\n      () => this.fetchEtlFlowJobs(),\n      1000 * 1000\n    );\n  }\n\n\n\n\n  componentDidMount() {\n\n    //calling jobs api\n    this.fetchEtlFlowJobs().then(({jobs}) => {\n      console.log(jobs)\n      this.setState(prevState => ({\n        jobs: jobs\n      }))\n    })\n\n }\n\n remove_token() {\n  localStorage.removeItem(\"Authorization\")\n  this.props.doLogout(\"\")\n}\n\n  render(){\n    return (\n      <Router>\n      <div>\n        <nav className = \"navbar navbar-expand-lg navbar-dark bg-dark mb-3\">\n            <ul className = \"nav navbar-nav w-100\">\n                <li className = \"nav-item nav-link\" ><Link to=\"/\">Etlflow</Link> </li>\n                <li className = \"nav-item nav-link\" ><Link to=\"/JobRuns\">JobRuns</Link> </li>\n                <li className = \"nav-item nav-link\" ><Link to=\"/getInfo\">Metrics</Link> </li>\n\n            </ul>\n            <div class=\"navbar-collapse collapse w-100 order-3 dual-collapse2\">\n              <ul class=\"nav justify-content-end w-100\">\n                <li class=\"nav-item dropdown\">\n\t                <a class=\"nav-link  dropdown-toggle\" href=\"#\" data-toggle=\"dropdown\"> mint_admin  </a>\n\t                  <ul class=\"dropdown-menu\">\n\t\t                  <li>\n                        <a class=\"dropdown-item\" href=\"https://github.com/tharwaninitin/etlflow\">\n                           Git Hub \n                        </a>\n                      </li>\n                      <li>\n                        <a class=\"dropdown-item\" href=\"https://tharwaninitin.github.io/etlflow/site/\">\n                          Docs\n                        </a>\n                      </li>\n                      <li>\n                        <a class=\"dropdown-item\">\n                          <input type=\"button\" class=\"btn btn-secondary btn-sm\" value=\"LogOut\" onClick = {() => this.remove_token()}></input>\n                        </a>\n                      </li>\n\t                  </ul>\n\t              </li>\n              </ul>\n            </div>\n        </nav>\n        <Switch>\n          <Route exact path=\"/\" component={() => (<JobList jobs={this.state.jobs} />)}/>\n          <Route path=\"/JobRuns\" component={() => (<JobRuns jobs={this.state.jobs}/>)}/>\n          <Route path=\"/getInfo\" component={() => (<Metrics/>)}/>\n        </Switch>\n      </div>\n      </Router>\n    );\n  }\n}\nexport default Routes;\n\n","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery/dist/jquery.min.js';\n\nclass Login extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = {\n         user_name: '',\n         password: '',\n         token: '', \n         login: [],\n\n        }\n\n    this.login_validation = this.login_validation.bind(this);\n    this.set_login_user_name = this.set_login_user_name.bind(this);\n    this.set_login_password = this.set_login_password.bind(this);\n  }\n\n  async fetchLoginDetails(user_name,password) {\n    const GRAPHQL_URL = '/api/login'\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          mutation {\n            login (user_name: \\\"${user_name}\\\", password: \\\"${password}\\\") {\n                message \n                token\n             }\n           }\n          `\n         }\n      )  \n    })  \n    const {data} = await response.json();\n    return data;        \n  }\n\n login_validation() {\n    this.fetchLoginDetails(this.state.user_name,this.state.password).then(({login}) => {\n        var token_value = JSON.parse(JSON.stringify(login)).token\n        if(token_value !== \"\")\n        {\n            console.log(\"Valid user\")\n            localStorage.setItem('Authorization', token_value);   \n            this.setState(prevState => ({\n                token: token_value\n              })) \n            this.props.doLogin(token_value)\n        }\n        else \n        {\n            console.log(\"Invalid User\")\n            alert(\"Invalid User\")\n        }\n    })   \n  } \n\n  set_login_user_name() {\n    this.setState(prevState => ({\n        user_name: document.getElementById(\"user_name\").value\n      }))\n  }\n\n  set_login_password() {\n    this.setState(prevState => ({\n        password: document.getElementById(\"password\").value\n      }))\n  }\n\n  render(){\n    return (\n    <div className=\"main\" align=\"center\">\n         <nav className = \"navbar navbar-expand-lg navbar-dark bg-dark mb-3\">\n             <ul className = \"nav navbar-nav w-50\">\n                 <li className = \"nav-item nav-link\">EtlFlow</li>\n             </ul>\n         </nav>   \n           <div className=\"col-md-3\">\n            <div className=\"login-form \">\n                <form id=\"form_login\" className = \"text-center border border-dark p-5\" onSubmit={(e) => {this.login_validation(); e.preventDefault();}  }>\n                    <p className = \"h4 mb-4\">EtlFlow Login</p>\n                    <div className=\"form-group\">\n                        <input type=\"text\"\n                         className=\"form-control\" \n                         aria-describedby=\"UsernameHelp\"\n                         placeholder=\"Username\"\n                         id=\"user_name\"\n                         onChange={e => this.set_login_user_name()}></input>\n                    </div>\n                    <div className=\"form-group\">\n                        <input\n                         type=\"password\"\n                         className=\"form-control\"\n                         aria-describedby=\"PasswordHelp\"\n                         placeholder=\"Password\"\n                         id=\"password\"\n                         onChange={e => this.set_login_password()}></input>\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-secondary btn-block\">Submit</button>\n                </form>   \n            </div>\n        </div>\n    </div>\n    );\n  }\n}\nexport default Login;","import React from 'react';\n//Bootstrap and jQuery libraries\nimport Routes from './components/Routes';\nimport LoginComponent from './components/Login';\nimport StepRuns from './components/StepRuns';\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props);\n\n    this.state = {\n      token: ''\n    }\n\n    this.doLogin = this.doLogin.bind(this)\n    this.doLogout = this.doLogout.bind(this)\n\n  }\n\n  doLogin(args_token) {\n    console.log(\"token from parent :\" +args_token )\n    this.setState({\n      token: args_token\n    })\n  }\n\n\n  doLogout(args_token) {\n    console.log(\"token from parent :\" + args_token )\n    this.setState({\n      token: ''\n    })\n  }\n\n\n  render(){\n    if(localStorage.getItem(\"Authorization\") === null){\n      return (  \n          <div>\n            <LoginComponent doLogin = {this.doLogin}/>  \n          </div>\n      );\n    } else {\n      return (  \n        <div>\n          <Routes doLogout = {this.doLogin} />  \n        </div>\n     );\n    }\n  }\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}