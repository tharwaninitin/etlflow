{"version":3,"sources":["components/JobList.js","components/LoaderComponent.js","components/StepRuns.js","components/JobRuns.js","components/Metrics.js","components/QueueStats.js","components/Routes.js","components/Login.js","App.js","index.js"],"names":["JobList","props","state","jobs","notification","run_job_props","job_name","errors","is_error","a","token","localStorage","getItem","fetch","method","headers","body","JSON","stringify","query","response","status","removeItem","json","data","this","setState","prevState","loader","parse","run_job","set_job_error_deails","$","DataTable","job_properties","map","key","value","html","modal","notification_var","class","role","message","type","data-dismiss","aria-label","onClick","set_notification","aria-hidden","replace","id","is_active","className","aria-describedby","data-toggle","defaultChecked","e","updateJobActiveState","name","schedule","nextSchedule","schduleRemainingTime","show_modal","aria-labelledby","run_etl_job","then","set_job_deails","React","Component","LoaderComponent","StepRuns","stepruns","job_run_id","timerID","setInterval","fetchEtlFlowJobs","fetchEtlFlowJobById","clearInterval","data_jobruns","step_run_id_flag","item","step_run_id","linked_jobs","remoteStep","set_job_run_state","step_type","step_name","start_time","elapsed_time","show_step_run_state_modal","properties","tabindex","includes","JobRuns","filterOperation","jobruns","filter","filter_start_date","filter_end_date","paginationValue","stepRun","baseState","bind","limit","offset","document","getElementById","button","filter_button_name","aria-haspopup","aria-expanded","list","placeholder","onChange","set_job_name","set_filter_start_date","set_filter_end_date","window","location","reload","job_type","show_job_run_state_modal","Metrics","metrics","fetchEtlFlowMetrics","active_jobs","active_subscribers","etl_jobs","cron_jobs","used_memory","free_memory","total_memory","max_memory","build_time","QueueStats","queueStats","fetchEtlFlowQueueStats","queue","submitted_from","details","withRouter","Routes","user","remove_token","decoded","jwt_decode","console","log","fetchEtlFlowUserDetails","doLogout","to","href","exact","path","component","Login","user_name","password","login","login_validation","set_login_user_name","set_login_password","fetchLoginDetails","token_value","setItem","doLogin","alert","align","onSubmit","preventDefault","App","args_token","args_user","login_url","url","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3ecfbec6.chunk.js","sourcesContent":["import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n\nimport '../css/App.css'\n\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport $ from 'jquery';\n\nclass JobList extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { \n      jobs: [],\n      notification: false,\n      run_job_props: '',\n      job_name: '',\n      errors: [],\n      is_error: false\n      }\n  }\n\n  async updateJobActiveState(job_name,state) {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n            mutation {\n              update_job_state (name:\\\"${job_name}\\\" ,state: ${state}){\n             }\n           }\n          `\n        }\n      )  \n    })\n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n    const {data} = await response.json();\n    return data;    \n  }\n\n  async run_etl_job(job_name,state) {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n    this.setState(prevState => ({\n      loader: true\n    }))\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n            mutation {\n              run_job (name:\\\"${job_name}\\\" ,props: { key: \\\"\\\", value: \\\"\\\" }){\n                name\n                props {key value}\n             }\n           }\n          `\n        }\n      )  \n    })\n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n    this.setState(prevState => ({\n      loader: true\n    }))\n    const {data,errors} = await response.json();\n    if(JSON.parse(JSON.stringify(data.run_job)) !== null){\n      this.set_job_error_deails(false)\n    }\n    else {\n      this.set_job_error_deails(true,JSON.parse(JSON.stringify(errors)))\n    }\n    return data;    \n  }\n\n\n  componentDidMount() {\n    $('#joblist').DataTable({\n      \"order\": [[ 1, \"asc\" ]]\n  });\n  }\n\n show_modal(data)\n  {\n    var job_properties = \"\" \n    { \n      data.map(  props =>\n        job_properties  += \"<b>\"+ props.key + \"</b>\" +\"=\" + props.value + \"<br></br>\"\n    )}\n\n   {$(\"#jobListeModal .modal-body\").html(job_properties)}\n   $(\"#jobListeModal\").modal();\n  }\n\n  set_notification(state){\n    this.setState(prevState => ({\n      notification: state\n    }))\n  }\n\n  set_job_deails(job_name,props){\n    this.setState(prevState => ({\n      job_name: job_name,\n      run_job_props: props                    \n      }))\n  }\n\n  set_job_error_deails(is_error,errors){\n    this.setState(prevState => ({\n      is_error: is_error,\n      errors: errors                    \n      }))\n  }\n\n  render(){\n    var props = ''\n    var notification_var = \"\"\n    if(this.state.notification){\n      if(this.state.is_error) {\n         notification_var =\n         <div class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">\n            <h4 class=\"alert-heading\">Error while submitting job!</h4>\n            <p>{JSON.parse(JSON.stringify(this.state.errors)).map( (data) => data.message)}</p>\n            <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" onClick = {() => {this.set_notification(false)}}>\n               <span aria-hidden=\"true\">&times;</span>\n            </button>\n         </div>\n       } else {\n          notification_var =\n          <div class=\"alert alert-success alert-dismissible fade show\" role=\"alert\">\n             <h4 class=\"alert-heading\">Job {this.state.job_name.replace(/^\"(.*)\"$/, '$1')} submitted successfully!  </h4>\n             <p>{this.state.run_job_props}</p>\n             <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" onClick = {() => {this.set_notification(false)}}>\n                <span aria-hidden=\"true\">&times;</span>\n             </button>\n          </div>\n        }  \n    }\n  \n    return (\n          <div class=\"container-fluid\">\n          <div>{notification_var}</div>\n          <table id=\"joblist\" class=\"table table-sm table-bordered\">\n            <thead class=\"thead-dark\">\n                  <tr>\n                    <th>Active/Inactive</th>\n                    <th>Job Name</th>\n                    <th>Schedule</th>\n                    <th>Next Schedule</th>\n                    <th>Schedule Remaining Time</th>\n                    <th>Action</th>\n                  </tr>\n                </thead>\n                  <tbody>\n                  {this.props.jobs.map( (data) => (\n                    <tr>\n                      <td>{(() => {\n                           if (data.is_active ) {\n                             return (\n                               <div className = \"checkbox\">\n                                 <input type=\"checkbox\"\n                                     aria-describedby=\"UsernameHelp\"\n                                     data-toggle = \"toggle\"\n                                     defaultChecked\n                                     onClick={e => this.updateJobActiveState(data.name,false)}>\n                                 </input>\n                               </div>\n                             )\n                           } else {\n                            return (\n                              <div className = \"checkbox\">\n                                <input type=\"checkbox\"\n                                     aria-describedby=\"UsernameHelp\"\n                                     data-toggle = \"toggle\"\n                                     onClick={e => this.updateJobActiveState(data.name,true)}>\n                                 </input>\n                              </div>\n                            )\n                           }\n                         })()}\n                      </td>\n                      <td>{data.name}</td>\n                      <td>{data.schedule}</td>\n                      <td>{data.nextSchedule}</td>\n                      <td>{data.schduleRemainingTime}</td>\n                      <td>\n                          <button type=\"button\" class=\"btn btn-secondary ml-2\" data-toggle=\"modal\" onClick = {() => this.show_modal(data.props)}>\n                            Properties\n                          </button>\n                          <div class=\"modal fade\" id=\"jobListeModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                            <div class=\"modal-dialog\" role=\"document\">\n                              <div class=\"modal-content\">     \n                                <div class=\"modal-header\">\n                                  <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                  <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                    <span aria-hidden=\"true\">&times;</span>\n                                  </button>\n                                </div>\n                                <div class=\"modal-body\">\n                                </div>\n                                <div class=\"modal-footer\">\n                                  <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n\n                          <input type=\"button\" value=\"Run\" class=\"btn btn-warning ml-2\" onClick = {() => {\n                                 this.run_etl_job(data.name).then(({run_job}) => {\n                                  this.set_notification(true)\n                                  var data =  JSON.parse(JSON.stringify(run_job))\n                                  if(data !== null){\n                                      props = JSON.stringify(data[\"props\"]) \n                                      var job_name = JSON.stringify(data[\"name\"]) \n                                      this.set_job_deails(job_name,props)\n                                  // } else {\n                                  //     this.setState(prevState => ({\n                                  //       is_error: true\n                                  //     }))\n                                  // }\n                                 }});     \n                         }}  />\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n            </table>\n      </div>     \n    );\n  }\n}\nexport default JobList;","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n\nimport '../css/App.css'\n\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\n\nclass LoaderComponent extends React.Component {\n  constructor(props){\n    super(props); \n  }\n\n  render(){\n    return (\n        <div class=\"d-flex justify-content-center\">\n           <div class=\"spinner-border m-5\" role=\"status\">\n             <span class=\"sr-only\">Loading...</span>\n           </div>\n        </div>\n    );\n  }\n}\nexport default LoaderComponent;\n","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport $ from 'jquery';\nimport LoaderComponent from './LoaderComponent';\n\nclass StepRuns extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { \n      stepruns: [],\n      loader:false\n\n    }\n    \n  }\n\n  async fetchEtlFlowJobById(job_run_id) {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    this.setState(prevState => ({\n      loader: true\n    }))\n\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          query {\n            stepruns(job_run_id:    \\\"${job_run_id}\\\"){\n                job_run_id\n                step_name\n                properties\n                state\n                start_time\n                elapsed_time\n                step_type\n                step_run_id\n             }\n           }\n          `\n        }\n      )  \n    })\n\n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n\n    const {data} = await response.json();\n    this.setState(prevState => ({\n      loader: false\n    }))\n\n    return data;    \n  }\n\n  setInterval() {\n    this.timerID = setInterval(\n      () => this.fetchEtlFlowJobs(),\n      1000 * 1000\n    );\n  }\n \n  componentDidMount() {\n    this.fetchEtlFlowJobById(this.props.job_run_id).then(({stepruns}) => {\n      this.setState(prevState => ({\n        stepruns: stepruns\n      }))\n    })\n    // set Interval\n    this.setInterval();\n }\n\n componentWillUnmount() {\n  clearInterval(this.timerID);\n }\n \n show_modal(data)\n {\n   var props = ''\n   var data_jobruns = JSON.parse(data)\n\n   for(var key in data_jobruns) {\n   { \n       props  += \"<b>\"+ key + \"</b>\" +\"=\" + data_jobruns[key]+ \"<br></br>\"\n   }\n  {$(\"#stepRunModal .modal-body\").html(props)}\n  $(\"#stepRunModal\").modal();\n }\n}\n\nshow_step_run_state_modal(data)\n {\n  {$(\"#stepRunStateModal .modal-body\").html(data)}\n  $(\"#stepRunStateModal\").modal();\n }\n\n\n\n render(){\n   var step_run_id_flag = false\n   this.state.stepruns.map( item => {if(item.step_run_id !== \"\") step_run_id_flag = true})\n   var linked_jobs = ''\n   if(step_run_id_flag) {\n    linked_jobs = <th>Linked Job</th>\n   } else {\n    linked_jobs = \"\"\n   }\n\n   var remoteStep = [\"EtlFlowJobStep\",\"DPSparkJobStep\",\"ParallelETLStep\"];\n   if (this.state.loader){\n    return (\n      <div>\n        <LoaderComponent job_run_id={this.job_run_id}  set_job_run_state = {this.set_job_run_state} />\n      </div>\n    );\n   }\n   else{\n   return (\n     <div className=\"container-fluid\">\n         <table id=\"job runs\" class=\"table table-sm table-bordered\">\n           <thead class=\"thead-dark\">\n                 <tr>\n                   <th>Job Run Id</th>\n                   <th>Step Type</th>\n                   <th>Step Name</th>\n                   <th>Start Time</th>\n                   <th>Elapsed Time</th>\n                   <th>Status</th>\n                   <th>Properties</th> \n                   {linked_jobs}\n                   <th>\n                        <button className=\"btn btn-secondary btn-block\" onClick = {() => this.props.set_job_run_state()}>Back</button>\n                   </th>\n                 </tr>\n               </thead>\n                 <tbody>\n                 {this.state.stepruns.map( data => (\n                   <tr>\n                     <td>{data.job_run_id}</td>\n                     <td>{data.step_type}</td>\n                     <td>{data.step_name}</td>\n                     <td>{data.start_time}</td>\n                     <td>{data.elapsed_time}</td>\n                     <td>\n                     {(() => {\n                           if (data.state === \"pass\" || data.state == \"\" ) {\n                             return (\n                               <div>\n                                 <p className = \"text-success\">{data.state}</p>\n                               </div>\n                             )\n                           } else if (data.state === \"started\" || data.state == \"running\" ) {\n                             return (\n                               <div>\n                                 <p className = \"text-warning\">{data.state}</p>\n                               </div>\n                             )\n                           } else {\n                            return (\n                              <div>\n                                 <button type=\"button\" class=\"btn btn-danger btn btn-sm\" data-toggle=\"modal\" onClick = {() => this.show_step_run_state_modal(data.state)}>\n                                     Error\n                                 </button>\n                            \n                                 <div class=\"modal fade\" id=\"stepRunStateModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                                   <div class=\"modal-dialog\" role=\"document\">\n                                     <div class=\"modal-content\">\n                                       <div class=\"modal-header\">\n                                         <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                         <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                           <span aria-hidden=\"true\">&times;</span>\n                                         </button>\n                                       </div>\n                                       <div class=\"modal-body\">\n                                       </div>\n                                       <div class=\"modal-footer\">\n                                         <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                       </div>\n                                     </div>\n                                   </div>\n                                 </div>\n                              </div>\n                            )\n                           }\n                         })()}\n                     </td>\n                     <td>\n                          <button type=\"button\" class=\"btn btn-secondary btn-sm\" data-toggle=\"modal\" onClick = {() => this.show_modal(data.properties)}>\n                            Properties\n                          </button>\n                          \n                          <div class=\"modal fade\" id=\"stepRunModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                            <div class=\"modal-dialog\" role=\"document\">\n                              <div class=\"modal-content\">\n                                <div class=\"modal-header\">\n                                  <h5 class=\"modal-title\" id=\"exampleModalLabel\">Step Properties</h5>\n                                  <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                    <span aria-hidden=\"true\">&times;</span>\n                                  </button>\n                                </div>\n                                <div class=\"modal-body\">\n                                </div>\n                                <div class=\"modal-footer\">\n                                  <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                      </td>\n                     <td>\n                         {(() => {\n                            if (remoteStep.includes(data.step_type)) {\n                              return (\n                                <input type=\"button\" value=\"Check Progress\" class=\"btn btn-secondary btn-sm\" onClick = {() => this.fetchEtlFlowJobById(data.step_run_id).then(({stepruns}) => {\n                                    this.setState(prevState => ({\n                                      stepruns: stepruns\n                                    }))\n                                  })}/>\n                              )\n                            } else {\n                              return (\n                                <div></div>\n                              )\n                            }\n                          })()}\n                    </td>\n                   </tr>\n                 ))}\n                 </tbody>\n            </table>\n          </div>\n    );\n    }\n  }\n}\nexport default StepRuns;     ","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery/dist/jquery.min.js';\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport StepRuns from './StepRuns';\nimport $ from 'jquery';\nimport LoaderComponent from './LoaderComponent';\n\nclass JobRuns extends React.Component {\n  constructor(props){\n    super(props); \n    this.job_run_id = ''\n    this.filterOperation = [\"IN\",\"NOT IN\"]\n    this.state  = { \n      jobruns: [],\n      filter: '',\n      job_name: '',\n      filter_start_date: '',\n      filter_end_date: '',\n      paginationValue: 0,\n      stepRun: false,\n      loader:false\n    }\n    this.baseState = this.state \n    this.set_job_run_state = this.set_job_run_state.bind(this);    \n  }\n\n  async fetchEtlFlowJobs() {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    const limit = 10;\n    const offset = this.state.paginationValue;\n\n    \n    var query = ` query { jobruns(limit: ${limit} , offset: ${offset}){ job_run_id job_name properties state start_time elapsed_time job_type is_master}}`\n    \n    if (this.state.filter_end_date !== \"\" && this.state.filter !== \"\" ) {\n      query = ` query { jobruns(limit: ${limit} , offset: ${offset},  startTime: \\\"${this.state.filter_start_date}\\\", endTime: \\\"${this.state.filter_end_date}\\\",filter: \\\"${this.state.filter}\\\", jobName: \\\"${this.state.job_name}\\\"  )\n      { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n    } else if (this.state.filter_end_date !== \"\" ){\n      query = ` query { jobruns(limit: ${limit} , offset: ${offset},  startTime: \\\"${this.state.filter_start_date}\\\", endTime: \\\"${this.state.filter_end_date}\\\")\n      { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n    } else if (this.state.filter !== \"\") {\n      query = ` query { jobruns(limit: ${limit} , offset: ${offset}, filter: \\\"${this.state.filter}\\\", jobName: \\\"${this.state.job_name}\\\"  )\n      { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n    } else if (this.state.filter === \"\" && this.state.job_name !== \"\") {\n      query = ` query { jobruns(limit: ${limit} , offset: ${offset} ,filter: \"IN\", jobName: \\\"${this.state.job_name}\\\"  )\n      { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n    } else {\n      query = ` query { jobruns(limit: ${limit} , offset: ${offset}){ job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n    }\n    \n\n    this.setState(prevState => ({\n      loader: true\n    }))\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: query\n        }\n      )  \n    })\n\n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n\n    const {data} = await response.json();\n    this.setState(prevState => ({\n      loader: false\n    }))\n\n    return data;   \n  }\n\n  setInterval() {\n    this.timerID = setInterval(\n      () => this.fetchEtlFlowJobs(),\n      1000 * 1000\n    );\n  }\n \n  componentDidMount() {\n    this.fetchEtlFlowJobs().then(({jobruns}) => {\n      this.setState(prevState => ({\n        jobruns: jobruns\n      }))\n    })\n    // set Interval\n    this.setInterval();\n }\n\n componentWillUnmount() {\n  clearInterval(this.timerID);\n }\n\n set_job_run_state() {\n  this.setState(state => ({\n    stepRun: !state.stepRun\n  }))\n }\n \n\n set_job_name() {\n  this.setState(prevState => ({\n    job_name: document.getElementById(\"exampleDataList\").value\n  }))\n }\n\n set_filter_start_date() {\n  this.setState(prevState => ({\n    filter_start_date: document.getElementById(\"start_date\").value\n  }))\n }\n\n set_filter_end_date() {\n  this.setState(prevState => ({\n    filter_end_date: document.getElementById(\"end_date\").value\n  }))\n }\n\n\n show_modal(data)\n {\n   var props = ''\n   var data_jobruns = JSON.parse(data)\n\n   for(var key in data_jobruns) {\n   { \n       props  += \"<b>\"+ key + \"</b>\" +\"=\" + data_jobruns[key]+ \"<br></br>\"\n   }\n  {$(\"#jobRunModal .modal-body\").html(props)}\n  $(\"#jobRunModal\").modal();\n }\n}\n\nshow_job_run_state_modal(data)\n {\n  {$(\"#jobRunStateModal .modal-body\").html(data)}\n  $(\"#jobRunStateModal\").modal();\n }\n\n render(){\n   \n   var button = ''\n   var filter_button_name = '' \n\n   //Code for adding pagination element\n   if (this.state.paginationValue === 0) {\n     button = <li class=\"page-item disabled\">\n     <input type=\"button\" value=\"Previous\" class=\"page-link btn btn-secondary btn-sm\"/></li>\n   } else {\n     button =  <li class=\"page-item\">\n     <input type=\"button\" value=\"Previous\" class=\"page-link btn btn-secondary btn-sm\" onClick = {() => {\n              this.setState(prevState => ({\n               paginationValue: this.state.paginationValue  -   10\n             }))\n             this.fetchEtlFlowJobs(this.state.paginationValue - 10).then(({jobruns}) => {\n               this.setState(prevState => ({\n                 jobruns: jobruns\n               }))\n             }) \n     }}/></li>\n   } \n\n   //Code for adding button name\n   if (this.state.filter !== '') {\n     filter_button_name = this.state.filter\n   }else {\n     filter_button_name = \"Add Filter\"\n   } \n\n  if(this.state.stepRun) {\n     return (\n       <div>\n         <StepRuns job_run_id={this.job_run_id}  set_job_run_state = {this.set_job_run_state} />\n       </div  >\n     );\n   }else if (this.state.loader){\n    return (\n      <div>\n        <LoaderComponent job_run_id={this.job_run_id}  set_job_run_state = {this.set_job_run_state} />\n      </div>\n    );\n   }\n   else{\n   return (\n     <div className=\"container-fluid\">\n       <h3>{this.state.loader}</h3>\n       <ul class = \"pagination justify-content-center\">\n         <div class=\"dropdown\">\n            <button class=\"btn btn-light dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n               {filter_button_name}\n            </button>\n            <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n              { this.filterOperation.map ( filter => (\n                   <a class=\"dropdown-item\">\n                      <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                           this.setState(prevState => ({\n                               filter: filter\n                       }))}}> {filter} </button>\n                   </a>\n              ))}\n            </div>\n         </div>\n         <div className =\"form-inline float-right\">\n             <div className=\"mb-1\">\n             <input type=\"text\"\n                        className=\"form-control input-sm\"\n                        list = \"datalistOptions\"\n                        id = \"exampleDataList\"\n                        placeholder = \"Type to search\"\n                        onChange={e => this.set_job_name()}></input>      \n             </div>\n             <datalist id = \"datalistOptions\">\n               {this.props.jobs.map( data => (\n                 <option value = {data.name}></option>\n               ))}\n             </datalist> \n         </div>\n         <div class = \"form-inline float-right\">\n              <div class = \"mb-1\"> \n                  <input type=\"date\"\n                         className=\"form-control input-sm\"\n                         placeholder=\"startdate(YYYY-MM-DD)\" \n                         id = \"start_date\"\n                         onChange={e => this.set_filter_start_date()}\n                   ></input>\n              </div>\n              <div class = \"mb-1\"> \n                  <input type=\"date\"\n                         className=\"form-control input-sm\"\n                         placeholder=\"enddate(YYYY-MM-DD)\"\n                         id = \"end_date\"\n                         onChange={e => this.set_filter_end_date()}\n                   ></input> \n              </div>    \n         </div> \n         <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                window.location.reload(true)\n             }} >\n            Clear\n         </button>\n         <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                this.fetchEtlFlowJobs().then(({jobruns}) => {\n                     this.setState(prevState => ({\n                       jobruns: jobruns\n                     }))\n                   })\n             }} >\n            Refresh\n         </button>\n       </ul>\n       <table id=\"jobruns\" class=\"table table-sm table-bordered\">\n           <thead class=\"thead-dark\">\n                 <tr>\n                   <th>Job Name</th>\n                   <th>Job Type</th>\n                   <th>Job Start Time</th>\n                   <th>Elapsed Time</th>\n                   <th>Job Status</th>\n                   <th>Job Properties</th>\n                   <th>Step Properties</th>\n                 </tr>\n               </thead>\n                 <tbody>\n                 {this.state  .jobruns.map( data => (\n                   <tr>\n                     <td>{data.job_name}</td>\n                     <td>{data.job_type}</td>\n                     <td>{data.start_time}</td>\n                     <td>{data.elapsed_time}</td>\n                     <td>\n                     {(() => {\n                           if (data.state === \"pass\" || data.state == \"\" ) {\n                             return (\n                               <div>\n                                 <p className = \"text-success\">{data.state}</p>\n                               </div>\n                             )\n                           } else if (data.state === \"started\" || data.state == \"running\" ) {\n                             return (\n                               <div>\n                                 <p className = \"text-warning\">{data.state}</p>\n                               </div>\n                             )\n                           } else {\n                            return (\n                              <div>\n                                 <button type=\"button\" class=\"btn btn-danger btn btn-sm\" data-toggle=\"modal\" onClick = {() => this.show_job_run_state_modal(data.state)}>\n                                     Error\n                                 </button>\n                            \n                                 <div class=\"modal fade\" id=\"jobRunStateModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                                   <div class=\"modal-dialog\" role=\"document\">\n                                     <div class=\"modal-content\">\n                                       <div class=\"modal-header\">\n                                         <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                         <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                           <span aria-hidden=\"true\">&times;</span>\n                                         </button>\n                                       </div>\n                                       <div class=\"modal-body\">\n                                       </div>\n                                       <div class=\"modal-footer\">\n                                         <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                       </div>\n                                     </div>\n                                   </div>\n                                 </div>\n                              </div>\n                            )\n                           }\n                         })()}\n                     </td>\n                     <td>\n                         <button type=\"button\" class=\"btn btn-secondary btn-sm\" data-toggle=\"modal\" onClick = {() => this.show_modal(data.properties)}>\n                           Properties\n                         </button>\n                         \n                         <div class=\"modal fade\" id=\"jobRunModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                           <div class=\"modal-dialog\" role=\"document\">\n                             <div class=\"modal-content\">\n                               <div class=\"modal-header\">\n                                 <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                 <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                   <span aria-hidden=\"true\">&times;</span>\n                                 </button>\n                               </div>\n                               <div class=\"modal-body\">\n                               </div>\n                               <div class=\"modal-footer\">\n                                 <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                               </div>\n                             </div>\n                           </div>\n                         </div>\n                     </td>\n                     <td><input type=\"button\" value=\"Step Properties\" class=\"btn btn-secondary btn-sm\" onClick = {() => {\n                       this.set_job_run_state()\n                       this.job_run_id =  data.job_run_id\n                     }}/></td>\n                   </tr>\n                 ))}\n                 </tbody>\n            </table>  \n            <nav aria-label=\"Page navigation example\">\n               <ul class=\"pagination justify-content-center\">\n                 {button}\n                 <li class=\"page-item\"><input type=\"button\" value=\"Next\" class=\"page-link btn btn-secondary btn-sm\" onClick = {() => {\n                   this.setState(prevState => ({\n                     paginationValue: this.state.paginationValue  + 10\n                   }))\n                   this.fetchEtlFlowJobs(this.state.paginationValue + 10).then(({jobruns}) => {\n                     this.setState(prevState => ({  \n                       jobruns: jobruns\n                     }))\n                   })\n                   }}/></li>\n               </ul>\n         </nav>\n          </div>\n   );\n  }\n }\n}\nexport default JobRuns;     ","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n\n\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport $ from 'jquery';\nimport LoaderComponent from './LoaderComponent';\n\nclass Metrics extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { metrics: [],\n      loader:false\n    }\n  }\n\n  async fetchEtlFlowMetrics() {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    this.setState(prevState => ({\n      loader: true\n    }))\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          query {\n            metrics {\n                active_jobs\n                active_subscribers\n                etl_jobs\n                cron_jobs\n                used_memory\n                free_memory\n                total_memory\n                max_memory\n                build_time\n              }\n           }\n          `\n        }\n      )  \n    })\n\n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n    \n    const {data} = await response.json();\n    this.setState(prevState => ({\n      loader: false\n    }))\n\n    return data;    \n  }\n\n  componentDidMount() {\n    //calling getInfo api\n    this.fetchEtlFlowMetrics().then(({metrics}) => {\n        this.setState(prevState => ({\n            metrics: metrics\n        }))\n      })\n   }\n\n\n  render(){\n    if (this.state.loader){\n      return (\n        <div>\n          <LoaderComponent job_run_id={this.job_run_id}  set_job_run_state = {this.set_job_run_state} />\n        </div>\n      );\n     }\n    else{\n    return (\n      <div class=\"container\">\n          <ul class = \"pagination justify-content-center\">\n             <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                   this.fetchEtlFlowMetrics().then(({metrics}) => {\n                    this.setState(prevState => ({\n                        metrics: metrics\n                    }))\n                  })\n                }} >\n               Refresh\n             </button>\n         </ul>\n         <ul class=\"list-group \">\n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Active Jobs</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.active_jobs}</span>\n            </li>\n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Active Subscribers</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.active_subscribers}</span>\n            </li>\n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Etl Jobs</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.etl_jobs}</span>\n            </li>\n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Cron Jobs</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.cron_jobs}</span>\n            </li>  \n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Used Memory</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.used_memory}</span>\n            </li> \n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Free Memory</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.free_memory}</span>\n            </li>  \n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Total Memory</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.total_memory}</span>\n            </li>\n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Max Memory</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.max_memory}</span>\n            </li> \n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Build Time</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.build_time}</span>\n            </li>   \n         </ul>\n      </div>     \n    );    \n   }      \n  }\n}\nexport default Metrics;\n","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n  \nimport { withRouter } from 'react-router'\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport $ from 'jquery';\nimport LoaderComponent from './LoaderComponent';\n\nclass QueueStats extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { queueStats: [],\n      loader:false\n    }\n  }\n\n  async fetchEtlFlowQueueStats() {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    this.setState(prevState => ({\n      loader: true\n    }))\n\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          query {\n            queueStats {\n              name \n              details\n              submitted_from\n              }\n           }\n          `\n        }\n      )  \n    })\n\n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n    \n    const {data} = await response.json();\n    this.setState(prevState => ({\n      loader: false\n    }))\n\n    return data;    \n  }\n\n  componentDidMount() {\n    //calling getInfo api\n    this.fetchEtlFlowQueueStats().then(({queueStats}) => {\n        this.setState(prevState => ({\n          queueStats: queueStats\n        }))\n      })\n   }\n\n   show_modal(data)\n  {\n    var props = ''\n    var queue = JSON.parse(data)\n \n    for(var key in queue) {\n    { \n        props  += \"<b>\"+ key + \"</b>\" +\"=\" + queue[key]+ \"<br></br>\"\n    }\n\n   {$(\"#queueStats .modal-body\").html(props)}\n   $(\"#queueStats\").modal();\n  }\n}\n\n\n  render(){\n    if (this.state.loader){\n      return (\n        <div>\n          <LoaderComponent job_run_id={this.job_run_id}  set_job_run_state = {this.set_job_run_state} />\n        </div>\n      );\n     }\n    else{ \n    return (\n      <div class=\"container\">\n        <ul class = \"pagination justify-content-center\">\n             <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                    this.fetchEtlFlowQueueStats().then(({queueStats}) => {\n                      this.setState(prevState => ({\n                        queueStats: queueStats\n                      }))\n                  })\n                }} >\n               Refresh\n             </button>\n         </ul>\n          <table id=\"joblist\" class=\"table table-sm table-bordered\">\n            <thead class=\"thead-dark\">\n                  <tr>\n                    <th>Job Name</th>\n                    <th>Submitted From</th>\n                    <th>Details</th>\n                  </tr>\n                </thead>\n                  <tbody>\n                  {this.state.queueStats.map( (data) => (\n                    <tr>\n                      <td>{data.name  }</td>\n                      <td>{data.submitted_from}</td>\n                      <td>\n                          <button type=\"button\" class=\"btn btn-secondary btn-sm\" data-toggle=\"modal\" onClick = {() => this.show_modal(data.details)}>\n                            Stats\n                          </button>\n                          \n                          <div class=\"modal fade\" id=\"queueStats\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                            <div class=\"modal-dialog\" role=\"document\">\n                              <div class=\"modal-content\">\n                                <div class=\"modal-header\">\n                                  <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                  <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                    <span aria-hidden=\"true\">&times;</span>\n                                  </button>\n                                </div>\n                                <div class=\"modal-body\">\n                                </div>\n                                <div class=\"modal-footer\">\n                                  <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n            </table>\n      </div>     \n    ); \n    }         \n  }\n}\nexport default withRouter(QueueStats)\n// export default QueueStats;\n","import React from 'react';\nimport JobList from './JobList';\nimport JobRuns from './JobRuns';\nimport Metrics from './Metrics';\nimport QueueStats from './QueueStats';\n\nimport jwt_decode from \"jwt-decode\";\nimport LoaderComponent from './LoaderComponent';\n\nimport '../css/App.css'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nclass Routes extends React.Component {\n\n  constructor(props){\n    super(props); \n    this.state  = {\n      jobs: [],\n      metrics: [],\n      user: '',\n      loader:false\n\n    }\n  }\n\n  async fetchEtlFlowJobs() {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    this.setState(prevState => ({\n      loader: true\n    }))\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          query {\n              jobs {\n                name \n                schedule\n                props {key value} \n                nextSchedule \n                schduleRemainingTime \n                is_active \n                max_active_runs\n             }\n           }\n          `\n        }\n      )  \n    })\n\n    if (response.status === 403) {\n      this.remove_token()\n    } \n\n    const {data} = await response.json();\n    this.setState(prevState => ({\n      loader: false\n    }))\n\n    return data;    \n  }\n\n  setInterval() {\n    this.timerID = setInterval(\n      () => this.fetchEtlFlowJobs(),\n      1000 * 1000\n    );\n  }\n\n  fetchEtlFlowUserDetails() {\n    const token = localStorage.getItem('Authorization')\n    var decoded = JSON.parse(JSON.stringify(jwt_decode(token)));\n    this.setState({\n      user: decoded[\"user\"]\n    })\n  }\n\n  componentDidMount() {\n\n    //calling jobs api\n    this.fetchEtlFlowJobs().then(({jobs}) => {\n      console.log(jobs)\n      this.setState(prevState => ({\n        jobs: jobs\n      }))\n    })\n\n    this.fetchEtlFlowUserDetails()\n }\n\n remove_token() {\n  localStorage.removeItem(\"Authorization\")\n  this.props.doLogout(\"\")\n}\n\n  render(){\n    if (this.state.loader){\n      return (\n        <div>\n          <LoaderComponent job_run_id={this.job_run_id}  set_job_run_state = {this.set_job_run_state} />\n        </div>\n      );\n     }\n    else{\n    return (\n      <Router>\n        <nav className = \"navbar navbar-expand-lg navbar-dark bg-dark mb-3\">\n            <ul className = \"nav navbar-nav w-100\">\n                <li className = \"nav-item nav-link\" ><Link to=\"/\">Etlflow</Link> </li>\n                <li className = \"nav-item nav-link\" ><Link to=\"/JobRuns\">JobRuns</Link> </li>\n                <li className = \"nav-item nav-link\" ><Link to=\"/getInfo\">Metrics</Link> </li>\n                <li className = \"nav-item nav-link\" ><Link to=\"/getQueueStats\">Job Stats</Link> </li>\n\n            </ul>\n            <div class=\"navbar-collapse collapse w-100 order-3 dual-collapse2\">\n              <ul class=\"nav justify-content-end w-100\">\n                <li class=\"nav-item dropdown\">\n\t                <a class=\"nav-link  dropdown-toggle\" href=\"#\" data-toggle=\"dropdown\">{this.state.user}</a>\n\t                  <ul class=\"dropdown-menu\">\n\t\t                  <li>\n                        <a class=\"dropdown-item\" href=\"https://github.com/tharwaninitin/etlflow\">\n                           Git Hub \n                        </a>\n                      </li>\n                      <li>\n                        <a class=\"dropdown-item\" href=\"https://tharwaninitin.github.io/etlflow/site/\">\n                          Docs\n                        </a>\n                      </li>\n                      <li>\n                        <a class=\"dropdown-item\">\n                          <input type=\"button\" class=\"btn btn-secondary btn-sm\" value=\"LogOut\" onClick = {() => this.remove_token()}></input>\n                        </a>\n                      </li>\n\t                  </ul>\n\t              </li>\n              </ul>\n            </div>\n        </nav>\n        <Switch>\n          <Route exact path=\"/\" component={() => (<JobList jobs={this.state.jobs} />)}/>\n          <Route path=\"/JobRuns\" component={() => (<JobRuns jobs={this.state.jobs}/>)}/>\n          <Route path=\"/getInfo\" component={() => (<Metrics/>)}/>\n          <Route path=\"/getQueueStats\" component={() => (<QueueStats/>)}/>\n\n        </Switch>\n      </Router>\n    );\n    }\n  }\n}\nexport default Routes;\n\n","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery/dist/jquery.min.js';\nimport jwt_decode from \"jwt-decode\";\n\n\nclass Login extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = {\n         user_name: '',\n         password: '',\n         token: '', \n         login: [],\n\n        }\n\n    this.login_validation = this.login_validation.bind(this);\n    this.set_login_user_name = this.set_login_user_name.bind(this);\n    this.set_login_password = this.set_login_password.bind(this);\n  }\n\n  async fetchLoginDetails(user_name,password) {\n    const GRAPHQL_URL = '/api/login'\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          mutation {\n            login (user_name: \\\"${user_name}\\\", password: \\\"${password}\\\") {\n                message \n                token\n             }\n           }\n          `\n         }\n      )  \n    })  \n    const {data} = await response.json();\n    return data;        \n  }\n\n login_validation() {\n    this.fetchLoginDetails(this.state.user_name,this.state.password).then(({login}) => {\n        var token_value = JSON.parse(JSON.stringify(login)).token\n        if(token_value !== \"\")\n        {\n            localStorage.setItem('Authorization', token_value);   \n            this.props.doLogin(token_value)\n            this.setState(prevState => ({\n                token: token_value\n              }))\n        }\n        else \n        {\n            alert(\"Invalid User\")\n        }\n    })   \n  } \n\n  set_login_user_name() {\n    this.setState(prevState => ({\n        user_name: document.getElementById(\"user_name\").value\n      }))\n  }\n\n  set_login_password() {\n    this.setState(prevState => ({\n        password: document.getElementById(\"password\").value\n      }))\n  }\n\n  render(){\n    return (\n    <div className=\"main\" align=\"center\">\n         <nav className = \"navbar navbar-expand-lg navbar-dark bg-dark mb-3\">\n             <ul className = \"nav navbar-nav w-50\">\n                 <li className = \"nav-item nav-link\">EtlFlow</li>\n             </ul>\n         </nav>   \n           <div className=\"col-md-3\">\n            <div className=\"login-form \">\n                <form id=\"form_login\" className = \"text-center border border-dark p-5\" onSubmit={(e) => {this.login_validation(); e.preventDefault();}  }>\n                    <p className = \"h4 mb-4\">EtlFlow Login</p>\n                    <div className=\"form-group\">\n                        <input type=\"text\"\n                         className=\"form-control\" \n                         aria-describedby=\"UsernameHelp\"\n                         placeholder=\"Username\"\n                         id=\"user_name\"\n                         onChange={e => this.set_login_user_name()}></input>\n                    </div>\n                    <div className=\"form-group\">\n                        <input\n                         type=\"password\"\n                         className=\"form-control\"\n                         aria-describedby=\"PasswordHelp\"\n                         placeholder=\"Password\"\n                         id=\"password\"\n                         onChange={e => this.set_login_password()}></input>\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-secondary btn-block\">Submit</button>\n                </form>   \n            </div>\n        </div>\n    </div>\n    );\n  }\n}\nexport default Login;","import React from 'react';\n//Bootstrap and jQuery libraries\nimport Routes from './components/Routes';\nimport LoginComponent from './components/Login';\nimport StepRuns from './components/StepRuns';\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props);\n\n    this.state = {\n      token: '',\n    }\n\n    this.doLogin = this.doLogin.bind(this)\n    this.doLogout = this.doLogout.bind(this)\n\n  }\n\n  doLogin(args_token,args_user) {\n    this.setState({\n      token: args_token\n    })\n  }\n\n\n  doLogout(args_token) {\n    this.setState({\n      token: ''\n    })\n  }\n\n\n  render(){\n    if(localStorage.getItem(\"Authorization\") === null){\n      return (  \n          <div>\n            <LoginComponent doLogin = {this.doLogin}/>  \n          </div>\n      );\n    } else {\n      return (  \n        <div>\n          <Routes doLogout = {this.doLogin}/>  \n        </div>\n     );\n    }\n  }\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nwindow.login_url = \"/api/login\"\nwindow.url = \"/api/etlflow\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}