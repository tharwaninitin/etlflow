{"version":3,"sources":["components/JobList.js","components/LoaderComponent.js","components/StepRuns.js","components/JobRuns.js","components/Metrics.js","components/QueueStats.js","components/CurrentTime.js","components/MemoryInfo.js","components/Routes.js","components/Login.js","App.js","index.js"],"names":["JobList","props","state","jobs","notification","run_job_props","job_name","errors","is_error","is_active","values","keys","a","token","localStorage","getItem","fetch","method","headers","body","JSON","stringify","query","response","status","removeItem","json","data","length","props_updated","replaceAll","this","setState","prevState","loader","parse","run_job","set_job_error_deails","$","DataTable","job_properties","map","key","value","html","modal","history","push","el","i","class","type","placeholder","onChange","set_run_job_keys","bind","set_run_job_values","onClick","remove_props","event","target","splice","final_props","run_etl_job","then","set_notification","set_job_deails","notification_var","role","message","data-dismiss","aria-label","aria-hidden","replace","get_etl_jobs","id","className","aria-describedby","data-toggle","defaultChecked","e","updateJobActiveState","name","update_job_state","handleOnClick","schedule","nextSchedule","schduleRemainingTime","show_modal","aria-labelledby","data-target","tabindex","create_ui","add_props","submit_run_job","React","Component","withRouter","LoaderComponent","StepRuns","stepruns","job_run_id","timerID","setInterval","fetchEtlFlowJobs","fetchEtlFlowJobById","clearInterval","data_jobruns","step_run_id_flag","item","step_run_id","linked_jobs","remoteStep","set_job_run_state","step_type","step_name","start_time","elapsed_time","show_step_run_state_modal","properties","includes","JobRuns","filterOperation","jobruns","filter","filter_start_date","filter_end_date","paginationValue","stepRun","limit","offset","undefined","match","params","set_jobruns","document","getElementById","button","filter_button_name","filter_button_job_name","filter_back_button","aria-haspopup","aria-expanded","list","set_job_name","set_filter_start_date","set_filter_end_date","set_initial_state","job_type","show_job_run_state_modal","Metrics","metrics","fetchEtlFlowMetrics","active_jobs","active_subscribers","etl_jobs","cron_jobs","used_memory","free_memory","total_memory","max_memory","build_time","QueueStats","queueStats","fetchEtlFlowQueueStats","queue","submitted_from","execution_time","details","CurrentTime","currentime","current_time","ws_url","URL","window","location","href","protocol","MemoryInfo","addMessage","messages","client","WebSocket","onopen","console","log","onmessage","evt","close","seriesVals","labelsVals","split","labels","series","options","Routes","user","remove_token","decoded","jwt_decode","fetchEtlFlowUserDetails","doLogout","to","exact","path","component","Login","user_name","password","login","login_validation","set_login_user_name","set_login_password","fetchLoginDetails","token_value","setItem","doLogin","alert","align","onSubmit","preventDefault","App","args_token","args_user","login_url","url","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6e94c3dd.chunk.js","sourcesContent":["import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n\nimport '../css/App.css'\nimport { withRouter } from 'react-router'\n\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport $ from 'jquery';\n\nclass JobList extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { \n      jobs: [],\n      notification: false,\n      run_job_props: '',\n      job_name: '',\n      errors: [],\n      is_error: false,\n      is_active: true,\n      values: [],keys: []\n    }\n  }\n\n  async updateJobActiveState(job_name,state) {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n            mutation {\n              update_job_state (name:\\\"${job_name}\\\" ,state: ${state}){\n             }\n           }\n          `\n        }\n      )  \n    })\n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n    const {data} = await response.json();\n    return data;    \n  }\n\n  async run_etl_job(job_name,props) {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    var query =  `\n      mutation {\n        run_job (name:\\\"${job_name}\\\" ,props: [{ key: \\\"\\\", value: \\\"\\\" }]){\n          name\n          props {key value}\n      }\n      }\n    ` \n    if(props.length > 0) {\n      var props_updated = JSON.stringify(props).replaceAll(\"\\\"$\",\"\").replaceAll(\"$\\\"\",\"\")\n      query =  `\n      mutation {\n        run_job (name:\\\"${job_name}\\\" ,props: ${props_updated}){\n          name\n          props {key value}\n      }\n      }\n    ` \n    }\n    this.setState(prevState => ({\n      loader: true\n    }))\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: query\n        }\n      )  \n    })\n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n    this.setState(prevState => ({\n      loader: true\n    }))\n    const {data,errors} = await response.json();\n    if(JSON.parse(JSON.stringify(data.run_job)) !== null){\n      this.set_job_error_deails(false)\n    }\n    else {\n      this.set_job_error_deails(true,JSON.parse(JSON.stringify(errors)))\n    }\n    return data;    \n  }\n\n\n componentDidMount() {\n    $('#joblist').DataTable({\n      \"order\": [[ 1, \"asc\" ]]\n  });\n  }\n\n show_modal(data)\n  {\n    var job_properties = \"\" \n    { \n      data.map(  props =>\n        job_properties  += \"<b>\"+ props.key + \"</b>\" +\"=\" + props.value + \"<br></br>\"\n    )}\n\n   {$(\"#jobListeModal .modal-body\").html(job_properties)}\n   $(\"#jobListeModal\").modal();\n  }\n\n  set_notification(state){\n    this.setState(prevState => ({\n      notification: state\n    }))\n  }\n\n  set_job_deails(job_name,props){\n    this.setState(prevState => ({\n      job_name: job_name,\n      run_job_props: props                    \n      }))\n  }\n\n  set_job_error_deails(is_error,errors){\n    this.setState(prevState => ({\n      is_error: is_error,\n      errors: errors                    \n      }))\n  }\n\n  handleOnClick(job_name){    \n    this.props.history.push('/JobRuns/' + job_name)\n  }\n\n  create_ui(){\n    return this.state.values.map((el, i) => \n        <div key={i}>\n        <div class=\"row\">\n          <div class=\"col-xs-4 col-sm-4 col-md-4\">\n            <div class=\"form-group\">\n               <input class=\"form-control\" value={this.state.keys[i]} type=\"text\" placeholder=\"Type Key\" onChange={this.set_run_job_keys.bind(this, i)} />\n            </div>\n          </div>  \n          <div class=\"col-xs-7 col-sm-7 col-md-7\">\n            <div class=\"form-group\">\n              <input class=\"form-control\" value={el||''} type=\"text\"  placeholder=\"Type Value\" onChange={this.set_run_job_values.bind(this, i)} />\n            </div>\n          </div> \n         <div class=\"col-xs-3\">\n             <input type='button' class=\"btn btn-danger\" value='-' onClick={this.remove_props.bind(this, i)}/>\n         </div>\n        </div> \n        </div>            \n    )\n }\n\n\n set_run_job_values(i, event) {\n    let values = [...this.state.values];\n    values[i] =  event.target.value;\n    this.setState({ values });\n }\n\n set_run_job_keys(i, event) {\n  let keys = [...this.state.keys];\n  keys[i] =  event.target.value;\n  this.setState({ keys });\n}\n \n add_props(){\n   this.setState(prevState => ({ values: [...prevState.values, '']}))\n }\n \n remove_props(i){\n\n    let values = [...this.state.values];\n    values.splice(i,1); \n    this.setState({ values });\n\n    let keys = [...this.state.keys];\n    keys.splice(i,1);\n    this.setState({ keys });\n }\n\n submit_run_job(job_name) {\n\n   var final_props = []\n   var i;\n   for (i = 0; i < this.state.keys.length; i++) {\n    var props = {[\"$key$\"] : this.state.keys[i],[\"$value$\"] : this.state.values[i]}\n    final_props[i] =  props\n   }\n\n  var props = ''\n\n  this.run_etl_job(this.state.job_name,final_props).then(({run_job}) => {\n    this.set_notification(true)\n    var data =  JSON.parse(JSON.stringify(run_job))\n    if(data !== null){\n        props = JSON.stringify(data[\"props\"]) \n        var job_name = JSON.stringify(data[\"name\"]) \n        this.set_job_deails(job_name,props)\n   }});     \n }\n\n\n  render(){\n    var props = ''\n    var notification_var = \"\"\n    if(this.state.notification){\n      if(this.state.is_error) {\n         notification_var =\n         <div class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">\n            <h4 class=\"alert-heading\">Error while submitting job!</h4>\n            <p>{JSON.parse(JSON.stringify(this.state.errors)).map( (data) => data.message)}</p>\n            <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" onClick = {() => {this.set_notification(false)}}>\n               <span aria-hidden=\"true\">&times;</span>\n            </button>\n         </div>\n       } else {\n          notification_var =\n          <div class=\"alert alert-success alert-dismissible fade show\" role=\"alert\">\n             <h4 class=\"alert-heading\">Job {this.state.job_name.replace(/^\"(.*)\"$/, '$1')} submitted successfully!  </h4>\n             <p>{this.state.run_job_props}</p>\n             <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" onClick = {() => {this.set_notification(false)}}>\n                <span aria-hidden=\"true\">&times;</span>\n             </button>\n          </div>\n        }  \n    }\n  \n    return (\n          <div class=\"container-fluid\">\n          <div>{notification_var}</div>\n          <ul class = \"pagination justify-content-center\">\n             <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                      this.props.get_etl_jobs() \n                }} >\n               Refresh\n             </button>\n         </ul>\n          <table id=\"joblist\" class=\"table table-sm table-bordered\">\n            <thead class=\"thead-dark\">\n                  <tr>\n                    <th>Active/Inactive</th>\n                    <th>Job Name</th>\n                    <th>Schedule</th>\n                    <th>Next Schedule</th>\n                    <th>Schedule Remaining Time</th>\n                    <th>Action</th>\n                  </tr>\n                </thead>\n                  <tbody>\n                  {this.props.jobs.map( (data) => (\n                    <tr>\n                      <td>{(() => {\n                           if (this.state.is_active && data.is_active) {\n                             return (\n                               <div className = \"checkbox\">\n                                 <input type=\"checkbox\"\n                                     aria-describedby=\"UsernameHelp\"\n                                     data-toggle = \"toggle\"\n                                     defaultChecked\n                                     onClick={e => this.updateJobActiveState(data.name,false).then(({update_job_state}) => {\n                                      this.props.get_etl_jobs()\n                                      this.setState(prevState => ({  \n                                        is_active: false\n                                      }))\n                                    })}>\n                                 </input>\n                               </div>\n                             )\n                           } else {\n                            return (\n                              <div className = \"checkbox\">\n                                <input type=\"checkbox\"\n                                     aria-describedby=\"UsernameHelp\"\n                                     data-toggle = \"toggle\"\n                                     onClick={e => this.updateJobActiveState(data.name,true).then(({update_job_state}) => {\n                                      this.props.get_etl_jobs()\n                                      this.setState(prevState => ({  \n                                        is_active: true\n                                      }))\n                                    })}>\n                                 </input>\n                              </div>\n                            )\n                           }\n                         })()}\n                      </td>\n                        <td> <button type=\"button\" class=\"btn btn-link\" data-dismiss=\"modal\" onClick = {() => this.handleOnClick(data.name)}>{data.name}</button></td>\n                      <td>{data.schedule}</td>\n                      <td>{data.nextSchedule}</td>\n                      <td>{data.schduleRemainingTime}</td>\n                      <td >\n                      <div class='row'>\n                      <div class='col-xs-12 button-wrapper' class=\"inner\">\n                          <button type=\"button\" class=\"btn btn-secondary ml-2\" data-toggle=\"modal\" onClick = {() => this.show_modal(data.props)}>\n                            Properties\n                          </button>\n                          <div class=\"modal fade\" id=\"jobListeModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                            <div class=\"modal-dialog\" role=\"document\">\n                              <div class=\"modal-content\">     \n                                <div class=\"modal-header\">\n                                  <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                  <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                    <span aria-hidden=\"true\">&times;</span>\n                                  </button>\n                                </div>\n                                <div class=\"modal-body\">\n                                </div>\n                                <div class=\"modal-footer\">\n                                  <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n\n\n                          <div class=\"inner\">\n                             <button type=\"button\" class=\"btn btn-warning ml-2\" data-toggle=\"modal\" data-target=\"#exampleModal\" onClick = {() => \n                                      this.setState(prevState => ({\n                                          job_name: data.name\n                                  }))}>\n                                 Run\n                             </button>\n                             <div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                                <div class=\"modal-dialog\" role=\"document\">\n                                  <div class=\"modal-content\">\n                                    <div class=\"modal-header\">\n                                      <h5 class=\"modal-title\" id=\"exampleModalLabel\">Run Job</h5>\n                                      <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                        <span aria-hidden=\"true\">&times;</span>\n                                      </button>\n                                    </div>\n                                    <div class=\"modal-body\">\n                                       {this.create_ui()}        \n                                      <input type='button' class=\"btn btn-primary ml-2\" value='Add Properties' onClick={this.add_props.bind(this)}/>\n                                      <input type=\"button\" class=\"btn btn-primary ml-2\" value=\"Submit\" onClick = {() => this.submit_run_job()}/>\n                                    </div>\n                                    <div class=\"modal-footer\">\n                                      <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                    </div>\n                                  </div>\n                                </div>\n                              </div>\n                           </div>\n                           </div>\n                           </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n            </table>\n      </div>     \n    );\n  }\n}\n// export default JobList;\nexport default withRouter(JobList)\n","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n\nimport '../css/App.css'\n\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\n\nclass LoaderComponent extends React.Component {\n  constructor(props){\n    super(props); \n  }\n\n  render(){\n    return (\n        <div class=\"d-flex justify-content-center\">\n           <div class=\"spinner-border m-5\" role=\"status\">\n             <span class=\"sr-only\">Loading...</span>\n           </div>\n        </div>\n    );\n  }\n}\nexport default LoaderComponent;\n","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport $ from 'jquery';\nimport LoaderComponent from './LoaderComponent';\n\nclass StepRuns extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { \n      stepruns: [],\n      loader:false\n\n    }\n    \n  }\n\n  async fetchEtlFlowJobById(job_run_id) {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    this.setState(prevState => ({\n      loader: true\n    }))\n\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          query {\n            stepruns(job_run_id:    \\\"${job_run_id}\\\"){\n                job_run_id\n                step_name\n                properties\n                state\n                start_time\n                elapsed_time\n                step_type\n                step_run_id\n             }\n           }\n          `\n        }\n      )  \n    })\n\n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n\n    const {data} = await response.json();\n    this.setState(prevState => ({\n      loader: false\n    }))\n\n    return data;    \n  }\n\n  setInterval() {\n    this.timerID = setInterval(\n      () => this.fetchEtlFlowJobs(),\n      1000 * 1000\n    );\n  }\n \n  componentDidMount() {\n    this.fetchEtlFlowJobById(this.props.job_run_id).then(({stepruns}) => {\n      this.setState(prevState => ({\n        stepruns: stepruns\n      }))\n    })\n    // set Interval\n    this.setInterval();\n }\n\n componentWillUnmount() {\n  clearInterval(this.timerID);\n }\n \n show_modal(data)\n {\n   var props = ''\n   var data_jobruns = JSON.parse(data)\n\n   for(var key in data_jobruns) {\n   { \n       props  += \"<b>\"+ key + \"</b>\" +\"=\" + data_jobruns[key]+ \"<br></br>\"\n   }\n  {$(\"#stepRunModal .modal-body\").html(props)}\n  $(\"#stepRunModal\").modal();\n }\n}\n\nshow_step_run_state_modal(data)\n {\n  {$(\"#stepRunStateModal .modal-body\").html(data)}\n  $(\"#stepRunStateModal\").modal();\n }\n\n\n\n render(){\n   var step_run_id_flag = false\n   this.state.stepruns.map( item => {if(item.step_run_id !== \"\") step_run_id_flag = true})\n   var linked_jobs = ''\n   if(step_run_id_flag) {\n    linked_jobs = <th>Linked Job</th>\n   } else {\n    linked_jobs = \"\"\n   }\n\n   var remoteStep = [\"EtlFlowJobStep\",\"DPSparkJobStep\",\"ParallelETLStep\"];\n   if (this.state.loader){\n    return (\n      <div>\n        <LoaderComponent job_run_id={this.job_run_id}  set_job_run_state = {this.set_job_run_state} />\n      </div>\n    );\n   }\n   else{\n   return (\n     <div className=\"container-fluid\">\n         <table id=\"job runs\" class=\"table table-sm table-bordered\">\n           <thead class=\"thead-dark\">\n                 <tr>\n                   <th>Job Run Id</th>\n                   <th>Step Type</th>\n                   <th>Step Name</th>\n                   <th>Start Time</th>\n                   <th>Elapsed Time</th>\n                   <th>Status</th>\n                   <th>Properties</th> \n                   {linked_jobs}\n                   <th>\n                        <button className=\"btn btn-secondary btn-block\" onClick = {() => this.props.set_job_run_state()}>Back</button>\n                   </th>\n                 </tr>\n               </thead>\n                 <tbody>\n                 {this.state.stepruns.map( data => (\n                   <tr>\n                     <td>{data.job_run_id}</td>\n                     <td>{data.step_type}</td>\n                     <td>{data.step_name}</td>\n                     <td>{data.start_time}</td>\n                     <td>{data.elapsed_time}</td>\n                     <td>\n                     {(() => {\n                           if (data.state === \"pass\" || data.state == \"\" ) {\n                             return (\n                               <div>\n                                 <p className = \"text-success\">{data.state}</p>\n                               </div>\n                             )\n                           } else if (data.state === \"started\" || data.state == \"running\" ) {\n                             return (\n                               <div>\n                                 <p className = \"text-warning\">{data.state}</p>\n                               </div>\n                             )\n                           } else {\n                            return (\n                              <div>\n                                 <button type=\"button\" class=\"btn btn-danger btn btn-sm\" data-toggle=\"modal\" onClick = {() => this.show_step_run_state_modal(data.state)}>\n                                     Error\n                                 </button>\n                            \n                                 <div class=\"modal fade\" id=\"stepRunStateModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                                   <div class=\"modal-dialog\" role=\"document\">\n                                     <div class=\"modal-content\">\n                                       <div class=\"modal-header\">\n                                         <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                         <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                           <span aria-hidden=\"true\">&times;</span>\n                                         </button>\n                                       </div>\n                                       <div class=\"modal-body\">\n                                       </div>\n                                       <div class=\"modal-footer\">\n                                         <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                       </div>\n                                     </div>\n                                   </div>\n                                 </div>\n                              </div>\n                            )\n                           }\n                         })()}\n                     </td>\n                     <td>\n                          <button type=\"button\" class=\"btn btn-secondary btn-sm\" data-toggle=\"modal\" onClick = {() => this.show_modal(data.properties)}>\n                            Properties\n                          </button>\n                          \n                          <div class=\"modal fade\" id=\"stepRunModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                            <div class=\"modal-dialog\" role=\"document\">\n                              <div class=\"modal-content\">\n                                <div class=\"modal-header\">\n                                  <h5 class=\"modal-title\" id=\"exampleModalLabel\">Step Properties</h5>\n                                  <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                    <span aria-hidden=\"true\">&times;</span>\n                                  </button>\n                                </div>\n                                <div class=\"modal-body\">\n                                </div>\n                                <div class=\"modal-footer\">\n                                  <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                      </td>\n                     <td>\n                         {(() => {\n                            if (remoteStep.includes(data.step_type)) {\n                              return (\n                                <input type=\"button\" value=\"Check Progress\" class=\"btn btn-secondary btn-sm\" onClick = {() => this.fetchEtlFlowJobById(data.step_run_id).then(({stepruns}) => {\n                                    this.setState(prevState => ({\n                                      stepruns: stepruns\n                                    }))\n                                  })}/>\n                              )\n                            } else {\n                              return (\n                                <div></div>\n                              )\n                            }\n                          })()}\n                    </td>\n                   </tr>\n                 ))}\n                 </tbody>\n            </table>\n          </div>\n    );\n    }\n  }\n}\nexport default StepRuns;     ","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery/dist/jquery.min.js';\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport StepRuns from './StepRuns';\nimport $ from 'jquery';\nimport '../css/App.css'\nimport { withRouter } from 'react-router'\n\nimport LoaderComponent from './LoaderComponent';\n\nclass JobRuns extends React.Component {\n  constructor(props){\n    super(props); \n    this.job_run_id = ''\n    this.filterOperation = [\"IN\",\"NOT IN\"]\n    this.state  = { \n      jobruns: [],\n      filter: '',\n      job_name: '',\n      filter_start_date: '',\n      filter_end_date: '',\n      paginationValue: 0,\n      stepRun: false,\n      loader:false\n        }\n    this.set_job_run_state = this.set_job_run_state.bind(this);    \n\n  }\n\n  async fetchEtlFlowJobs() {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    const limit = 10;\n    const offset = this.state.paginationValue;\n\n    var query = ` query { jobruns(limit: ${limit} , offset: ${offset}){ job_run_id job_name properties state start_time elapsed_time job_type is_master}}`\n    \n    if(this.props.match.params.job_name !== undefined){\n      query = ` query { jobruns(limit: ${limit} , offset: ${offset} ,filter: \"IN\", jobName: \\\"${this.props.match.params.job_name}\\\"  )\n              { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n\n      if (this.state.filter_end_date !== \"\") {\n        query = ` query { jobruns(limit: ${limit} , offset: ${offset},  startTime: \\\"${this.state.filter_start_date}\\\", endTime: \\\"${this.state.filter_end_date}\\\",filter: \"IN\", jobName: \\\"${this.props.match.params.job_name}\\\"  )\n        { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n      } \n\n      this.setState(prevState => ({\n        filter: 'IN',\n        job_name: this.props.match.params.job_name\n      }))\n\n    } else {\n      if (this.state.filter_end_date !== \"\" && this.state.filter !== \"\" ) {\n        query = ` query { jobruns(limit: ${limit} , offset: ${offset},  startTime: \\\"${this.state.filter_start_date}\\\", endTime: \\\"${this.state.filter_end_date}\\\",filter: \\\"${this.state.filter}\\\", jobName: \\\"${this.state.job_name}\\\"  )\n        { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n      } else if (this.state.filter_end_date !== \"\" ){\n        query = ` query { jobruns(limit: ${limit} , offset: ${offset},  startTime: \\\"${this.state.filter_start_date}\\\", endTime: \\\"${this.state.filter_end_date}\\\")\n        { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n      } else if (this.state.filter !== \"\" && this.state.job_name !== \"\") {\n        query = ` query { jobruns(limit: ${limit} , offset: ${offset}, filter: \\\"${this.state.filter}\\\", jobName: \\\"${this.state.job_name}\\\"  )\n        { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n      } else if (this.state.filter === \"\" && this.state.job_name !== \"\" ) {\n        query = ` query { jobruns(limit: ${limit} , offset: ${offset} ,filter: \"IN\", jobName: \\\"${this.state.job_name}\\\"  )\n        { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n      } else {\n        query = ` query { jobruns(limit: ${limit} , offset: ${offset}){ job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n      }\n    }\n\n    this.setState(prevState => ({\n      loader: true\n    }))\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: query\n        }\n      )  \n    })\n\n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n\n    const {data} = await response.json();\n    this.setState(prevState => ({\n      loader: false\n    }))\n\n    return data;   \n  }\n\n  setInterval() {\n    this.timerID = setInterval(\n      () => this.fetchEtlFlowJobs(),\n      1000 * 1000\n    );\n  }\n \n  componentDidMount() {\n    this.set_jobruns()\n    this.setInterval();\n }\n\n componentWillUnmount() {\n  clearInterval(this.timerID);\n }\n\n set_job_run_state() {\n  this.setState(state => ({\n    stepRun: !state.stepRun\n  }))\n }\n \n set_jobruns(){\n  this.fetchEtlFlowJobs().then(({jobruns}) => {\n    this.setState(prevState => ({\n      jobruns: jobruns\n    }))\n  })\n }\n\n set_job_name() {\n  this.setState(prevState => ({\n    job_name: document.getElementById(\"exampleDataList\").value\n  }))\n }\n\n set_filter_start_date() {\n  this.setState(prevState => ({\n    filter_start_date: document.getElementById(\"start_date\").value\n  }))\n }\n\n set_filter_end_date() {\n  this.setState(prevState => ({\n    filter_end_date: document.getElementById(\"end_date\").value\n  }))\n }\n\n show_modal(data)\n {\n   var props = ''\n   var data_jobruns = JSON.parse(data)\n\n   for(var key in data_jobruns) {\n   { \n       props  += \"<b>\"+ key + \"</b>\" +\"=\" + data_jobruns[key]+ \"<br></br>\"\n   }\n  {$(\"#jobRunModal .modal-body\").html(props)}\n  $(\"#jobRunModal\").modal();\n }\n}\n\nasync set_initial_state(){\n  this.props.match.params.job_name = undefined\n  this.setState(prevState => ({  \n    filter: '',\n    job_name: '',\n    filter_start_date: '',\n    filter_end_date: '',\n    paginationValue: 0,\n  }), () => this.set_jobruns())\n}\n\nshow_job_run_state_modal(data)\n {\n  {$(\"#jobRunStateModal .modal-body\").html(data)}\n  $(\"#jobRunStateModal\").modal();\n }\n\n render(){\n   \n   var button = ''\n   var filter_button_name = '' \n   var filter_button_job_name = '' \n   var filter_start_date = ''  \n   var filter_end_date = ''  \n   var filter_back_button = ''\n   //Code for adding pagination element\n  if (this.state.paginationValue === 0) {\n    button = <li class=\"page-item disabled\">\n    <input type=\"button\" value=\"Previous\" class=\"page-link btn btn-secondary btn-sm\"/></li>\n  } else {\n    button =  <li class=\"page-item\">\n    <input type=\"button\" value=\"Previous\" class=\"page-link btn btn-secondary btn-sm\" onClick = {() => {\n             this.setState(prevState => ({\n              paginationValue: this.state.paginationValue  -   10\n            }))\n            this.fetchEtlFlowJobs(this.state.paginationValue - 10).then(({jobruns}) => {\n              this.setState(prevState => ({\n                jobruns: jobruns\n              }))\n            }) \n    }}/></li>\n  } \n\n   //Code for adding button name\n  if (this.state.filter !== '') {\n    filter_button_name = this.state.filter\n  }else {\n    filter_button_name = \"Add Filter\"\n  } \n\n   //Code for adding button name\n  if (this.state.job_name !== '') {\n     filter_button_job_name = this.state.job_name\n  }else {\n     filter_button_job_name = \"Type to search\"\n  } \n\n  if (this.state.filter_start_date !== '') {\n   filter_start_date = this.state.filter_start_date\n  }else {\n    filter_start_date = \"Start Date\"\n  } \n\n  if (this.state.filter_end_date !== '') {\n    filter_end_date = this.state.filter_end_date\n  }else {\n    filter_end_date = \"End Date\"\n  } \n\n  if(this.props.match.params.job_name !== undefined){\n    filter_back_button= <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                          this.props.history.push('/')\n                         }} >\n                        Back\n                        </button>\n  }\n\n  if(this.state.stepRun) {\n     return (\n       <div>\n         <StepRuns job_run_id={this.job_run_id}  set_job_run_state = {this.set_job_run_state} />\n       </div  >\n     );\n   }else if (this.state.loader){\n    return (\n      <div>\n        <LoaderComponent job_run_id={this.job_run_id}  set_job_run_state = {this.set_job_run_state} />\n      </div>\n    );\n   }\n   else{\n   return (\n     <div className=\"container-fluid\">\n       <h3>{this.state.loader}</h3>\n       <ul class = \"pagination justify-content-center\">\n         <div class=\"dropdown\">\n            <button class=\"btn btn-light dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n               {filter_button_name}\n            </button>\n            <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n              { this.filterOperation.map ( filter => (\n                   <a class=\"dropdown-item\">\n                      <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                           this.setState(prevState => ({\n                               filter: filter\n                       }))}}> {filter} </button>\n                   </a>\n              ))}\n            </div>\n         </div>\n         <div className =\"form-inline float-right\">\n             <div className=\"mb-1\">\n             <input type=\"text\"\n                        className=\"form-control input-sm\"\n                        list = \"datalistOptions\"\n                        id = \"exampleDataList\"\n                        placeholder = {filter_button_job_name}\n                        onChange={e => this.set_job_name()}></input>      \n             </div>\n             <datalist id = \"datalistOptions\">\n               {this.props.jobs.map( data => (\n                 <option value = {data.name}></option>\n               ))}\n             </datalist> \n         </div>\n         <div class = \"form-inline float-right\">\n              <div class = \"mb-1\"> \n                  <input type=\"date\"\n                         className=\"form-control input-sm\"\n                         placeholder={filter_start_date}\n                         id = \"start_date\"\n                         onChange={e => this.set_filter_start_date()}\n                   ></input>\n              </div>\n              <div class = \"mb-1\"> \n                  <input type=\"date\"\n                         className=\"form-control input-sm\"\n                         placeholder={filter_end_date}\n                         id = \"end_date\"\n                         onChange={e => this.set_filter_end_date()}\n                   ></input> \n              </div>    \n         </div> \n         <button class= \"btn btn btn-sm\" type=\"button \" onClick= {() => {\n            this.set_initial_state()\n            }}>\n            Clear\n         </button>\n         <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                this.set_jobruns()\n             }} >\n            Refresh\n         </button>\n         {filter_back_button}\n       </ul>\n       <table id=\"jobruns\" class=\"table table-sm table-bordered\">\n           <thead class=\"thead-dark\">\n                 <tr>\n                   <th>Job Name</th>\n                   <th>Job Type</th>\n                   <th>Job Start Time</th>\n                   <th>Elapsed Time</th>\n                   <th>Job Status</th>\n                   <th>Job Properties</th>\n                   <th>Step Properties</th>\n                 </tr>\n               </thead>\n                 <tbody>\n                 {this.state  .jobruns.map( data => (\n                   <tr>\n                     <td>{data.job_name}</td>\n                     <td>{data.job_type}</td>\n                     <td>{data.start_time}</td>\n                     <td>{data.elapsed_time}</td>\n                     <td>\n                     {(() => {\n                           if (data.state === \"pass\" || data.state == \"\" ) {\n                             return (\n                               <div>\n                                 <p className = \"text-success\">{data.state}</p>\n                               </div>\n                             )\n                           } else if (data.state === \"started\" || data.state == \"running\" ) {\n                             return (\n                               <div>\n                                 <p className = \"text-warning\">{data.state}</p>\n                               </div>\n                             )\n                           } else {\n                            return (\n                              <div>\n                                 <button type=\"button\" class=\"btn btn-danger btn btn-sm\" data-toggle=\"modal\" onClick = {() => this.show_job_run_state_modal(data.state)}>\n                                     Error\n                                 </button>\n                            \n                                 <div class=\"modal fade\" id=\"jobRunStateModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                                   <div class=\"modal-dialog\" role=\"document\">\n                                     <div class=\"modal-content\">\n                                       <div class=\"modal-header\">\n                                         <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                         <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                           <span aria-hidden=\"true\">&times;</span>\n                                         </button>\n                                       </div>\n                                       <div class=\"modal-body\">\n                                       </div>\n                                       <div class=\"modal-footer\">\n                                         <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                       </div>\n                                     </div>\n                                   </div>\n                                 </div>\n                              </div>\n                            )\n                           }\n                         })()}\n                     </td>\n                     <td>\n                         <button type=\"button\" class=\"btn btn-secondary btn-sm\" data-toggle=\"modal\" onClick = {() => this.show_modal(data.properties)}>\n                           Properties\n                         </button>\n                         \n                         <div class=\"modal fade\" id=\"jobRunModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                           <div class=\"modal-dialog\" role=\"document\">\n                             <div class=\"modal-content\">\n                               <div class=\"modal-header\">\n                                 <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                 <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                   <span aria-hidden=\"true\">&times;</span>\n                                 </button>\n                               </div>\n                               <div class=\"modal-body\">\n                               </div>\n                               <div class=\"modal-footer\">\n                                 <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                               </div>\n                             </div>\n                           </div>\n                         </div>\n                     </td>\n                     <td><input type=\"button\" value=\"Step Properties\" class=\"btn btn-secondary btn-sm\" onClick = {() => {\n                       this.set_job_run_state()\n                       this.job_run_id =  data.job_run_id\n                     }}/></td>\n                   </tr>\n                 ))}\n                 </tbody>\n            </table>  \n            <nav aria-label=\"Page navigation example\">\n               <ul class=\"pagination justify-content-center\">\n                 {button}\n                 <li class=\"page-item\"><input type=\"button\" value=\"Next\" class=\"page-link btn btn-secondary btn-sm\" onClick = {() => {\n                   this.setState(prevState => ({\n                     paginationValue: this.state.paginationValue  + 10\n                   }))\n                   this.fetchEtlFlowJobs(this.state.paginationValue + 10).then(({jobruns}) => {\n                    this.setState(prevState => ({  \n                      jobruns: jobruns\n                    }))\n                   })\n                   }}/></li>\n               </ul>\n         </nav>\n          </div>\n   );\n  }\n }\n}\n// export default JobRuns;     \nexport default withRouter(JobRuns)\n","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n\n\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport $ from 'jquery';\nimport LoaderComponent from './LoaderComponent';\n\nclass Metrics extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { metrics: [],\n      loader:false\n    }\n  }\n\n  async fetchEtlFlowMetrics() {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    this.setState(prevState => ({\n      loader: true\n    }))\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          query {\n            metrics {\n                active_jobs\n                active_subscribers\n                etl_jobs\n                cron_jobs\n                used_memory\n                free_memory\n                total_memory\n                max_memory\n                build_time\n              }\n           }\n          `\n        }\n      )  \n    })\n\n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n    \n    const {data} = await response.json();\n    this.setState(prevState => ({\n      loader: false\n    }))\n\n    return data;    \n  }\n\n  componentDidMount() {\n    //calling getInfo api\n    this.fetchEtlFlowMetrics().then(({metrics}) => {\n        this.setState(prevState => ({\n            metrics: metrics\n        }))\n      })\n   }\n\n\n  render(){\n    if (this.state.loader){\n      return (\n        <div>\n          <LoaderComponent job_run_id={this.job_run_id}  set_job_run_state = {this.set_job_run_state} />\n        </div>\n      );\n     }\n    else{\n    return (\n      <div class=\"container\">\n          <ul class = \"pagination justify-content-center\">\n             <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                   this.fetchEtlFlowMetrics().then(({metrics}) => {\n                    this.setState(prevState => ({\n                        metrics: metrics\n                    }))\n                  })\n                }} >\n               Refresh\n             </button>\n         </ul>\n         <ul class=\"list-group \">\n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Active Jobs</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.active_jobs}</span>\n            </li>\n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Active Subscribers</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.active_subscribers}</span>\n            </li>\n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Etl Jobs</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.etl_jobs}</span>\n            </li>\n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Cron Jobs</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.cron_jobs}</span>\n            </li>  \n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Used Memory</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.used_memory}</span>\n            </li> \n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Free Memory</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.free_memory}</span>\n            </li>  \n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Total Memory</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.total_memory}</span>\n            </li>\n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Max Memory</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.max_memory}</span>\n            </li> \n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Build Time</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.build_time}</span>\n            </li>   \n         </ul>\n      </div>     \n    );    \n   }      \n  }\n}\nexport default Metrics;\n","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n  \nimport { withRouter } from 'react-router'\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport $ from 'jquery';\nimport LoaderComponent from './LoaderComponent';\n\nclass QueueStats extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { queueStats: [],\n      loader:false\n    }\n  }\n\n  async fetchEtlFlowQueueStats() {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    this.setState(prevState => ({\n      loader: true\n    }))\n\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          query {\n            queueStats {\n              name \n              details\n              submitted_from\n              execution_time\n              }\n           }\n          `\n        }\n      )  \n    })\n\n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n    \n    const {data} = await response.json();\n    this.setState(prevState => ({\n      loader: false\n    }))\n\n    return data;    \n  }\n\n  componentDidMount() {\n    //calling getInfo api\n    this.fetchEtlFlowQueueStats().then(({queueStats}) => {\n        this.setState(prevState => ({\n          queueStats: queueStats\n        }))\n      })\n   }\n\n   show_modal(data)\n  {\n    var props = ''\n    var queue = JSON.parse(data)\n \n    for(var key in queue) {\n    { \n        props  += \"<b>\"+ key + \"</b>\" +\"=\" + queue[key]+ \"<br></br>\"\n    }\n\n   {$(\"#queueStats .modal-body\").html(props)}\n   $(\"#queueStats\").modal();\n  }\n}\n\n\n  render(){\n    if (this.state.loader){\n      return (\n        <div>\n          <LoaderComponent job_run_id={this.job_run_id}  set_job_run_state = {this.set_job_run_state} />\n        </div>\n      );\n     }\n    else{ \n    return (\n      <div class=\"container\">\n        <ul class = \"pagination justify-content-center\">\n             <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                    this.fetchEtlFlowQueueStats().then(({queueStats}) => {\n                      this.setState(prevState => ({\n                        queueStats: queueStats\n                      }))\n                  })\n                }} >\n               Refresh\n             </button>\n         </ul>\n          <table id=\"joblist\" class=\"table table-sm table-bordered\">\n            <thead class=\"thead-dark\">\n                  <tr>\n                    <th>Job Name</th>\n                    <th>Submitted From</th>\n                    <th>Execution Time</th>\n                    <th>Details</th>\n                  </tr>\n                </thead>\n                  <tbody>\n                  {this.state.queueStats.map( (data) => (\n                    <tr>\n                      <td>{data.name  }</td>\n                      <td>{data.submitted_from}</td>\n                      <td>{data.execution_time}</td>\n\n                      <td>\n                          <button type=\"button\" class=\"btn btn-secondary btn-sm\" data-toggle=\"modal\" onClick = {() => this.show_modal(data.details)}>\n                            Stats\n                          </button>\n                          \n                          <div class=\"modal fade\" id=\"queueStats\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                            <div class=\"modal-dialog\" role=\"document\">\n                              <div class=\"modal-content\">\n                                <div class=\"modal-header\">\n                                  <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                  <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                    <span aria-hidden=\"true\">&times;</span>\n                                  </button>\n                                </div>\n                                <div class=\"modal-body\">\n                                </div>\n                                <div class=\"modal-footer\">\n                                  <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n            </table>\n      </div>     \n    ); \n    }         \n  }\n}\nexport default withRouter(QueueStats)\n// export default QueueStats;\n","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery/dist/jquery.min.js';\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\n\nclass CurrentTime extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { currentime: '' }    \n  }\n\n  async fetchEtlFlowJobs() {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          query {\n            currentime {\n                current_time\n             }\n           }\n          `\n        }\n      )  \n    })\n    const {data} = await response.json();\n    return data;    \n  }\n\n\n  componentDidMount() {\n    this.fetchEtlFlowJobs().then(({currentime}) => {\n      this.setState(prevState => ({\n        currentime: currentime.current_time\n      }))\n    })\n }\n  \n render(){\n    return (\n         <li className =\"nav-item\">\n             <a className = \"nav-link disabled\">\n                {this.state.currentime} \n             </a>\n         </li>\n    );\n  }\n}\nexport default CurrentTime;","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\nimport 'chartist/dist/chartist.min.css';\nimport 'chartist/dist/chartist.js';\n\nimport ChartistGraph from 'react-chartist';\n\n\n\n// const client = new WebSocket('wss://devetlflow.startv.com/ws/etlflow/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoibWludF9hZG1pbiIsICJyb2xlIjoiYWRtaW4ifQ.gwiUv0vss-3gX5rkPOGTdJ_81n5N3W7Hv1yeGsJj5g8')\n\nvar ws_url = new URL(\"/ws/etlflow\" , window.location.href)\nws_url.protocol = ws_url.protocol.replace(\"http\",\"ws\")\n\nclass MemoryInfo extends React.Component {\n  constructor(props){\n    super(props); \n    const GRAPHQL_URL = '/ws/etlflow'\n    this.client = new WebSocket(ws_url + \"/\" + localStorage.getItem('Authorization'))\n    // this.client = new WebSocket('wss://devetlflow.startv.com/ws/etlflow/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoibWludF9hZG1pbiIsICJyb2xlIjoiYWRtaW4ifQ.gwiUv0vss-3gX5rkPOGTdJ_81n5N3W7Hv1yeGsJj5g8')\n\n    this.state  = { \n      messages:''\n    }\n  }\n\n  componentDidMount() {\n    this.client.onopen = () => {\n    // on connecting, do nothing but log it to the console\n    console.log(' ws connected')\n    }   \n\n    this.client.onmessage = evt => {\n    // listen to data sent from the websocket server\n    const message = evt.data\n    this.addMessage(message)\n    }\n  }\n\n  componentWillUnmount() {\n    this.client.close()\n  }\n\n  addMessage = message =>\n    this.setState(prevState => ({\n      messages: message\n  }))\n\n\n  render(){\n    var seriesVals = [];\n    var labelsVals = [];\n\n    this.state.messages.split(\"</br>\").map( data => (\n      labelsVals.push(data.split(\":\")[0].replace(\"\\n\",\"\")),\n      seriesVals.push(data.split(\":\")[1])\n    ))\n    \n    var data = {\n      labels: labelsVals,\n      series: [seriesVals]\n    };\n\n    var options = {\n      // axisX: {\n      //   labelInterpolationFnc: function(value, index) {\n      //     return index % 2 === 0 ? value : null;\n      //   }\n      // }\n    };\n\n    var type = 'Line'\n\n    return (\n    <div class=\"container\">\n    <div>\n            <ul class=\"list-group \">\n            {this.state.messages.split(\"</br>\").map( data => (\n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>{data.split(\":\")[0]}</b>\n              <span class=\"badge badge-secondary badge-pill\">{data.split(\":\")[1]}</span>\n            </li> ))}\n            </ul>\n     </div> \n     <br/>\n     <div class=\"container-fluid\">\n        <ChartistGraph data={data} options={options} type={type} />\n     </div> \n     </div>\n    ); \n  }        \n}\n\nexport default MemoryInfo;\n","import React from 'react';\nimport JobList from './JobList';\nimport JobRuns from './JobRuns';\n\nimport Metrics from './Metrics';\nimport QueueStats from './QueueStats';\n\nimport jwt_decode from \"jwt-decode\";\nimport LoaderComponent from './LoaderComponent';\nimport CurrentTime from './CurrentTime';\nimport MemoryInfo from './MemoryInfo';\n\nimport '../css/App.css'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nclass Routes extends React.Component {\n\n  constructor(props){\n    super(props); \n    this.state  = {\n      jobs: [],\n      metrics: [],\n      user: '',\n      loader:false\n\n    }\n  }\n\n  async fetchEtlFlowJobs() {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    this.setState(prevState => ({\n      loader: true\n    }))\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          query {\n              jobs {\n                name \n                schedule\n                props {key value} \n                nextSchedule \n                schduleRemainingTime \n                is_active \n                max_active_runs\n             }\n           }\n          `\n        }\n      )  \n    })\n\n    if (response.status === 403) {\n      this.remove_token()\n    } \n\n    const {data} = await response.json();\n    this.setState(prevState => ({\n      loader: false\n    }))\n\n    return data;    \n  }\n\n  setInterval() {\n    this.timerID = setInterval(\n      () => this.fetchEtlFlowJobs(),\n      1000 * 1000\n    );\n  }\n\n  fetchEtlFlowUserDetails() {\n    const token = localStorage.getItem('Authorization')\n    var decoded = JSON.parse(JSON.stringify(jwt_decode(token)));\n    this.setState({\n      user: decoded[\"user\"]\n    })\n  }\n\n  componentDidMount() {\n\n    //calling jobs api\n    this.fetchEtlFlowJobs().then(({jobs}) => {\n      this.setState(prevState => ({\n        jobs: jobs\n      }))\n    })\n\n    this.fetchEtlFlowUserDetails()\n }\n\n get_etl_jobs = () => {\n  this.fetchEtlFlowJobs().then(({jobs}) => {\n    this.setState(prevState => ({\n      jobs: jobs\n    }))\n  })  \n }\n\n remove_token() {\n  localStorage.removeItem(\"Authorization\")\n  this.props.doLogout(\"\")\n}\n\n  render(){\n    if (this.state.loader){\n      return (\n        <div>\n          <LoaderComponent job_run_id={this.job_run_id}  set_job_run_state = {this.set_job_run_state} />\n        </div>\n      );\n     }\n    else{\n    return (\n      <Router>\n        <nav className = \"navbar navbar-expand-lg navbar-dark bg-dark mb-3\">\n            <ul className = \"nav navbar-nav w-100\">\n                <li className = \"nav-item nav-link\" ><Link to=\"/\">Jobs</Link> </li>\n                <li className = \"nav-item nav-link\" ><Link to=\"/JobRuns\">Job Runs</Link> </li>\n                <li className = \"nav-item nav-link\" ><Link to=\"/getInfo\">Metrics</Link> </li>\n                <li className = \"nav-item nav-link\" ><Link to=\"/getQueueStats\">Job Logs</Link> </li>\n                <li className = \"nav-item nav-link\" ><Link to=\"/getMemoryInfo\">Memory Info</Link> </li>\n\n\n            </ul>\n            <div class=\"navbar-collapse collapse w-100 order-3 dual-collapse2\">\n              <ul class=\"nav justify-content-end w-100\">\n              <CurrentTime/>\n                <li class=\"nav-item dropdown\">\n\t                <a class=\"nav-link  dropdown-toggle\" href=\"#\" data-toggle=\"dropdown\">{this.state.user}</a>\n\t                  <ul class=\"dropdown-menu\">\n\t\t                  <li>\n                        <a class=\"dropdown-item\" href=\"https://github.com/tharwaninitin/etlflow\">\n                           Git Hub \n                        </a>\n                      </li>\n                      <li>\n                        <a class=\"dropdown-item\" href=\"https://tharwaninitin.github.io/etlflow/site/\">\n                          Docs\n                        </a>\n                      </li>\n                      <li>\n                        <a class=\"dropdown-item\">\n                          <input type=\"button\" class=\"btn btn-secondary btn-sm\" value=\"LogOut\" onClick = {() => this.remove_token()}></input>\n                        </a>\n                      </li>\n\t                  </ul>\n\t              </li>\n              </ul>\n            </div>\n        </nav>\n        <Switch>\n          <Route exact path=\"/\" component={() => (<JobList jobs={this.state.jobs} get_etl_jobs = {this.get_etl_jobs} />)}/>\n          <Route path=\"/JobRuns/:job_name?\" component={() => (<JobRuns jobs={this.state.jobs}/>)}/>\n          <Route path=\"/getInfo\" component={() => (<Metrics/>)}/>\n          <Route path=\"/getQueueStats\" component={() => (<QueueStats/>)}/>\n          <Route path=\"/getMemoryInfo\" component={() => (<MemoryInfo/>)}/>\n\n        </Switch>\n      </Router>\n    );\n    }\n  }\n}\nexport default Routes;\n// export default withRouter(Routes)\n\n\n","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery/dist/jquery.min.js';\nimport jwt_decode from \"jwt-decode\";\n\n\nclass Login extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = {\n         user_name: '',\n         password: '',\n         token: '', \n         login: [],\n\n        }\n\n    this.login_validation = this.login_validation.bind(this);\n    this.set_login_user_name = this.set_login_user_name.bind(this);\n    this.set_login_password = this.set_login_password.bind(this);\n  }\n\n  async fetchLoginDetails(user_name,password) {\n    const GRAPHQL_URL = '/api/login'\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          mutation {\n            login (user_name: \\\"${user_name}\\\", password: \\\"${password}\\\") {\n                message \n                token\n             }\n           }\n          `\n         }\n      )  \n    })  \n    const {data} = await response.json();\n    return data;        \n  }\n\n login_validation() {\n    this.fetchLoginDetails(this.state.user_name,this.state.password).then(({login}) => {\n        var token_value = JSON.parse(JSON.stringify(login)).token\n        if(token_value !== \"\")\n        {\n            localStorage.setItem('Authorization', token_value);   \n            this.props.doLogin(token_value)\n            this.setState(prevState => ({\n                token: token_value\n              }))\n        }\n        else \n        {\n            alert(\"Invalid User\")\n        }\n    })   \n  } \n\n  set_login_user_name() {\n    this.setState(prevState => ({\n        user_name: document.getElementById(\"user_name\").value\n      }))\n  }\n\n  set_login_password() {\n    this.setState(prevState => ({\n        password: document.getElementById(\"password\").value\n      }))\n  }\n\n  render(){\n    return (\n    <div className=\"main\" align=\"center\">\n         <nav className = \"navbar navbar-expand-lg navbar-dark bg-dark mb-3\">\n             <ul className = \"nav navbar-nav w-50\">\n                 <li className = \"nav-item nav-link\">EtlFlow</li>\n             </ul>\n         </nav>   \n           <div className=\"col-md-3\">\n            <div className=\"login-form \">\n                <form id=\"form_login\" className = \"text-center border border-dark p-5\" onSubmit={(e) => {this.login_validation(); e.preventDefault();}  }>\n                    <p className = \"h4 mb-4\">EtlFlow Login</p>\n                    <div className=\"form-group\">\n                        <input type=\"text\"\n                         className=\"form-control\" \n                         aria-describedby=\"UsernameHelp\"\n                         placeholder=\"Username\"\n                         id=\"user_name\"\n                         onChange={e => this.set_login_user_name()}></input>\n                    </div>\n                    <div className=\"form-group\">\n                        <input\n                         type=\"password\"\n                         className=\"form-control\"\n                         aria-describedby=\"PasswordHelp\"\n                         placeholder=\"Password\"\n                         id=\"password\"\n                         onChange={e => this.set_login_password()}></input>\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-secondary btn-block\">Submit</button>\n                </form>   \n            </div>\n        </div>\n    </div>\n    );\n  }\n}\nexport default Login;","import React from 'react';\n//Bootstrap and jQuery libraries\nimport Routes from './components/Routes';\nimport LoginComponent from './components/Login';\n\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props);\n\n    this.state = {\n      token: '',\n    }\n\n    this.doLogin = this.doLogin.bind(this)\n    this.doLogout = this.doLogout.bind(this)\n\n  }\n\n  doLogin(args_token,args_user) {\n    this.setState({\n      token: args_token\n    })\n  }\n\n\n  doLogout(args_token) {\n    this.setState({\n      token: ''\n    })\n  }\n\n\n  render(){\n    if(localStorage.getItem(\"Authorization\") === null){\n      return (  \n          <div>\n            <LoginComponent doLogin = {this.doLogin}/>  \n          </div>\n      );\n    } else {\n      return (  \n        <div>\n          <Routes doLogout = {this.doLogin}/>  \n        </div>\n     );\n    }\n  }\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nwindow.login_url = \"/api/login\"\nwindow.url = \"/api/etlflow\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}