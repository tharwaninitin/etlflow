{"version":3,"sources":["components/JobList.js","components/LoaderComponent.js","components/StepRuns.js","components/JobRuns.js","components/Metrics.js","components/QueueStats.js","components/CurrentTime.js","components/MemoryInfo.js","components/Routes.js","components/Login.js","App.js","index.js"],"names":["JobList","props","state","jobs","notification","run_job_props","job_name","errors","is_error","is_active","a","token","localStorage","getItem","fetch","method","headers","body","JSON","stringify","query","response","status","removeItem","json","data","this","setState","prevState","loader","parse","run_job","set_job_error_deails","$","DataTable","job_properties","map","key","value","html","modal","history","push","notification_var","class","role","message","type","data-dismiss","aria-label","onClick","set_notification","aria-hidden","replace","get_etl_jobs","id","className","aria-describedby","data-toggle","defaultChecked","e","updateJobActiveState","name","then","update_job_state","handleOnClick","schedule","nextSchedule","schduleRemainingTime","show_modal","aria-labelledby","run_etl_job","set_job_deails","React","Component","withRouter","LoaderComponent","StepRuns","stepruns","job_run_id","timerID","setInterval","fetchEtlFlowJobs","fetchEtlFlowJobById","clearInterval","data_jobruns","step_run_id_flag","item","step_run_id","linked_jobs","remoteStep","set_job_run_state","step_type","step_name","start_time","elapsed_time","show_step_run_state_modal","properties","tabindex","includes","JobRuns","filterOperation","jobruns","filter","filter_start_date","filter_end_date","paginationValue","stepRun","bind","limit","offset","undefined","match","params","set_jobruns","document","getElementById","button","filter_button_name","filter_button_job_name","filter_back_button","aria-haspopup","aria-expanded","list","placeholder","onChange","set_job_name","set_filter_start_date","set_filter_end_date","set_initial_state","job_type","show_job_run_state_modal","Metrics","metrics","fetchEtlFlowMetrics","active_jobs","active_subscribers","etl_jobs","cron_jobs","used_memory","free_memory","total_memory","max_memory","build_time","QueueStats","queueStats","fetchEtlFlowQueueStats","queue","submitted_from","execution_time","details","CurrentTime","currentime","current_time","ws_url","URL","window","location","href","protocol","MemoryInfo","addMessage","messages","client","WebSocket","onopen","console","log","onmessage","evt","seriesVals","labelsVals","split","labels","series","options","Routes","user","remove_token","decoded","jwt_decode","fetchEtlFlowUserDetails","doLogout","to","exact","path","component","Login","user_name","password","login","login_validation","set_login_user_name","set_login_password","fetchLoginDetails","token_value","setItem","doLogin","alert","align","onSubmit","preventDefault","App","args_token","args_user","login_url","url","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.86cb2058.chunk.js","sourcesContent":["import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n\nimport '../css/App.css'\nimport { withRouter } from 'react-router'\n\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport $ from 'jquery';\n\nclass JobList extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { \n      jobs: [],\n      notification: false,\n      run_job_props: '',\n      job_name: '',\n      errors: [],\n      is_error: false,\n      is_active: true\n      }\n  }\n\n  async updateJobActiveState(job_name,state) {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n            mutation {\n              update_job_state (name:\\\"${job_name}\\\" ,state: ${state}){\n             }\n           }\n          `\n        }\n      )  \n    })\n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n    const {data} = await response.json();\n    return data;    \n  }\n\n  async run_etl_job(job_name,state) {\n    const GRAPHQL_URL = '/api/etlflow'\n        const token = localStorage.getItem('Authorization')\n    this.setState(prevState => ({\n      loader: true\n    }))\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n            mutation {\n              run_job (name:\\\"${job_name}\\\" ,props: { key: \\\"\\\", value: \\\"\\\" }){\n                name\n                props {key value}\n             }\n           }\n          `\n        }\n      )  \n    })\n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n    this.setState(prevState => ({\n      loader: true\n    }))\n    const {data,errors} = await response.json();\n    if(JSON.parse(JSON.stringify(data.run_job)) !== null){\n      this.set_job_error_deails(false)\n    }\n    else {\n      this.set_job_error_deails(true,JSON.parse(JSON.stringify(errors)))\n    }\n    return data;    \n  }\n\n\n  componentDidMount() {\n    $('#joblist').DataTable({\n      \"order\": [[ 1, \"asc\" ]]\n  });\n  }\n\n show_modal(data)\n  {\n    var job_properties = \"\" \n    { \n      data.map(  props =>\n        job_properties  += \"<b>\"+ props.key + \"</b>\" +\"=\" + props.value + \"<br></br>\"\n    )}\n\n   {$(\"#jobListeModal .modal-body\").html(job_properties)}\n   $(\"#jobListeModal\").modal();\n  }\n\n  set_notification(state){\n    this.setState(prevState => ({\n      notification: state\n    }))\n  }\n\n  set_job_deails(job_name,props){\n    this.setState(prevState => ({\n      job_name: job_name,\n      run_job_props: props                    \n      }))\n  }\n\n  set_job_error_deails(is_error,errors){\n    this.setState(prevState => ({\n      is_error: is_error,\n      errors: errors                    \n      }))\n  }\n\n  handleOnClick(job_name){    \n    this.props.history.push('/JobRuns/' + job_name)\n  }\n\n  render(){\n    var props = ''\n    var notification_var = \"\"\n    if(this.state.notification){\n      if(this.state.is_error) {\n         notification_var =\n         <div class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">\n            <h4 class=\"alert-heading\">Error while submitting job!</h4>\n            <p>{JSON.parse(JSON.stringify(this.state.errors)).map( (data) => data.message)}</p>\n            <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" onClick = {() => {this.set_notification(false)}}>\n               <span aria-hidden=\"true\">&times;</span>\n            </button>\n         </div>\n       } else {\n          notification_var =\n          <div class=\"alert alert-success alert-dismissible fade show\" role=\"alert\">\n             <h4 class=\"alert-heading\">Job {this.state.job_name.replace(/^\"(.*)\"$/, '$1')} submitted successfully!  </h4>\n             <p>{this.state.run_job_props}</p>\n             <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" onClick = {() => {this.set_notification(false)}}>\n                <span aria-hidden=\"true\">&times;</span>\n             </button>\n          </div>\n        }  \n    }\n  \n    return (\n          <div class=\"container-fluid\">\n          <div>{notification_var}</div>\n          <ul class = \"pagination justify-content-center\">\n             <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                      this.props.get_etl_jobs() \n                }} >\n               Refresh\n             </button>\n         </ul>\n          <table id=\"joblist\" class=\"table table-sm table-bordered\">\n            <thead class=\"thead-dark\">\n                  <tr>\n                    <th>Active/Inactive</th>\n                    <th>Job Name</th>\n                    <th>Schedule</th>\n                    <th>Next Schedule</th>\n                    <th>Schedule Remaining Time</th>\n                    <th>Action</th>\n                  </tr>\n                </thead>\n                  <tbody>\n                  {this.props.jobs.map( (data) => (\n                    <tr>\n                      <td>{(() => {\n                           if (this.state.is_active && data.is_active) {\n                             return (\n                               <div className = \"checkbox\">\n                                 <input type=\"checkbox\"\n                                     aria-describedby=\"UsernameHelp\"\n                                     data-toggle = \"toggle\"\n                                     defaultChecked\n                                     onClick={e => this.updateJobActiveState(data.name,false).then(({update_job_state}) => {\n                                      this.props.get_etl_jobs()\n                                      this.setState(prevState => ({  \n                                        is_active: false\n                                      }))\n                                    })}>\n                                 </input>\n                               </div>\n                             )\n                           } else {\n                            return (\n                              <div className = \"checkbox\">\n                                <input type=\"checkbox\"\n                                     aria-describedby=\"UsernameHelp\"\n                                     data-toggle = \"toggle\"\n                                     onClick={e => this.updateJobActiveState(data.name,true).then(({update_job_state}) => {\n                                      this.props.get_etl_jobs()\n                                      this.setState(prevState => ({  \n                                        is_active: true\n                                      }))\n                                    })}>\n                                 </input>\n                              </div>\n                            )\n                           }\n                         })()}\n                      </td>\n                        <td> <button type=\"button\" class=\"btn btn-link\" data-dismiss=\"modal\" onClick = {() => this.handleOnClick(data.name)}>{data.name}</button></td>\n                      <td>{data.schedule}</td>\n                      <td>{data.nextSchedule}</td>\n                      <td>{data.schduleRemainingTime}</td>\n                      <td>\n                          <button type=\"button\" class=\"btn btn-secondary ml-2\" data-toggle=\"modal\" onClick = {() => this.show_modal(data.props)}>\n                            Properties\n                          </button>\n                          <div class=\"modal fade\" id=\"jobListeModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                            <div class=\"modal-dialog\" role=\"document\">\n                              <div class=\"modal-content\">     \n                                <div class=\"modal-header\">\n                                  <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                  <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                    <span aria-hidden=\"true\">&times;</span>\n                                  </button>\n                                </div>\n                                <div class=\"modal-body\">\n                                </div>\n                                <div class=\"modal-footer\">\n                                  <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n\n                          <input type=\"button\" value=\"Run\" class=\"btn btn-warning ml-2\" onClick = {() => {\n                                 this.run_etl_job(data.name).then(({run_job}) => {\n                                  this.set_notification(true)\n                                  var data =  JSON.parse(JSON.stringify(run_job))\n                                  if(data !== null){\n                                      props = JSON.stringify(data[\"props\"]) \n                                      var job_name = JSON.stringify(data[\"name\"]) \n                                      this.set_job_deails(job_name,props)\n                                  // } else {\n                                  //     this.setState(prevState => ({\n                                  //       is_error: true\n                                  //     }))\n                                  // }\n                                 }});     \n                         }}  />\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n            </table>\n      </div>     \n    );\n  }\n}\n// export default JobList;\nexport default withRouter(JobList)\n","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n\nimport '../css/App.css'\n\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\n\nclass LoaderComponent extends React.Component {\n  constructor(props){\n    super(props); \n  }\n\n  render(){\n    return (\n        <div class=\"d-flex justify-content-center\">\n           <div class=\"spinner-border m-5\" role=\"status\">\n             <span class=\"sr-only\">Loading...</span>\n           </div>\n        </div>\n    );\n  }\n}\nexport default LoaderComponent;\n","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport $ from 'jquery';\nimport LoaderComponent from './LoaderComponent';\n\nclass StepRuns extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { \n      stepruns: [],\n      loader:false\n\n    }\n    \n  }\n\n  async fetchEtlFlowJobById(job_run_id) {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    this.setState(prevState => ({\n      loader: true\n    }))\n\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          query {\n            stepruns(job_run_id:    \\\"${job_run_id}\\\"){\n                job_run_id\n                step_name\n                properties\n                state\n                start_time\n                elapsed_time\n                step_type\n                step_run_id\n             }\n           }\n          `\n        }\n      )  \n    })\n\n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n\n    const {data} = await response.json();\n    this.setState(prevState => ({\n      loader: false\n    }))\n\n    return data;    \n  }\n\n  setInterval() {\n    this.timerID = setInterval(\n      () => this.fetchEtlFlowJobs(),\n      1000 * 1000\n    );\n  }\n \n  componentDidMount() {\n    this.fetchEtlFlowJobById(this.props.job_run_id).then(({stepruns}) => {\n      this.setState(prevState => ({\n        stepruns: stepruns\n      }))\n    })\n    // set Interval\n    this.setInterval();\n }\n\n componentWillUnmount() {\n  clearInterval(this.timerID);\n }\n \n show_modal(data)\n {\n   var props = ''\n   var data_jobruns = JSON.parse(data)\n\n   for(var key in data_jobruns) {\n   { \n       props  += \"<b>\"+ key + \"</b>\" +\"=\" + data_jobruns[key]+ \"<br></br>\"\n   }\n  {$(\"#stepRunModal .modal-body\").html(props)}\n  $(\"#stepRunModal\").modal();\n }\n}\n\nshow_step_run_state_modal(data)\n {\n  {$(\"#stepRunStateModal .modal-body\").html(data)}\n  $(\"#stepRunStateModal\").modal();\n }\n\n\n\n render(){\n   var step_run_id_flag = false\n   this.state.stepruns.map( item => {if(item.step_run_id !== \"\") step_run_id_flag = true})\n   var linked_jobs = ''\n   if(step_run_id_flag) {\n    linked_jobs = <th>Linked Job</th>\n   } else {\n    linked_jobs = \"\"\n   }\n\n   var remoteStep = [\"EtlFlowJobStep\",\"DPSparkJobStep\",\"ParallelETLStep\"];\n   if (this.state.loader){\n    return (\n      <div>\n        <LoaderComponent job_run_id={this.job_run_id}  set_job_run_state = {this.set_job_run_state} />\n      </div>\n    );\n   }\n   else{\n   return (\n     <div className=\"container-fluid\">\n         <table id=\"job runs\" class=\"table table-sm table-bordered\">\n           <thead class=\"thead-dark\">\n                 <tr>\n                   <th>Job Run Id</th>\n                   <th>Step Type</th>\n                   <th>Step Name</th>\n                   <th>Start Time</th>\n                   <th>Elapsed Time</th>\n                   <th>Status</th>\n                   <th>Properties</th> \n                   {linked_jobs}\n                   <th>\n                        <button className=\"btn btn-secondary btn-block\" onClick = {() => this.props.set_job_run_state()}>Back</button>\n                   </th>\n                 </tr>\n               </thead>\n                 <tbody>\n                 {this.state.stepruns.map( data => (\n                   <tr>\n                     <td>{data.job_run_id}</td>\n                     <td>{data.step_type}</td>\n                     <td>{data.step_name}</td>\n                     <td>{data.start_time}</td>\n                     <td>{data.elapsed_time}</td>\n                     <td>\n                     {(() => {\n                           if (data.state === \"pass\" || data.state == \"\" ) {\n                             return (\n                               <div>\n                                 <p className = \"text-success\">{data.state}</p>\n                               </div>\n                             )\n                           } else if (data.state === \"started\" || data.state == \"running\" ) {\n                             return (\n                               <div>\n                                 <p className = \"text-warning\">{data.state}</p>\n                               </div>\n                             )\n                           } else {\n                            return (\n                              <div>\n                                 <button type=\"button\" class=\"btn btn-danger btn btn-sm\" data-toggle=\"modal\" onClick = {() => this.show_step_run_state_modal(data.state)}>\n                                     Error\n                                 </button>\n                            \n                                 <div class=\"modal fade\" id=\"stepRunStateModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                                   <div class=\"modal-dialog\" role=\"document\">\n                                     <div class=\"modal-content\">\n                                       <div class=\"modal-header\">\n                                         <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                         <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                           <span aria-hidden=\"true\">&times;</span>\n                                         </button>\n                                       </div>\n                                       <div class=\"modal-body\">\n                                       </div>\n                                       <div class=\"modal-footer\">\n                                         <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                       </div>\n                                     </div>\n                                   </div>\n                                 </div>\n                              </div>\n                            )\n                           }\n                         })()}\n                     </td>\n                     <td>\n                          <button type=\"button\" class=\"btn btn-secondary btn-sm\" data-toggle=\"modal\" onClick = {() => this.show_modal(data.properties)}>\n                            Properties\n                          </button>\n                          \n                          <div class=\"modal fade\" id=\"stepRunModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                            <div class=\"modal-dialog\" role=\"document\">\n                              <div class=\"modal-content\">\n                                <div class=\"modal-header\">\n                                  <h5 class=\"modal-title\" id=\"exampleModalLabel\">Step Properties</h5>\n                                  <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                    <span aria-hidden=\"true\">&times;</span>\n                                  </button>\n                                </div>\n                                <div class=\"modal-body\">\n                                </div>\n                                <div class=\"modal-footer\">\n                                  <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                      </td>\n                     <td>\n                         {(() => {\n                            if (remoteStep.includes(data.step_type)) {\n                              return (\n                                <input type=\"button\" value=\"Check Progress\" class=\"btn btn-secondary btn-sm\" onClick = {() => this.fetchEtlFlowJobById(data.step_run_id).then(({stepruns}) => {\n                                    this.setState(prevState => ({\n                                      stepruns: stepruns\n                                    }))\n                                  })}/>\n                              )\n                            } else {\n                              return (\n                                <div></div>\n                              )\n                            }\n                          })()}\n                    </td>\n                   </tr>\n                 ))}\n                 </tbody>\n            </table>\n          </div>\n    );\n    }\n  }\n}\nexport default StepRuns;     ","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery/dist/jquery.min.js';\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport StepRuns from './StepRuns';\nimport $ from 'jquery';\nimport '../css/App.css'\nimport { withRouter } from 'react-router'\n\nimport LoaderComponent from './LoaderComponent';\n\nclass JobRuns extends React.Component {\n  constructor(props){\n    super(props); \n    this.job_run_id = ''\n    this.filterOperation = [\"IN\",\"NOT IN\"]\n    this.state  = { \n      jobruns: [],\n      filter: '',\n      job_name: '',\n      filter_start_date: '',\n      filter_end_date: '',\n      paginationValue: 0,\n      stepRun: false,\n      loader:false\n        }\n    this.set_job_run_state = this.set_job_run_state.bind(this);    \n\n  }\n\n  async fetchEtlFlowJobs() {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    const limit = 10;\n    const offset = this.state.paginationValue;\n\n    var query = ` query { jobruns(limit: ${limit} , offset: ${offset}){ job_run_id job_name properties state start_time elapsed_time job_type is_master}}`\n    \n    if(this.props.match.params.job_name !== undefined){\n      query = ` query { jobruns(limit: ${limit} , offset: ${offset} ,filter: \"IN\", jobName: \\\"${this.props.match.params.job_name}\\\"  )\n              { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n\n      if (this.state.filter_end_date !== \"\") {\n        query = ` query { jobruns(limit: ${limit} , offset: ${offset},  startTime: \\\"${this.state.filter_start_date}\\\", endTime: \\\"${this.state.filter_end_date}\\\",filter: \"IN\", jobName: \\\"${this.props.match.params.job_name}\\\"  )\n        { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n      } \n\n      this.setState(prevState => ({\n        filter: 'IN',\n        job_name: this.props.match.params.job_name\n      }))\n\n    } else {\n      if (this.state.filter_end_date !== \"\" && this.state.filter !== \"\" ) {\n        query = ` query { jobruns(limit: ${limit} , offset: ${offset},  startTime: \\\"${this.state.filter_start_date}\\\", endTime: \\\"${this.state.filter_end_date}\\\",filter: \\\"${this.state.filter}\\\", jobName: \\\"${this.state.job_name}\\\"  )\n        { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n      } else if (this.state.filter_end_date !== \"\" ){\n        query = ` query { jobruns(limit: ${limit} , offset: ${offset},  startTime: \\\"${this.state.filter_start_date}\\\", endTime: \\\"${this.state.filter_end_date}\\\")\n        { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n      } else if (this.state.filter !== \"\" && this.state.job_name !== \"\") {\n        query = ` query { jobruns(limit: ${limit} , offset: ${offset}, filter: \\\"${this.state.filter}\\\", jobName: \\\"${this.state.job_name}\\\"  )\n        { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n      } else if (this.state.filter === \"\" && this.state.job_name !== \"\" ) {\n        query = ` query { jobruns(limit: ${limit} , offset: ${offset} ,filter: \"IN\", jobName: \\\"${this.state.job_name}\\\"  )\n        { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n      } else {\n        query = ` query { jobruns(limit: ${limit} , offset: ${offset}){ job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n      }\n    }\n\n    this.setState(prevState => ({\n      loader: true\n    }))\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: query\n        }\n      )  \n    })\n\n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n\n    const {data} = await response.json();\n    this.setState(prevState => ({\n      loader: false\n    }))\n\n    return data;   \n  }\n\n  setInterval() {\n    this.timerID = setInterval(\n      () => this.fetchEtlFlowJobs(),\n      1000 * 1000\n    );\n  }\n \n  componentDidMount() {\n    this.set_jobruns()\n    this.setInterval();\n }\n\n componentWillUnmount() {\n  clearInterval(this.timerID);\n }\n\n set_job_run_state() {\n  this.setState(state => ({\n    stepRun: !state.stepRun\n  }))\n }\n \n set_jobruns(){\n  this.fetchEtlFlowJobs().then(({jobruns}) => {\n    this.setState(prevState => ({\n      jobruns: jobruns\n    }))\n  })\n }\n\n set_job_name() {\n  this.setState(prevState => ({\n    job_name: document.getElementById(\"exampleDataList\").value\n  }))\n }\n\n set_filter_start_date() {\n  this.setState(prevState => ({\n    filter_start_date: document.getElementById(\"start_date\").value\n  }))\n }\n\n set_filter_end_date() {\n  this.setState(prevState => ({\n    filter_end_date: document.getElementById(\"end_date\").value\n  }))\n }\n\n show_modal(data)\n {\n   var props = ''\n   var data_jobruns = JSON.parse(data)\n\n   for(var key in data_jobruns) {\n   { \n       props  += \"<b>\"+ key + \"</b>\" +\"=\" + data_jobruns[key]+ \"<br></br>\"\n   }\n  {$(\"#jobRunModal .modal-body\").html(props)}\n  $(\"#jobRunModal\").modal();\n }\n}\n\nasync set_initial_state(){\n  this.setState(prevState => ({  \n    filter: '',\n    job_name: '',\n    filter_start_date: '',\n    filter_end_date: '',\n    paginationValue: 0,\n  }), () => this.set_jobruns())\n}\n\nshow_job_run_state_modal(data)\n {\n  {$(\"#jobRunStateModal .modal-body\").html(data)}\n  $(\"#jobRunStateModal\").modal();\n }\n\n render(){\n   \n   var button = ''\n   var filter_button_name = '' \n   var filter_button_job_name = '' \n   var filter_start_date = ''  \n   var filter_end_date = ''  \n   var filter_back_button = ''\n   //Code for adding pagination element\n  if (this.state.paginationValue === 0) {\n    button = <li class=\"page-item disabled\">\n    <input type=\"button\" value=\"Previous\" class=\"page-link btn btn-secondary btn-sm\"/></li>\n  } else {\n    button =  <li class=\"page-item\">\n    <input type=\"button\" value=\"Previous\" class=\"page-link btn btn-secondary btn-sm\" onClick = {() => {\n             this.setState(prevState => ({\n              paginationValue: this.state.paginationValue  -   10\n            }))\n            this.fetchEtlFlowJobs(this.state.paginationValue - 10).then(({jobruns}) => {\n              this.setState(prevState => ({\n                jobruns: jobruns\n              }))\n            }) \n    }}/></li>\n  } \n\n   //Code for adding button name\n  if (this.state.filter !== '') {\n    filter_button_name = this.state.filter\n  }else {\n    filter_button_name = \"Add Filter\"\n  } \n\n   //Code for adding button name\n  if (this.state.job_name !== '') {\n     filter_button_job_name = this.state.job_name\n  }else {\n     filter_button_job_name = \"Type to search\"\n  } \n\n  if (this.state.filter_start_date !== '') {\n   filter_start_date = this.state.filter_start_date\n  }else {\n    filter_start_date = \"Start Date\"\n  } \n\n  if (this.state.filter_end_date !== '') {\n    filter_end_date = this.state.filter_end_date\n  }else {\n    filter_end_date = \"End Date\"\n  } \n\n  if(this.props.match.params.job_name !== undefined){\n    filter_back_button= <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                          this.props.history.push('/')\n                         }} >\n                        Back\n                        </button>\n  }\n\n  if(this.state.stepRun) {\n     return (\n       <div>\n         <StepRuns job_run_id={this.job_run_id}  set_job_run_state = {this.set_job_run_state} />\n       </div  >\n     );\n   }else if (this.state.loader){\n    return (\n      <div>\n        <LoaderComponent job_run_id={this.job_run_id}  set_job_run_state = {this.set_job_run_state} />\n      </div>\n    );\n   }\n   else{\n   return (\n     <div className=\"container-fluid\">\n       <h3>{this.state.loader}</h3>\n       <ul class = \"pagination justify-content-center\">\n         <div class=\"dropdown\">\n            <button class=\"btn btn-light dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n               {filter_button_name}\n            </button>\n            <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n              { this.filterOperation.map ( filter => (\n                   <a class=\"dropdown-item\">\n                      <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                           this.setState(prevState => ({\n                               filter: filter\n                       }))}}> {filter} </button>\n                   </a>\n              ))}\n            </div>\n         </div>\n         <div className =\"form-inline float-right\">\n             <div className=\"mb-1\">\n             <input type=\"text\"\n                        className=\"form-control input-sm\"\n                        list = \"datalistOptions\"\n                        id = \"exampleDataList\"\n                        placeholder = {filter_button_job_name}\n                        onChange={e => this.set_job_name()}></input>      \n             </div>\n             <datalist id = \"datalistOptions\">\n               {this.props.jobs.map( data => (\n                 <option value = {data.name}></option>\n               ))}\n             </datalist> \n         </div>\n         <div class = \"form-inline float-right\">\n              <div class = \"mb-1\"> \n                  <input type=\"date\"\n                         className=\"form-control input-sm\"\n                         placeholder={filter_start_date}\n                         id = \"start_date\"\n                         onChange={e => this.set_filter_start_date()}\n                   ></input>\n              </div>\n              <div class = \"mb-1\"> \n                  <input type=\"date\"\n                         className=\"form-control input-sm\"\n                         placeholder={filter_end_date}\n                         id = \"end_date\"\n                         onChange={e => this.set_filter_end_date()}\n                   ></input> \n              </div>    \n         </div> \n         <button class= \"btn btn btn-sm\" type=\"button \" onClick= {() => {\n            this.set_initial_state()\n            }}>\n            Clear\n         </button>\n         <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                this.set_jobruns()\n             }} >\n            Refresh\n         </button>\n         {filter_back_button}\n       </ul>\n       <table id=\"jobruns\" class=\"table table-sm table-bordered\">\n           <thead class=\"thead-dark\">\n                 <tr>\n                   <th>Job Name</th>\n                   <th>Job Type</th>\n                   <th>Job Start Time</th>\n                   <th>Elapsed Time</th>\n                   <th>Job Status</th>\n                   <th>Job Properties</th>\n                   <th>Step Properties</th>\n                 </tr>\n               </thead>\n                 <tbody>\n                 {this.state  .jobruns.map( data => (\n                   <tr>\n                     <td>{data.job_name}</td>\n                     <td>{data.job_type}</td>\n                     <td>{data.start_time}</td>\n                     <td>{data.elapsed_time}</td>\n                     <td>\n                     {(() => {\n                           if (data.state === \"pass\" || data.state == \"\" ) {\n                             return (\n                               <div>\n                                 <p className = \"text-success\">{data.state}</p>\n                               </div>\n                             )\n                           } else if (data.state === \"started\" || data.state == \"running\" ) {\n                             return (\n                               <div>\n                                 <p className = \"text-warning\">{data.state}</p>\n                               </div>\n                             )\n                           } else {\n                            return (\n                              <div>\n                                 <button type=\"button\" class=\"btn btn-danger btn btn-sm\" data-toggle=\"modal\" onClick = {() => this.show_job_run_state_modal(data.state)}>\n                                     Error\n                                 </button>\n                            \n                                 <div class=\"modal fade\" id=\"jobRunStateModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                                   <div class=\"modal-dialog\" role=\"document\">\n                                     <div class=\"modal-content\">\n                                       <div class=\"modal-header\">\n                                         <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                         <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                           <span aria-hidden=\"true\">&times;</span>\n                                         </button>\n                                       </div>\n                                       <div class=\"modal-body\">\n                                       </div>\n                                       <div class=\"modal-footer\">\n                                         <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                       </div>\n                                     </div>\n                                   </div>\n                                 </div>\n                              </div>\n                            )\n                           }\n                         })()}\n                     </td>\n                     <td>\n                         <button type=\"button\" class=\"btn btn-secondary btn-sm\" data-toggle=\"modal\" onClick = {() => this.show_modal(data.properties)}>\n                           Properties\n                         </button>\n                         \n                         <div class=\"modal fade\" id=\"jobRunModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                           <div class=\"modal-dialog\" role=\"document\">\n                             <div class=\"modal-content\">\n                               <div class=\"modal-header\">\n                                 <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                 <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                   <span aria-hidden=\"true\">&times;</span>\n                                 </button>\n                               </div>\n                               <div class=\"modal-body\">\n                               </div>\n                               <div class=\"modal-footer\">\n                                 <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                               </div>\n                             </div>\n                           </div>\n                         </div>\n                     </td>\n                     <td><input type=\"button\" value=\"Step Properties\" class=\"btn btn-secondary btn-sm\" onClick = {() => {\n                       this.set_job_run_state()\n                       this.job_run_id =  data.job_run_id\n                     }}/></td>\n                   </tr>\n                 ))}\n                 </tbody>\n            </table>  \n            <nav aria-label=\"Page navigation example\">\n               <ul class=\"pagination justify-content-center\">\n                 {button}\n                 <li class=\"page-item\"><input type=\"button\" value=\"Next\" class=\"page-link btn btn-secondary btn-sm\" onClick = {() => {\n                   this.setState(prevState => ({\n                     paginationValue: this.state.paginationValue  + 10\n                   }))\n                   this.fetchEtlFlowJobs(this.state.paginationValue + 10).then(({jobruns}) => {\n                    this.setState(prevState => ({  \n                      jobruns: jobruns\n                    }))\n                   })\n                   }}/></li>\n               </ul>\n         </nav>\n          </div>\n   );\n  }\n }\n}\n// export default JobRuns;     \nexport default withRouter(JobRuns)\n","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n\n\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport $ from 'jquery';\nimport LoaderComponent from './LoaderComponent';\n\nclass Metrics extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { metrics: [],\n      loader:false\n    }\n  }\n\n  async fetchEtlFlowMetrics() {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    this.setState(prevState => ({\n      loader: true\n    }))\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          query {\n            metrics {\n                active_jobs\n                active_subscribers\n                etl_jobs\n                cron_jobs\n                used_memory\n                free_memory\n                total_memory\n                max_memory\n                build_time\n              }\n           }\n          `\n        }\n      )  \n    })\n\n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n    \n    const {data} = await response.json();\n    this.setState(prevState => ({\n      loader: false\n    }))\n\n    return data;    \n  }\n\n  componentDidMount() {\n    //calling getInfo api\n    this.fetchEtlFlowMetrics().then(({metrics}) => {\n        this.setState(prevState => ({\n            metrics: metrics\n        }))\n      })\n   }\n\n\n  render(){\n    if (this.state.loader){\n      return (\n        <div>\n          <LoaderComponent job_run_id={this.job_run_id}  set_job_run_state = {this.set_job_run_state} />\n        </div>\n      );\n     }\n    else{\n    return (\n      <div class=\"container\">\n          <ul class = \"pagination justify-content-center\">\n             <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                   this.fetchEtlFlowMetrics().then(({metrics}) => {\n                    this.setState(prevState => ({\n                        metrics: metrics\n                    }))\n                  })\n                }} >\n               Refresh\n             </button>\n         </ul>\n         <ul class=\"list-group \">\n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Active Jobs</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.active_jobs}</span>\n            </li>\n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Active Subscribers</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.active_subscribers}</span>\n            </li>\n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Etl Jobs</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.etl_jobs}</span>\n            </li>\n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Cron Jobs</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.cron_jobs}</span>\n            </li>  \n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Used Memory</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.used_memory}</span>\n            </li> \n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Free Memory</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.free_memory}</span>\n            </li>  \n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Total Memory</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.total_memory}</span>\n            </li>\n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Max Memory</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.max_memory}</span>\n            </li> \n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Build Time</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.build_time}</span>\n            </li>   \n         </ul>\n      </div>     \n    );    \n   }      \n  }\n}\nexport default Metrics;\n","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n  \nimport { withRouter } from 'react-router'\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport $ from 'jquery';\nimport LoaderComponent from './LoaderComponent';\n\nclass QueueStats extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { queueStats: [],\n      loader:false\n    }\n  }\n\n  async fetchEtlFlowQueueStats() {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    this.setState(prevState => ({\n      loader: true\n    }))\n\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          query {\n            queueStats {\n              name \n              details\n              submitted_from\n              execution_time\n              }\n           }\n          `\n        }\n      )  \n    })\n\n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n    \n    const {data} = await response.json();\n    this.setState(prevState => ({\n      loader: false\n    }))\n\n    return data;    \n  }\n\n  componentDidMount() {\n    //calling getInfo api\n    this.fetchEtlFlowQueueStats().then(({queueStats}) => {\n        this.setState(prevState => ({\n          queueStats: queueStats\n        }))\n      })\n   }\n\n   show_modal(data)\n  {\n    var props = ''\n    var queue = JSON.parse(data)\n \n    for(var key in queue) {\n    { \n        props  += \"<b>\"+ key + \"</b>\" +\"=\" + queue[key]+ \"<br></br>\"\n    }\n\n   {$(\"#queueStats .modal-body\").html(props)}\n   $(\"#queueStats\").modal();\n  }\n}\n\n\n  render(){\n    if (this.state.loader){\n      return (\n        <div>\n          <LoaderComponent job_run_id={this.job_run_id}  set_job_run_state = {this.set_job_run_state} />\n        </div>\n      );\n     }\n    else{ \n    return (\n      <div class=\"container\">\n        <ul class = \"pagination justify-content-center\">\n             <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                    this.fetchEtlFlowQueueStats().then(({queueStats}) => {\n                      this.setState(prevState => ({\n                        queueStats: queueStats\n                      }))\n                  })\n                }} >\n               Refresh\n             </button>\n         </ul>\n          <table id=\"joblist\" class=\"table table-sm table-bordered\">\n            <thead class=\"thead-dark\">\n                  <tr>\n                    <th>Job Name</th>\n                    <th>Submitted From</th>\n                    <th>Execution Time</th>\n                    <th>Details</th>\n                  </tr>\n                </thead>\n                  <tbody>\n                  {this.state.queueStats.map( (data) => (\n                    <tr>\n                      <td>{data.name  }</td>\n                      <td>{data.submitted_from}</td>\n                      <td>{data.execution_time}</td>\n\n                      <td>\n                          <button type=\"button\" class=\"btn btn-secondary btn-sm\" data-toggle=\"modal\" onClick = {() => this.show_modal(data.details)}>\n                            Stats\n                          </button>\n                          \n                          <div class=\"modal fade\" id=\"queueStats\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                            <div class=\"modal-dialog\" role=\"document\">\n                              <div class=\"modal-content\">\n                                <div class=\"modal-header\">\n                                  <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                  <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                    <span aria-hidden=\"true\">&times;</span>\n                                  </button>\n                                </div>\n                                <div class=\"modal-body\">\n                                </div>\n                                <div class=\"modal-footer\">\n                                  <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n            </table>\n      </div>     \n    ); \n    }         \n  }\n}\nexport default withRouter(QueueStats)\n// export default QueueStats;\n","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery/dist/jquery.min.js';\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\n\nclass CurrentTime extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { currentime: '' }    \n  }\n\n  async fetchEtlFlowJobs() {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          query {\n            currentime {\n                current_time\n             }\n           }\n          `\n        }\n      )  \n    })\n    const {data} = await response.json();\n    return data;    \n  }\n\n\n  componentDidMount() {\n    this.fetchEtlFlowJobs().then(({currentime}) => {\n      this.setState(prevState => ({\n        currentime: currentime.current_time\n      }))\n    })\n }\n  \n render(){\n    return (\n         <li className =\"nav-item\">\n             <a className = \"nav-link disabled\">\n                {this.state.currentime} \n             </a>\n         </li>\n    );\n  }\n}\nexport default CurrentTime;","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n\nimport 'chartist/dist/chartist.min.css';\nimport 'chartist/dist/chartist.js';\n\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\nimport ChartistGraph from 'react-chartist';\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n\nimport 'chartist/dist/chartist.min.css';\nimport 'chartist/dist/chartist.js';\n\n\n// const client = new WebSocket('wss://devetlflow.startv.com/ws/etlflow/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoibWludF9hZG1pbiIsICJyb2xlIjoiYWRtaW4ifQ.gwiUv0vss-3gX5rkPOGTdJ_81n5N3W7Hv1yeGsJj5g8')\n\nvar ws_url = new URL(\"/ws/etlflow\" , window.location.href)\nws_url.protocol = ws_url.protocol.replace(\"http\",\"ws\")\n\nclass MemoryInfo extends React.Component {\n  constructor(props){\n    super(props); \n    const GRAPHQL_URL = '/ws/etlflow'\n    this.client = new WebSocket(ws_url + \"/\" + localStorage.getItem('Authorization'))\n    this.state  = { \n      messages:''\n    }\n  }\n\n  componentDidMount() {\n    this.client.onopen = () => {\n    // on connecting, do nothing but log it to the console\n    console.log(' ws connected')\n    }   \n\n    this.client.onmessage = evt => {\n    // listen to data sent from the websocket server\n    const message = evt.data\n    this.addMessage(message)\n    }\n  }\n\n  addMessage = message =>\n    this.setState(prevState => ({\n      messages: message\n  }))\n\n\n  render(){\n    var seriesVals = [];\n    var labelsVals = [];\n\n    this.state.messages.split(\"</br>\").map( data => (\n      labelsVals.push(data.split(\":\")[0].replace(\"\\n\",\"\")),\n      seriesVals.push(data.split(\":\")[1])\n    ))\n    \n    var data = {\n      labels: labelsVals,\n      series: [seriesVals]\n    };\n\n    var options = {\n      // axisX: {\n      //   labelInterpolationFnc: function(value, index) {\n      //     return index % 2 === 0 ? value : null;\n      //   }\n      // }\n    };\n\n    var type = 'Line'\n\n    return (\n    <div class=\"container\">\n    <div>\n            <ul class=\"list-group \">\n            {this.state.messages.split(\"</br>\").map( data => (\n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>{data.split(\":\")[0]}</b>\n              <span class=\"badge badge-secondary badge-pill\">{data.split(\":\")[1]}</span>\n            </li> ))}\n            </ul>\n     </div> \n     <br/>\n     <div class=\"container-fluid\">\n        <ChartistGraph data={data} options={options} type={type} />\n     </div> \n     </div>\n    ); \n  }        \n}\n\nexport default MemoryInfo;\n","import React from 'react';\nimport JobList from './JobList';\nimport JobRuns from './JobRuns';\n\nimport Metrics from './Metrics';\nimport QueueStats from './QueueStats';\n\nimport jwt_decode from \"jwt-decode\";\nimport LoaderComponent from './LoaderComponent';\nimport CurrentTime from './CurrentTime';\nimport MemoryInfo from './MemoryInfo';\nimport { withRouter } from 'react-router'\n\nimport '../css/App.css'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nclass Routes extends React.Component {\n\n  constructor(props){\n    super(props); \n    this.state  = {\n      jobs: [],\n      metrics: [],\n      user: '',\n      loader:false\n\n    }\n  }\n\n  async fetchEtlFlowJobs() {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    this.setState(prevState => ({\n      loader: true\n    }))\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          query {\n              jobs {\n                name \n                schedule\n                props {key value} \n                nextSchedule \n                schduleRemainingTime \n                is_active \n                max_active_runs\n             }\n           }\n          `\n        }\n      )  \n    })\n\n    if (response.status === 403) {\n      this.remove_token()\n    } \n\n    const {data} = await response.json();\n    this.setState(prevState => ({\n      loader: false\n    }))\n\n    return data;    \n  }\n\n  setInterval() {\n    this.timerID = setInterval(\n      () => this.fetchEtlFlowJobs(),\n      1000 * 1000\n    );\n  }\n\n  fetchEtlFlowUserDetails() {\n    const token = localStorage.getItem('Authorization')\n    var decoded = JSON.parse(JSON.stringify(jwt_decode(token)));\n    this.setState({\n      user: decoded[\"user\"]\n    })\n  }\n\n  componentDidMount() {\n\n    //calling jobs api\n    this.fetchEtlFlowJobs().then(({jobs}) => {\n      this.setState(prevState => ({\n        jobs: jobs\n      }))\n    })\n\n    this.fetchEtlFlowUserDetails()\n }\n\n get_etl_jobs = () => {\n  this.fetchEtlFlowJobs().then(({jobs}) => {\n    this.setState(prevState => ({\n      jobs: jobs\n    }))\n  })  \n }\n\n remove_token() {\n  localStorage.removeItem(\"Authorization\")\n  this.props.doLogout(\"\")\n}\n\n  render(){\n    if (this.state.loader){\n      return (\n        <div>\n          <LoaderComponent job_run_id={this.job_run_id}  set_job_run_state = {this.set_job_run_state} />\n        </div>\n      );\n     }\n    else{\n    return (\n      <Router>\n        <nav className = \"navbar navbar-expand-lg navbar-dark bg-dark mb-3\">\n            <ul className = \"nav navbar-nav w-100\">\n                <li className = \"nav-item nav-link\" ><Link to=\"/\">Jobs</Link> </li>\n                <li className = \"nav-item nav-link\" ><Link to=\"/JobRuns\">Job Runs</Link> </li>\n                <li className = \"nav-item nav-link\" ><Link to=\"/getInfo\">Metrics</Link> </li>\n                <li className = \"nav-item nav-link\" ><Link to=\"/getQueueStats\">Job Logs</Link> </li>\n                <li className = \"nav-item nav-link\" ><Link to=\"/getMemoryInfo\">Memory Info</Link> </li>\n\n            </ul>\n            <div class=\"navbar-collapse collapse w-100 order-3 dual-collapse2\">\n              <ul class=\"nav justify-content-end w-100\">\n              <CurrentTime/>\n                <li class=\"nav-item dropdown\">\n\t                <a class=\"nav-link  dropdown-toggle\" href=\"#\" data-toggle=\"dropdown\">{this.state.user}</a>\n\t                  <ul class=\"dropdown-menu\">\n\t\t                  <li>\n                        <a class=\"dropdown-item\" href=\"https://github.com/tharwaninitin/etlflow\">\n                           Git Hub \n                        </a>\n                      </li>\n                      <li>\n                        <a class=\"dropdown-item\" href=\"https://tharwaninitin.github.io/etlflow/site/\">\n                          Docs\n                        </a>\n                      </li>\n                      <li>\n                        <a class=\"dropdown-item\">\n                          <input type=\"button\" class=\"btn btn-secondary btn-sm\" value=\"LogOut\" onClick = {() => this.remove_token()}></input>\n                        </a>\n                      </li>\n\t                  </ul>\n\t              </li>\n              </ul>\n            </div>\n        </nav>\n        <Switch>\n          <Route exact path=\"/\" component={() => (<JobList jobs={this.state.jobs} get_etl_jobs = {this.get_etl_jobs} />)}/>\n          <Route path=\"/JobRuns/:job_name?\" component={() => (<JobRuns jobs={this.state.jobs}/>)}/>\n          <Route path=\"/getInfo\" component={() => (<Metrics/>)}/>\n          <Route path=\"/getQueueStats\" component={() => (<QueueStats/>)}/>\n          <Route path=\"/getMemoryInfo\" component={() => (<MemoryInfo/>)}/>\n\n        </Switch>\n      </Router>\n    );\n    }\n  }\n}\nexport default Routes;\n// export default withRouter(Routes)\n\n\n","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery/dist/jquery.min.js';\nimport jwt_decode from \"jwt-decode\";\n\n\nclass Login extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = {\n         user_name: '',\n         password: '',\n         token: '', \n         login: [],\n\n        }\n\n    this.login_validation = this.login_validation.bind(this);\n    this.set_login_user_name = this.set_login_user_name.bind(this);\n    this.set_login_password = this.set_login_password.bind(this);\n  }\n\n  async fetchLoginDetails(user_name,password) {\n    const GRAPHQL_URL = '/api/login'\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          mutation {\n            login (user_name: \\\"${user_name}\\\", password: \\\"${password}\\\") {\n                message \n                token\n             }\n           }\n          `\n         }\n      )  \n    })  \n    const {data} = await response.json();\n    return data;        \n  }\n\n login_validation() {\n    this.fetchLoginDetails(this.state.user_name,this.state.password).then(({login}) => {\n        var token_value = JSON.parse(JSON.stringify(login)).token\n        if(token_value !== \"\")\n        {\n            localStorage.setItem('Authorization', token_value);   \n            this.props.doLogin(token_value)\n            this.setState(prevState => ({\n                token: token_value\n              }))\n        }\n        else \n        {\n            alert(\"Invalid User\")\n        }\n    })   \n  } \n\n  set_login_user_name() {\n    this.setState(prevState => ({\n        user_name: document.getElementById(\"user_name\").value\n      }))\n  }\n\n  set_login_password() {\n    this.setState(prevState => ({\n        password: document.getElementById(\"password\").value\n      }))\n  }\n\n  render(){\n    return (\n    <div className=\"main\" align=\"center\">\n         <nav className = \"navbar navbar-expand-lg navbar-dark bg-dark mb-3\">\n             <ul className = \"nav navbar-nav w-50\">\n                 <li className = \"nav-item nav-link\">EtlFlow</li>\n             </ul>\n         </nav>   \n           <div className=\"col-md-3\">\n            <div className=\"login-form \">\n                <form id=\"form_login\" className = \"text-center border border-dark p-5\" onSubmit={(e) => {this.login_validation(); e.preventDefault();}  }>\n                    <p className = \"h4 mb-4\">EtlFlow Login</p>\n                    <div className=\"form-group\">\n                        <input type=\"text\"\n                         className=\"form-control\" \n                         aria-describedby=\"UsernameHelp\"\n                         placeholder=\"Username\"\n                         id=\"user_name\"\n                         onChange={e => this.set_login_user_name()}></input>\n                    </div>\n                    <div className=\"form-group\">\n                        <input\n                         type=\"password\"\n                         className=\"form-control\"\n                         aria-describedby=\"PasswordHelp\"\n                         placeholder=\"Password\"\n                         id=\"password\"\n                         onChange={e => this.set_login_password()}></input>\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-secondary btn-block\">Submit</button>\n                </form>   \n            </div>\n        </div>\n    </div>\n    );\n  }\n}\nexport default Login;","import React from 'react';\n//Bootstrap and jQuery libraries\nimport Routes from './components/Routes';\nimport LoginComponent from './components/Login';\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props);\n\n    this.state = {\n      token: '',\n    }\n\n    this.doLogin = this.doLogin.bind(this)\n    this.doLogout = this.doLogout.bind(this)\n\n  }\n\n  doLogin(args_token,args_user) {\n    this.setState({\n      token: args_token\n    })\n  }\n\n\n  doLogout(args_token) {\n    this.setState({\n      token: ''\n    })\n  }\n\n\n  render(){\n    if(localStorage.getItem(\"Authorization\") === null){\n      return (  \n          <div>\n            <LoginComponent doLogin = {this.doLogin}/>  \n          </div>\n      );\n    } else {\n      return (  \n        <div>\n          <Routes doLogout = {this.doLogin}/>  \n        </div>\n     );\n    }\n  }\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nwindow.login_url = \"/api/login\"\nwindow.url = \"/api/etlflow\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}