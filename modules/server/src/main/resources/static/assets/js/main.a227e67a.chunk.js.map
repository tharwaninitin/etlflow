{"version":3,"sources":["components/JobList.js","components/LoaderComponent.js","components/JobRuns.js","components/QueueStats.js","components/Metrics.js","components/CurrentTime.js","components/MemoryInfo.js","components/Credential.js","components/JobRunDetails.js","components/Routes.js","components/Login.js","App.js","index.js"],"names":["JobList","props","state","jobs","notification","run_job_props","job_name","errors","is_error","is_active","values","keys","a","token","localStorage","getItem","fetch","method","headers","body","JSON","stringify","query","response","status","removeItem","json","data","length","props_updated","replaceAll","this","setState","prevState","loader","parse","run_job","set_job_error_deails","$","DataTable","job_properties","map","key","value","html","modal","history","push","el","i","class","type","placeholder","onChange","set_run_job_keys","bind","set_run_job_values","onClick","remove_props","event","target","splice","final_props","run_etl_job","then","set_notification","set_job_deails","notification_var","role","message","data-dismiss","aria-label","aria-hidden","replace","get_etl_jobs","id","className","aria-describedby","data-toggle","defaultChecked","e","updateJobActiveState","name","update_job_state","handleOnClick","schedule","nextSchedule","schduleRemainingTime","show_modal","aria-labelledby","data-target","tabindex","create_ui","add_props","submit_run_job","React","Component","withRouter","LoaderComponent","JobRuns","job_run_id","filterOperation","jobruns","filter","filter_start_date","filter_end_date","paginationValue","limit","offset","undefined","match","params","timerID","setInterval","fetchEtlFlowJobs","set_jobruns","clearInterval","document","getElementById","data_jobruns","job_id","button","filter_button_name","filter_button_job_name","filter_back_button","aria-haspopup","aria-expanded","list","set_job_name","set_filter_start_date","set_filter_end_date","set_initial_state","job_type","start_time","elapsed_time","show_job_run_state_modal","properties","QueueStats","queueStats","fetchEtlFlowQueueStats","queue","set_job_run_state","submitted_from","execution_time","details","CurrentTime","currentime","current_time","ws_url","URL","window","location","href","protocol","ws","WebSocket","MemoryInfo","addMessage","messages","jobLogs","metrics","limitOperation","options","low","showArea","showPoint","close_ws","close","innerText","console","log","onopen","onmessage","evt","onclose","used_memory_data","series","free_memory_data","total_memory_data","used_memory_chart","Chartist","Line","free_memory_chart","total_memory_chart","updateUsedMemoryChart","getUsedMemoryData","updateFreeMemoryChart","getFreeMemoryData","updateTotalMemoryChart","getTotalMemoryData","Bar","labels","seriesBarDistance","axisX","axisY","labelInterpolationFnc","scaleMinSpace","call","call_api","set_jobLogs","bar_chart","seriesVals","split","chart","point","shift","update","setTimeout","fetchEtlFlowMetrics","limit_button_name","aria-controls","job_name_labels","job_success","job_failed","success","failed","active_jobs","active_subscribers","etl_jobs","cron_jobs","build_time","Credential","credential","jdbc_values","aws_values","jdbc_keys","aws_keys","credential_name","credential_type","insert_credential_type","update_credentials","add_credentials","disabled","set_insert_values","set_values","set_credentials","fetchEtlFlowCreds","updateCreds","cred_name","insertCreds","set_add_cred_initial_state","filter_insert_button_name","create_add_cred_ui","valid_from","create_update_cred_ui","JobRunDetails","stepruns","fetchEtlFlowJobById","step_run_id_flag","item","step_run_id","linked_jobs","remoteStep","step_type","step_name","show_step_run_state_modal","includes","Routes","user","remove_token","decoded","jwt_decode","fetchEtlFlowUserDetails","doLogout","to","exact","path","component","Login","user_name","password","login","login_validation","set_login_user_name","set_login_password","fetchLoginDetails","token_value","setItem","doLogin","alert","align","onSubmit","preventDefault","App","args_token","args_user","login_url","url","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a227e67a.chunk.js","sourcesContent":["import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n\nimport '../css/App.css'\nimport { withRouter } from 'react-router'\n\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport $ from 'jquery';\n\nclass JobList extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { \n      jobs: [],\n      notification: false,\n      run_job_props: '',\n      job_name: '',\n      errors: [],\n      is_error: false,\n      is_active: true,\n      values: [],keys: []\n    }\n  }\n\n  async updateJobActiveState(job_name,state) {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n            mutation {\n              update_job_state (name:\\\"${job_name}\\\" ,state: ${state}){\n             }\n           }\n          `\n        }\n      )  \n    })\n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n    const {data} = await response.json();\n    return data;    \n  }\n\n  async run_etl_job(job_name,props) {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    var query =  `\n      mutation {\n        run_job (name:\\\"${job_name}\\\" ,props: [{ key: \\\"\\\", value: \\\"\\\" }]){\n          name\n          props {key value}\n      }\n      }\n    ` \n    if(props.length > 0) {\n      var props_updated = JSON.stringify(props).replaceAll(\"\\\"$\",\"\").replaceAll(\"$\\\"\",\"\")\n      query =  `\n      mutation {\n        run_job (name:\\\"${job_name}\\\" ,props: ${props_updated}){\n          name\n          props {key value}\n      }\n      }\n    ` \n    }\n    this.setState(prevState => ({\n      loader: true\n    }))\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: query\n        }\n      )  \n    })\n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n    this.setState(prevState => ({\n      loader: true\n    }))\n    const {data,errors} = await response.json();\n    if(JSON.parse(JSON.stringify(data.run_job)) !== null){\n      this.set_job_error_deails(false)\n    }\n    else {\n      this.set_job_error_deails(true,JSON.parse(JSON.stringify(errors)))\n    }\n    return data;    \n  }\n\n\n componentDidMount() {\n    $('#joblist').DataTable({\n      \"order\": [[ 1, \"asc\" ]]\n  });\n  }\n\n show_modal(data)\n  {\n    var job_properties = \"\" \n    { \n      data.map(  props =>\n        job_properties  += \"<b>\"+ props.key + \"</b>\" +\"=\" + props.value + \"<br></br>\"\n    )}\n\n   {$(\"#jobListeModal .modal-body\").html(job_properties)}\n   $(\"#jobListeModal\").modal();\n  }\n\n  set_notification(state){\n    this.setState(prevState => ({\n      notification: state\n    }))\n  }\n\n  set_job_deails(job_name,props){\n    this.setState(prevState => ({\n      job_name: job_name,\n      run_job_props: props                    \n      }))\n  }\n\n  set_job_error_deails(is_error,errors){\n    this.setState(prevState => ({\n      is_error: is_error,\n      errors: errors                    \n      }))\n  }\n\n  handleOnClick(job_name){    \n    this.props.history.push('/JobRuns/' + job_name)\n  }\n\n  create_ui(){\n    return this.state.values.map((el, i) => \n        <div key={i}>\n        <div class=\"row\">\n          <div class=\"col-xs-4 col-sm-4 col-md-4\">\n            <div class=\"form-group\">\n               <input class=\"form-control\" value={this.state.keys[i]} type=\"text\" placeholder=\"Type Key\" onChange={this.set_run_job_keys.bind(this, i)} />\n            </div>\n          </div>  \n          <div class=\"col-xs-7 col-sm-7 col-md-7\">\n            <div class=\"form-group\">\n              <input class=\"form-control\" value={el||''} type=\"text\"  placeholder=\"Type Value\" onChange={this.set_run_job_values.bind(this, i)} />\n            </div>\n          </div> \n         <div class=\"col-xs-3\">\n             <input type='button' class=\"btn btn-danger\" value='-' onClick={this.remove_props.bind(this, i)}/>\n         </div>\n        </div> \n        </div>            \n    )\n }\n\n\n set_run_job_values(i, event) {\n    let values = [...this.state.values];\n    values[i] =  event.target.value;\n    this.setState({ values });\n }\n\n set_run_job_keys(i, event) {\n  let keys = [...this.state.keys];\n  keys[i] =  event.target.value;\n  this.setState({ keys });\n}\n \n add_props(){\n   this.setState(prevState => ({ values: [...prevState.values, '']}))\n }\n \n remove_props(i){\n\n    let values = [...this.state.values];\n    values.splice(i,1); \n    this.setState({ values });\n\n    let keys = [...this.state.keys];\n    keys.splice(i,1);\n    this.setState({ keys });\n }\n\n submit_run_job(job_name) {\n\n   var final_props = []\n   var i;\n   for (i = 0; i < this.state.keys.length; i++) {\n    var props = {[\"$key$\"] : this.state.keys[i],[\"$value$\"] : this.state.values[i]}\n    final_props[i] =  props\n   }\n\n  var props = ''\n\n  this.run_etl_job(this.state.job_name,final_props).then(({run_job}) => {\n    this.set_notification(true)\n    var data =  JSON.parse(JSON.stringify(run_job))\n    if(data !== null){\n        props = JSON.stringify(data[\"props\"]) \n        var job_name = JSON.stringify(data[\"name\"]) \n        this.set_job_deails(job_name,props)\n   }});     \n }\n\n\n  render(){\n    var props = ''\n    var notification_var = \"\"\n    if(this.state.notification){\n      if(this.state.is_error) {\n         notification_var =\n         <div class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">\n            <h4 class=\"alert-heading\">Error while submitting job!</h4>\n            <p>{JSON.parse(JSON.stringify(this.state.errors)).map( (data) => data.message)}</p>\n            <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" onClick = {() => {this.set_notification(false)}}>\n               <span aria-hidden=\"true\">&times;</span>\n            </button>\n         </div>\n       } else {\n          notification_var =\n          <div class=\"alert alert-success alert-dismissible fade show\" role=\"alert\">\n             <h4 class=\"alert-heading\">Job {this.state.job_name.replace(/^\"(.*)\"$/, '$1')} submitted successfully!  </h4>\n             <p>{this.state.run_job_props}</p>\n             <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" onClick = {() => {this.set_notification(false)}}>\n                <span aria-hidden=\"true\">&times;</span>\n             </button>\n          </div>\n        }  \n    }\n  \n    return (\n          <div class=\"container-fluid\">\n          <div>{notification_var}</div>\n          <ul class = \"pagination justify-content-center\">\n             <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                      this.props.get_etl_jobs() \n                }} >\n               Refresh\n             </button>\n         </ul>\n          <table id=\"joblist\" class=\"table table-sm table-bordered\">\n            <thead class=\"thead-dark\">\n                  <tr>\n                    <th>Active/Inactive</th>\n                    <th>Job Name</th>\n                    <th>Schedule</th>\n                    <th>Next Schedule</th>\n                    <th>Schedule Remaining Time</th>\n                    <th>Action</th>\n                  </tr>\n                </thead>\n                  <tbody>\n                  {this.props.jobs.map( (data) => (\n                    <tr>\n                      <td>{(() => {\n                           if (this.state.is_active && data.is_active) {\n                             return (\n                               <div className = \"checkbox\">\n                                 <input type=\"checkbox\"\n                                     aria-describedby=\"UsernameHelp\"\n                                     data-toggle = \"toggle\"\n                                     defaultChecked\n                                     onClick={e => this.updateJobActiveState(data.name,false).then(({update_job_state}) => {\n                                      this.props.get_etl_jobs()\n                                      this.setState(prevState => ({  \n                                        is_active: false\n                                      }))\n                                    })}>\n                                 </input>\n                               </div>\n                             )\n                           } else {\n                            return (\n                              <div className = \"checkbox\">\n                                <input type=\"checkbox\"\n                                     aria-describedby=\"UsernameHelp\"\n                                     data-toggle = \"toggle\"\n                                     onClick={e => this.updateJobActiveState(data.name,true).then(({update_job_state}) => {\n                                      this.props.get_etl_jobs()\n                                      this.setState(prevState => ({  \n                                        is_active: true\n                                      }))\n                                    })}>\n                                 </input>\n                              </div>\n                            )\n                           }\n                         })()}\n                      </td>\n                        <td> <button type=\"button\" class=\"btn btn-link\" data-dismiss=\"modal\" onClick = {() => this.handleOnClick(data.name)}>{data.name}</button></td>\n                      <td>{data.schedule}</td>\n                      <td>{data.nextSchedule}</td>\n                      <td>{data.schduleRemainingTime}</td>\n                      <td >\n                      <div class='row'>\n                      <div class='col-xs-12 button-wrapper' class=\"inner\">\n                          <button type=\"button\" class=\"btn btn-secondary ml-2\" data-toggle=\"modal\" onClick = {() => this.show_modal(data.props)}>\n                            Properties\n                          </button>\n                          <div class=\"modal fade\" id=\"jobListeModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                            <div class=\"modal-dialog\" role=\"document\">\n                              <div class=\"modal-content\">     \n                                <div class=\"modal-header\">\n                                  <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                  <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                    <span aria-hidden=\"true\">&times;</span>\n                                  </button>\n                                </div>\n                                <div class=\"modal-body\">\n                                </div>\n                                <div class=\"modal-footer\">\n                                  <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n\n\n                          <div class=\"inner\">\n                             <button type=\"button\" class=\"btn btn-warning ml-2\" data-toggle=\"modal\" data-target=\"#exampleModal\" onClick = {() => \n                                      this.setState(prevState => ({\n                                          job_name: data.name\n                                  }))}>\n                                 Run\n                             </button>\n                             <div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                                <div class=\"modal-dialog\" role=\"document\">\n                                  <div class=\"modal-content\">\n                                    <div class=\"modal-header\">\n                                      <h5 class=\"modal-title\" id=\"exampleModalLabel\">Run Job</h5>\n                                      <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                        <span aria-hidden=\"true\">&times;</span>\n                                      </button>\n                                    </div>\n                                    <div class=\"modal-body\">\n                                       {this.create_ui()}        \n                                      <input type='button' class=\"btn btn-primary ml-2\" value='Add Properties' onClick={this.add_props.bind(this)}/>\n                                      <input type=\"button\" class=\"btn btn-primary ml-2\" value=\"Submit\" onClick = {() => this.submit_run_job()}/>\n                                    </div>\n                                    <div class=\"modal-footer\">\n                                      <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                    </div>\n                                  </div>\n                                </div>\n                              </div>\n                           </div>\n                           </div>\n                           </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n            </table>\n      </div>     \n    );\n  }\n}\n// export default JobList;\nexport default withRouter(JobList)\n","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n\nimport '../css/App.css'\n\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\n\nclass LoaderComponent extends React.Component {\n  constructor(props){\n    super(props); \n  }\n\n  render(){\n    return (\n        <div class=\"d-flex justify-content-center\">\n           <div class=\"spinner-border m-5\" role=\"status\">\n             <span class=\"sr-only\">Loading...</span>\n           </div>\n        </div>\n    );\n  }\n}\nexport default LoaderComponent;\n","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery/dist/jquery.min.js';\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport $ from 'jquery';\nimport '../css/App.css'\nimport { withRouter } from 'react-router'\n\nimport LoaderComponent from './LoaderComponent';\n\nclass JobRuns extends React.Component {\n  constructor(props){\n    super(props); \n    this.job_run_id = ''\n    this.filterOperation = [\"IN\",\"NOT IN\"]\n    this.state  = { \n      jobruns: [],\n      filter: '',\n      job_name: '',\n      filter_start_date: '',\n      filter_end_date: '',\n      paginationValue: 0,\n      loader:false\n        }\n\n  }\n\n  async fetchEtlFlowJobs() {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    const limit = 10;\n    const offset = this.state.paginationValue;\n\n    var query = ` query { jobruns(limit: ${limit} , offset: ${offset}){ job_run_id job_name properties state start_time elapsed_time job_type is_master}}`\n    \n    if(this.props.match.params.job_name !== undefined){\n      query = ` query { jobruns(limit: ${limit} , offset: ${offset} ,filter: \"IN\", jobName: \\\"${this.props.match.params.job_name}\\\"  )\n              { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n\n      if (this.state.filter_end_date !== \"\") {\n        query = ` query { jobruns(limit: ${limit} , offset: ${offset},  startTime: \\\"${this.state.filter_start_date}\\\", endTime: \\\"${this.state.filter_end_date}\\\",filter: \"IN\", jobName: \\\"${this.props.match.params.job_name}\\\"  )\n        { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n      } \n\n      this.setState(prevState => ({\n        filter: 'IN',\n        job_name: this.props.match.params.job_name\n      }))\n\n    } else {\n      if (this.state.filter_end_date !== \"\" && this.state.filter !== \"\" ) {\n        query = ` query { jobruns(limit: ${limit} , offset: ${offset},  startTime: \\\"${this.state.filter_start_date}\\\", endTime: \\\"${this.state.filter_end_date}\\\",filter: \\\"${this.state.filter}\\\", jobName: \\\"${this.state.job_name}\\\"  )\n        { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n      } else if (this.state.filter_end_date !== \"\" ){\n        query = ` query { jobruns(limit: ${limit} , offset: ${offset},  startTime: \\\"${this.state.filter_start_date}\\\", endTime: \\\"${this.state.filter_end_date}\\\")\n        { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n      } else if (this.state.filter !== \"\" && this.state.job_name !== \"\") {\n        query = ` query { jobruns(limit: ${limit} , offset: ${offset}, filter: \\\"${this.state.filter}\\\", jobName: \\\"${this.state.job_name}\\\"  )\n        { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n      } else if (this.state.filter === \"\" && this.state.job_name !== \"\" ) {\n        query = ` query { jobruns(limit: ${limit} , offset: ${offset} ,filter: \"IN\", jobName: \\\"${this.state.job_name}\\\"  )\n        { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n      } else {\n        query = ` query { jobruns(limit: ${limit} , offset: ${offset}){ job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n      }\n    }\n\n    this.setState(prevState => ({\n      loader: true\n    }))\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: query\n        }\n      )  \n    })\n\n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n\n    const {data} = await response.json();\n    this.setState(prevState => ({\n      loader: false\n    }))\n\n    return data;   \n  }\n\n  setInterval() {\n    this.timerID = setInterval(\n      () => this.fetchEtlFlowJobs(),\n      1000 * 1000\n    );\n  }\n \n  componentDidMount() {\n    this.set_jobruns()\n    this.setInterval();\n }\n\n componentWillUnmount() {\n  clearInterval(this.timerID);\n }\n\n set_jobruns(){\n  this.fetchEtlFlowJobs().then(({jobruns}) => {\n    this.setState(prevState => ({\n      jobruns: jobruns\n    }))\n  })\n }\n\n set_job_name() {\n  this.setState(prevState => ({\n    job_name: document.getElementById(\"exampleDataList\").value\n  }))\n }\n\n set_filter_start_date() {\n  this.setState(prevState => ({\n    filter_start_date: document.getElementById(\"start_date\").value\n  }))\n }\n\n set_filter_end_date() {\n  this.setState(prevState => ({\n    filter_end_date: document.getElementById(\"end_date\").value\n  }))\n }\n\n show_modal(data)\n {\n   var props = ''\n   var data_jobruns = JSON.parse(data)\n\n   for(var key in data_jobruns) {\n   { \n       props  += \"<b>\"+ key + \"</b>\" +\"=\" + data_jobruns[key]+ \"<br></br>\"\n   }\n  {$(\"#jobRunModal .modal-body\").html(props)}\n  $(\"#jobRunModal\").modal();\n }\n}\n\nasync set_initial_state(){\n  this.props.match.params.job_name = undefined\n  this.setState(prevState => ({  \n    filter: '',\n    job_name: '',\n    filter_start_date: '',\n    filter_end_date: '',\n    paginationValue: 0,\n  }), () => this.set_jobruns())\n}\n\nshow_job_run_state_modal(data)\n {\n  {$(\"#jobRunStateModal .modal-body\").html(data)}\n  $(\"#jobRunStateModal\").modal();\n }\n\n handleOnClick(job_id){    \n  this.props.history.push('/JobRunDetails/' + job_id)\n }\n\n render(){\n   \n   var button = ''\n   var filter_button_name = '' \n   var filter_button_job_name = '' \n   var filter_start_date = ''  \n   var filter_end_date = ''  \n   var filter_back_button = ''\n   //Code for adding pagination element\n  if (this.state.paginationValue === 0) {\n    button = <li class=\"page-item disabled\">\n    <input type=\"button\" value=\"Previous\" class=\"page-link btn btn-secondary btn-sm\"/></li>\n  } else {\n    button =  <li class=\"page-item\">\n    <input type=\"button\" value=\"Previous\" class=\"page-link btn btn-secondary btn-sm\" onClick = {() => {\n             this.setState(prevState => ({\n              paginationValue: this.state.paginationValue  -   10\n            }))\n            this.fetchEtlFlowJobs(this.state.paginationValue - 10).then(({jobruns}) => {\n              this.setState(prevState => ({\n                jobruns: jobruns\n              }))\n            }) \n    }}/></li>\n  } \n\n   //Code for adding button name\n  if (this.state.filter !== '') {\n    filter_button_name = this.state.filter\n  }else {\n    filter_button_name = \"Add Filter\"\n  } \n\n   //Code for adding button name\n  if (this.state.job_name !== '') {\n     filter_button_job_name = this.state.job_name\n  }else {\n     filter_button_job_name = \"Type to search\"\n  } \n\n  if (this.state.filter_start_date !== '') {\n   filter_start_date = this.state.filter_start_date\n  }else {\n    filter_start_date = \"Start Date\"\n  } \n\n  if (this.state.filter_end_date !== '') {\n    filter_end_date = this.state.filter_end_date\n  }else {\n    filter_end_date = \"End Date\"\n  } \n\n  if(this.props.match.params.job_name !== undefined){\n    filter_back_button= <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                          this.props.history.push('/')\n                         }} >\n                        Back\n                        </button>\n  }\n\n   if (this.state.loader){\n    return (\n      <div>\n        <LoaderComponent />\n      </div>\n    );\n   }\n   else{\n   return (\n     <div className=\"container-fluid\">\n       <h3>{this.state.loader}</h3>\n       <ul class = \"pagination justify-content-center\">\n         <div class=\"dropdown\">\n            <button class=\"btn btn-light dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n               {filter_button_name}\n            </button>\n            <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n              { this.filterOperation.map ( filter => (\n                   <a class=\"dropdown-item\">\n                      <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                           this.setState(prevState => ({\n                               filter: filter\n                       }))}}> {filter} </button>\n                   </a>\n              ))}\n            </div>\n         </div>\n         <div className =\"form-inline float-right\">\n             <div className=\"mb-1\">\n             <input type=\"text\"\n                        className=\"form-control input-sm\"\n                        list = \"datalistOptions\"\n                        id = \"exampleDataList\"\n                        placeholder = {filter_button_job_name}\n                        onChange={e => this.set_job_name()}></input>      \n             </div>\n             <datalist id = \"datalistOptions\">\n               {this.props.jobs.map( data => (\n                 <option value = {data.name}></option>\n               ))}\n             </datalist> \n         </div>\n         <div class = \"form-inline float-right\">\n              <div class = \"mb-1\"> \n                  <input type=\"date\"\n                         className=\"form-control input-sm\"\n                         placeholder={filter_start_date}\n                         id = \"start_date\"\n                         onChange={e => this.set_filter_start_date()}\n                   ></input>\n              </div>\n              <div class = \"mb-1\"> \n                  <input type=\"date\"\n                         className=\"form-control input-sm\"\n                         placeholder={filter_end_date}\n                         id = \"end_date\"\n                         onChange={e => this.set_filter_end_date()}\n                   ></input> \n              </div>    \n         </div> \n         <button class= \"btn btn btn-sm\" type=\"button \" onClick= {() => {\n            this.set_initial_state()\n            }}>\n            Clear\n         </button>\n         <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                this.set_jobruns()\n             }} >\n            Refresh\n         </button>\n         {filter_back_button}\n       </ul>\n       <table id=\"jobruns\" class=\"table table-sm table-bordered\">\n           <thead class=\"thead-dark\">\n                 <tr>\n                   <th>Job Name</th>\n                   <th>Job Type</th>\n                   <th>Job Start Time</th>\n                   <th>Elapsed Time</th>\n                   <th>Job Status</th>\n                   <th>Actions</th>\n                 </tr>\n               </thead>\n                 <tbody>\n                 {this.state  .jobruns.map( data => (\n                   <tr>\n                     <td> <button type=\"button\" class=\"btn btn-link\" data-dismiss=\"modal\" onClick = {() => this.handleOnClick(data.job_run_id)}>{data.job_name}</button></td>\n                     <td>{data.job_type}</td>\n                     <td>{data.start_time}</td>\n                     <td>{data.elapsed_time}</td>\n                     <td>\n                     {(() => {\n                           if (data.state === \"pass\" || data.state == \"\" ) {\n                             return (\n                               <div>\n                                 <p className = \"text-success\">{data.state}</p>\n                               </div>\n                             )\n                           } else if (data.state === \"started\" || data.state == \"running\" ) {\n                             return (\n                               <div>\n                                 <p className = \"text-warning\">{data.state}</p>\n                               </div>\n                             )\n                           } else {\n                            return (\n                              <div>\n                                 <button type=\"button\" class=\"btn btn-danger btn btn-sm\" data-toggle=\"modal\" onClick = {() => this.show_job_run_state_modal(data.state)}>\n                                     Error\n                                 </button>\n                            \n                                 <div class=\"modal fade\" id=\"jobRunStateModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                                   <div class=\"modal-dialog\" role=\"document\">\n                                     <div class=\"modal-content\">\n                                       <div class=\"modal-header\">\n                                         <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                         <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                           <span aria-hidden=\"true\">&times;</span>\n                                         </button>\n                                       </div>\n                                       <div class=\"modal-body\">\n                                       </div>\n                                       <div class=\"modal-footer\">\n                                         <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                       </div>\n                                     </div>\n                                   </div>\n                                 </div>\n                              </div>\n                            )\n                           }\n                         })()}\n                     </td>\n                     <td>\n                         <button type=\"button\" class=\"btn btn-secondary btn-sm\" data-toggle=\"modal\" onClick = {() => this.show_modal(data.properties)}>\n                           Properties\n                         </button>\n                         \n                         <div class=\"modal fade\" id=\"jobRunModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                           <div class=\"modal-dialog\" role=\"document\">\n                             <div class=\"modal-content\">\n                               <div class=\"modal-header\">\n                                 <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                 <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                   <span aria-hidden=\"true\">&times;</span>\n                                 </button>\n                               </div>\n                               <div class=\"modal-body\">\n                               </div>\n                               <div class=\"modal-footer\">\n                                 <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                               </div>\n                             </div>\n                           </div>\n                         </div>\n                     </td>\n                   </tr>\n                 ))}\n                 </tbody>\n            </table>  \n            <nav aria-label=\"Page navigation example\">\n               <ul class=\"pagination justify-content-center\">\n                 {button}\n                 <li class=\"page-item\"><input type=\"button\" value=\"Next\" class=\"page-link btn btn-secondary btn-sm\" onClick = {() => {\n                   this.setState(prevState => ({\n                     paginationValue: this.state.paginationValue  + 10\n                   }))\n                   this.fetchEtlFlowJobs(this.state.paginationValue + 10).then(({jobruns}) => {\n                    this.setState(prevState => ({  \n                      jobruns: jobruns\n                    }))\n                   })\n                   }}/></li>\n               </ul>\n         </nav>\n          </div>\n   );\n  }\n }\n}\n// export default JobRuns;     \nexport default withRouter(JobRuns)\n","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n  \nimport { withRouter } from 'react-router'\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport $ from 'jquery';\nimport LoaderComponent from './LoaderComponent';\n\nclass QueueStats extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { queueStats: [],\n      loader:false\n    }\n  }\n\n  async fetchEtlFlowQueueStats() {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    this.setState(prevState => ({\n      loader: true\n    }))\n\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          query {\n            queueStats {\n              name \n              details\n              submitted_from\n              execution_time\n              }\n           }\n          `\n        }\n      )  \n    })\n\n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n    \n    const {data} = await response.json();\n    this.setState(prevState => ({\n      loader: false\n    }))\n\n    return data;    \n  }\n\n  componentDidMount() {\n    //calling getInfo api\n    this.fetchEtlFlowQueueStats().then(({queueStats}) => {\n        this.setState(prevState => ({\n          queueStats: queueStats\n        }))\n      })\n   }\n\n   show_modal(data)\n  {\n    var props = ''\n    var queue = JSON.parse(data)\n \n    for(var key in queue) {\n    { \n        props  += \"<b>\"+ key + \"</b>\" +\"=\" + queue[key]+ \"<br></br>\"\n    }\n\n   {$(\"#queueStats .modal-body\").html(props)}\n   $(\"#queueStats\").modal();\n  }\n}\n\n\n  render(){\n    if (this.state.loader){\n      return (\n        <div>\n          <LoaderComponent job_run_id={this.job_run_id}  set_job_run_state = {this.set_job_run_state} />\n        </div>\n      );\n     }\n    else{ \n    return (\n      <div class=\"container\">\n        <ul class = \"pagination justify-content-center\">\n             <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                    this.fetchEtlFlowQueueStats().then(({queueStats}) => {\n                      this.setState(prevState => ({\n                        queueStats: queueStats\n                      }))\n                  })\n                }} >\n               Refresh\n             </button>\n         </ul>\n          <table id=\"joblist\" class=\"table table-sm table-bordered\">\n            <thead class=\"thead-dark\">\n                  <tr>\n                    <th>Job Name</th>\n                    <th>Submitted From</th>\n                    <th>Execution Time</th>\n                    <th>Details</th>\n                  </tr>\n                </thead>\n                  <tbody>\n                  {this.state.queueStats.map( (data) => (\n                    <tr>\n                      <td>{data.name  }</td>\n                      <td>{data.submitted_from}</td>\n                      <td>{data.execution_time}</td>\n\n                      <td>\n                          <button type=\"button\" class=\"btn btn-secondary btn-sm\" data-toggle=\"modal\" onClick = {() => this.show_modal(data.details)}>\n                            Stats\n                          </button>\n                          \n                          <div class=\"modal fade\" id=\"queueStats\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                            <div class=\"modal-dialog\" role=\"document\">\n                              <div class=\"modal-content\">\n                                <div class=\"modal-header\">\n                                  <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                  <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                    <span aria-hidden=\"true\">&times;</span>\n                                  </button>\n                                </div>\n                                <div class=\"modal-body\">\n                                </div>\n                                <div class=\"modal-footer\">\n                                  <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n            </table>\n      </div>     \n    ); \n    }         \n  }\n}\nexport default withRouter(QueueStats)\n// export default QueueStats;\n","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n\n\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport $ from 'jquery';\nimport LoaderComponent from './LoaderComponent';\n\nclass Metrics extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { metrics: [],\n      loader:false\n    }\n  }\n\n  async fetchEtlFlowMetrics() {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    this.setState(prevState => ({\n      loader: true\n    }))\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          query {\n            metrics {\n                active_jobs\n                active_subscribers\n                etl_jobs\n                cron_jobs\n                used_memory\n                free_memory\n                total_memory\n                max_memory\n                build_time\n              }\n           }\n          `\n        }\n      )  \n    })\n\n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n    \n    const {data} = await response.json();\n    this.setState(prevState => ({\n      loader: false\n    }))\n\n    return data;    \n  }\n\n  componentDidMount() {\n    //calling getInfo api\n    this.fetchEtlFlowMetrics().then(({metrics}) => {\n        this.setState(prevState => ({\n            metrics: metrics\n        }))\n      })\n   }\n\n\n  render(){\n    if (this.state.loader){\n      return (\n        <div>\n          <LoaderComponent job_run_id={this.job_run_id}  set_job_run_state = {this.set_job_run_state} />\n        </div>\n      );\n     }\n    else{\n    return (\n      <div class=\"container\">\n          <ul class = \"pagination justify-content-center\">\n             <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                   this.fetchEtlFlowMetrics().then(({metrics}) => {\n                    this.setState(prevState => ({\n                        metrics: metrics\n                    }))\n                  })\n                }} >\n               Refresh\n             </button>\n         </ul>\n         <ul class=\"list-group \">\n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Active Jobs</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.active_jobs}</span>\n            </li>\n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Active Subscribers</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.active_subscribers}</span>\n            </li>\n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Etl Jobs</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.etl_jobs}</span>\n            </li>\n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Cron Jobs</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.cron_jobs}</span>\n            </li>  \n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Used Memory</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.used_memory}</span>\n            </li> \n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Free Memory</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.free_memory}</span>\n            </li>  \n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Total Memory</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.total_memory}</span>\n            </li>\n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Max Memory</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.max_memory}</span>\n            </li> \n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Build Time</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.build_time}</span>\n            </li>   \n         </ul>\n      </div>     \n    );    \n   }      \n  }\n}\nexport default Metrics;\n","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery/dist/jquery.min.js';\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\n\nclass CurrentTime extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { currentime: '' }    \n  }\n\n  async fetchEtlFlowJobs() {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          query {\n            currentime {\n                current_time\n             }\n           }\n          `\n        }\n      )  \n    })\n    const {data} = await response.json();\n    return data;    \n  }\n\n\n  componentDidMount() {\n    this.fetchEtlFlowJobs().then(({currentime}) => {\n      this.setState(prevState => ({\n        currentime: currentime.current_time\n      }))\n    })\n }\n  \n render(){\n    return (\n         <li className =\"nav-item\">\n             <a className = \"nav-link disabled\">\n                {this.state.currentime} \n             </a>\n         </li>\n    );\n  }\n}\nexport default CurrentTime;","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\nimport 'chartist/dist/chartist.min.css';\nimport 'chartist/dist/chartist.js';\n\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\nimport ChartistGraph from 'react-chartist';\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n\nimport 'chartist/dist/chartist.min.css';\nimport 'chartist/dist/chartist.js';\nimport Chartist from 'chartist/dist/chartist.min.js';\n\nvar ws_url = new URL(\"/ws/etlflow\" , window.location.href)\nws_url.protocol = ws_url.protocol.replace(\"http\",\"ws\")\n\nvar ws  = new WebSocket(ws_url + \"/\" + localStorage.getItem('Authorization')) \n\n// new WebSocket('wss://devetlflow.startv.com/ws/etlflow/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoibWludF9hZG1pbiIsICJyb2xlIjoiYWRtaW4ifQ.gwiUv0vss-3gX5rkPOGTdJ_81n5N3W7Hv1yeGsJj5g8')\n// new WebSocket(ws_url + \"/\" + localStorage.getItem('Authorization')) \n\nclass MemoryInfo extends React.Component {\n  constructor(props){\n    super(props); \n    const GRAPHQL_URL = '/ws/etlflow'\n\n    this.state  = { \n      messages:'',\n      jobLogs:[],\n      filter: '',\n      limit: '',\n      metrics: []\n    }\n\n    this.filterOperation = ['2 days','5 days','10 days']\n    this.limitOperation = ['2','5','10','30','50']\n\n    this.options = {\n      low: 0,\n      showArea: true,\n      showPoint: false\n    };\n  }\n\n  async call_api() {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    var query =  ` query { jobLogs { job_name success failed }}`\n    \n    if(this.state.filter !== '' && this.state.limit !== '') {\n      query =  ` query { jobLogs(limit: ${this.state.limit}, filter: \\\"${this.state.filter}\\\"  ) { job_name success failed }}`\n    } else  if (this.state.filter !== '') {\n      query =  ` query { jobLogs(filter: \\\"${this.state.filter}\\\") { job_name success failed }}`\n    } else  if (this.state.limit !== '') {\n      query =  ` query { jobLogs(limit: ${this.state.limit}) { job_name success failed }}`\n    }\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: query\n        }\n      )  \n    })\n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n    const {data} = await response.json()\n    return data;    \n  }\n  \n  async fetchEtlFlowMetrics() {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    this.setState(prevState => ({\n      loader: true\n    }))\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          query {\n            metrics {\n                active_jobs\n                active_subscribers\n                etl_jobs\n                cron_jobs\n                build_time\n              }\n           }\n          `\n        }\n      )  \n    })\n\n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n    \n    const {data} = await response.json();\n    this.setState(prevState => ({\n      loader: false\n    }))\n\n    return data;    \n  }\n\n\n  call(close_ws){\n\n    if(close_ws === \"true\"){\n      ws.close(1000,\"User closed the connection\")\n      document.getElementById(\"statslinknotify\").innerText = \"Real-Time Stats (Offline)\"\n      this.setState(prevState => ({\n        messages:''              \n        }))\n      console.log('ws closed')\n    }\n    else{\n      document.getElementById(\"statslinknotify\").innerText = \"Real-Time Stats (Online)\"\n      ws  = new WebSocket(ws_url + \"/\" + localStorage.getItem('Authorization')) \n\n      ws.onopen = () => {\n      console.log('ws connected')\n      }   \n  \n      ws.onmessage = evt => {\n      const message = evt.data\n      this.addMessage(message)\n      }  \n  \n      ws.onclose = () => {\n        console.log('disconnected')\n      }\n  \n      var used_memory_data = {\n        series: [[]]\n        };\n    \n      var free_memory_data = {\n        series: [[]]\n      }; \n      \n      var total_memory_data = {\n        series: [[]]\n      }; \n  \n      var used_memory_chart = new Chartist.Line('.ct-chart', used_memory_data, this.options);\n      var free_memory_chart = new Chartist.Line('.cpu-chart', free_memory_data, this.options);\n      var total_memory_chart = new Chartist.Line('.cpu-chart-1', total_memory_data, this.options);\n  \n      \n      this.updateUsedMemoryChart(used_memory_chart, used_memory_data, this.getUsedMemoryData(), 30)\n      this.updateFreeMemoryChart(free_memory_chart, free_memory_data, this.getFreeMemoryData(), 30)\n      this.updateTotalMemoryChart(total_memory_chart, total_memory_data, this.getTotalMemoryData(), 30)\n    }\n  }\n\n  bar_chart(){\n    new Chartist.Bar('.ct-chart-2', {\n      labels: [],\n      series: [\n        [],\n        [],\n      ]\n    }, {\n      seriesBarDistance: 10,\n      axisX: {\n        offset: 60\n      },\n      axisY: {\n        offset: 80,\n        labelInterpolationFnc: function(value) {\n          return value\n        },\n        scaleMinSpace: 15\n      }\n    });        \n  }\n\n  componentDidMount() {\n    this.call()\n    this.call_api()\n    this.set_jobLogs()\n    this.bar_chart()\n  }\n\n  componentWillUnmount() {\n    ws.close()\n  }\n\n  addMessage = message =>\n    this.setState(prevState => ({\n      messages: message\n  }))\n\n  getUsedMemoryData() {\n    var seriesVals = [];\n    this.state.messages.split(\"</br>\").map( data => (\n      seriesVals.push(data.split(\":\")[1])\n    ))\n\n    // console.log(JSON.stringify(seriesVals[0]))\n    return seriesVals[0];\n  }\n\n  getFreeMemoryData() {\n    var seriesVals = [];\n    this.state.messages.split(\"</br>\").map( data => (\n      seriesVals.push(data.split(\":\")[1])\n    ))\n\n    // console.log(JSON.stringify(seriesVals[1]))\n    return seriesVals[1];\n  }\n\n  getTotalMemoryData() {\n    var seriesVals = [];\n    this.state.messages.split(\"</br>\").map( data => (\n      seriesVals.push(data.split(\":\")[1])\n    ))\n\n    // console.log(JSON.stringify(seriesVals[2]))\n    return seriesVals[2];\n  }\n  \n  updateUsedMemoryChart(chart,data,point,length) {\n    if(data.series[0].length >= length) {\n      data.series[0].shift();\n    }\n    data.series[0].push(point);\n    chart.update(data);\n    setTimeout(() => { this.updateUsedMemoryChart(chart,data,this.getUsedMemoryData(),length) }, 1000);\n  }\n\n  updateFreeMemoryChart(chart,data,point,length) {\n    if(data.series[0].length >= length) {\n      data.series[0].shift();\n    }\n    data.series[0].push(point);\n    chart.update(data);\n    setTimeout(() => { this.updateFreeMemoryChart(chart,data,this.getFreeMemoryData(),length) }, 1000);\n  }\n\n  updateTotalMemoryChart(chart,data,point,length) {\n    if(data.series[0].length >= length) {\n      data.series[0].shift();\n    }\n    data.series[0].push(point);\n    chart.update(data);\n    setTimeout(() => { this.updateTotalMemoryChart(chart,data,this.getTotalMemoryData(),length) }, 1000);\n  }\n\n\n  async set_initial_state(){\n    this.setState(prevState => ({  \n      filter: '',\n      limit: ''\n    }), () => this.set_jobLogs())\n  }\n\n  set_jobLogs(){\n    this.call_api().then(({jobLogs}) => {\n      this.setState(prevState => ({\n        jobLogs: jobLogs\n      }))\n    })\n   }\n\n   set_jobLogs(){\n    this.fetchEtlFlowMetrics().then(({metrics}) => {\n      this.setState(prevState => ({\n          metrics: metrics\n      }))\n    })\n   }\n\n  render(){\n\n\n    var filter_button_name = ''\n    var limit_button_name = ''\n\n    if (this.state.filter !== '') {\n      filter_button_name = this.state.filter\n    }else {\n      filter_button_name = \"Add Filter\"\n    } \n\n    if (this.state.limit !== '') {\n      limit_button_name = this.state.limit\n    }else {\n      limit_button_name = \"Add limit\"\n    } \n\n    return (\n      <div class = \"container-fluid\">\n      <div class=\"card\">\n      <div class=\"card-header\">\n        <a className = \"btn btn-secondary btn-sm\" data-toggle = \"collapse\"  href = \"#streamnotify\" role = \"button\"  \n          aria-expanded = \"true\" aria-controls = \"streamnotify\" id = \"statslinknotify\">\n        </a>\n        <ul class = \"pagination float-right\">\n              <button class= \"btn btn btn-sm ml-2\" type=\"button \" onClick = {() => {\n                      this.call(\"false\")\n                }} >\n                Connect \n              </button>\n              <button class= \"btn btn btn-sm ml-2\" type=\"button \" onClick = {() => {\n                  this.call(\"true\")\n                }} >\n                Close \n              </button>\n        </ul>       \n      </div>\n    <div className = \"collapse\" id = \"streamnotify\">\n    <div class= \"card-body\">\n    <div class = \"row\">\n      <div class=\"col-sm-3\">\n          <div class=\"card\">\n              <div class=\"card-header\">Used Memory</div>\n              <div class= \"card-body\">\n                  <div class=\"ct-chart\"></div>\n              </div>\n          </div>\n      </div>\n      <div class=\"col-sm-3\">\n          <div class=\"card\">\n              <div class=\"card-header\">Free Memory</div>\n              <div class= \"card-body\">\n                  <div class=\"cpu-chart\"></div>\n              </div>\n          </div>\n      </div>\n      <div class=\"col-sm-3\">\n          <div class=\"card\">\n              <div class=\"card-header\">Total Memory</div>\n              <div class= \"card-body\">\n                  <div class=\"cpu-chart-1 \"></div>\n              </div>\n          </div>\n      </div>\n      <div class=\"col-sm-3\">\n        <div class=\"card\">\n           <div class=\"card-header\">Current Usage</div>\n              <div class= \"card-body\">\n                <div>\n                  <ul class=\"list-group \">\n                    {this.state.messages.split(\"</br>\").map( data => (\n                      <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                      <b>{data.split(\":\")[0]}</b>\n                      <span class=\"badge badge-secondary badge-pill\">{data.split(\":\")[1]}</span>\n                      </li> ))}\n                  </ul>\n                </div>  \n              </div>\n      </div>\n      </div>\n    </div>\n    <br/>\n    </div>\n    </div>\n    </div>\n    <br/>\n    <div class = \"row\">\n    <div class=\"col-sm-9\">\n        <div class=\"card\">\n            <div class=\"card-header\">\n            <a className = \"btn btn-secondary btn-sm\" data-toggle = \"collapse\"  href = \"#streamnotify1\" role = \"button\"  \n              aria-expanded = \"true\" aria-controls = \"streamnotify1\">Etl Jobs Vs Count (Success/Failed)\n            </a>  \n              <ul class = \"pagination float-right\">\n              <div class=\"dropdown\">\n                  <button type=\"button\" class=\"btn btn-light dropdown-toggle\" data-toggle=\"dropdown\">\n                    {filter_button_name}\n                  </button>\n                  <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n                    { this.filterOperation.map ( filter => (\n                      <a class=\"dropdown-item\">\n                         <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                         this.setState(prevState => ({\n                             filter: filter\n                       }))}}> {filter} </button>\n                      </a>\n                    ))}\n                  </div>\n                </div>\n                <div class=\"dropdown\">\n                  <button type=\"button\" class=\"btn btn-light dropdown-toggle\" data-toggle=\"dropdown\">\n                  {limit_button_name}\n                  </button>\n                  <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n                    { this.limitOperation.map ( limit => (\n                      <a class=\"dropdown-item\">\n                         <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                         this.setState(prevState => ({\n                             limit: limit\n                       }))}}> {limit} </button>\n                      </a>\n                    ))}\n                  </div>\n                </div>\n                <button class= \"btn btn btn-sm ml-2\" type=\"button \" onClick = {() => {\n                      this.set_initial_state()\n                }}>Clear</button>\n                <button class= \"btn btn btn-sm ml-2\" type=\"button \" onClick = {() => {\n                    var job_name_labels = []\n                    var job_success = []\n                    var job_failed = []\n                    this.call_api().then(({jobLogs}) => {\n                      var data =  JSON.parse(JSON.stringify(jobLogs))\n                      console.log(JSON.stringify(jobLogs))\n                      this.setState(prevState => ({\n                        jobLogs: jobLogs            \n                        }))\n                     });   \n                \n                     this.state.jobLogs.map( (data) => {\n                      job_name_labels.push(data.job_name)\n                      job_success.push(data.success)\n                      job_failed.push(data.failed)\n                     })\n    \n                    new Chartist.Bar('.ct-chart-2', {\n                      labels: job_name_labels,\n                      series: [\n                        job_success,\n                        job_failed,\n                      ]\n                    }, {\n                      seriesBarDistance: 10,\n                      axisX: {\n                        offset: 60\n                      },\n                      axisY: {\n                        offset: 80,\n                        labelInterpolationFnc: function(value) {\n                          return value\n                        },\n                        scaleMinSpace: 15\n                      }\n                    });                    \n                }} >\n                Refresh \n                </button>\n              </ul>       \n              </div>\n              <div className = \"collapse\" id = \"streamnotify1\">\n              <div class= \"card-body\">\n                  <div class=\"ct-chart-2\"></div>\n              </div>\n              </div>\n        </div>\n      </div>\n      <div class=\"col-sm-3\">\n          <div class=\"card\">\n              <div class=\"card-header\">\n                <a className = \"btn btn-secondary btn-sm\" data-toggle = \"collapse\"  href = \"#streamnotify2\" role = \"button\"  \n                   aria-expanded = \"true\" aria-controls = \"streamnotify\" id = \"statslinknotify\">Metrics\n                </a>\n                <ul class = \"pagination float-right\">\n                  <button class= \"btn btn btn-sm ml-2\" type=\"button \" onClick = {() => {\n                      this.fetchEtlFlowMetrics().then(({metrics}) => {\n                        this.setState(prevState => ({\n                            metrics: metrics\n                        }))\n                      })\n                  }} >\n                  Refresh \n                  </button>\n                </ul>       \n              </div>\n              <div className = \"collapse\" id = \"streamnotify2\">\n              <div class= \"card-body\">\n              <ul class=\"list-group \">\n                    <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                        <b>Active Jobs</b>\n                      <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.active_jobs}</span>\n                    </li>\n                    <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                        <b>Active Subscribers</b>\n                      <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.active_subscribers}</span>\n                    </li>\n                    <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                        <b>Etl Jobs</b>\n                      <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.etl_jobs}</span>\n                    </li>\n                    <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                        <b>Cron Jobs</b>\n                      <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.cron_jobs}</span>\n                    </li>  \n                    <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                        <b>Build Time</b>\n                      <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.build_time}</span>\n                    </li>   \n                 </ul>\n              </div>\n              </div>\n          </div>\n      </div>\n   </div>\n  </div>\n  );\n    // // return (\n    // <div class=\"container\">\n    // <div>\n    //         <ul class=\"list-group \">\n    //         {this.state.messages.split(\"</br>\").map( data => (\n    //         <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n    //             <b>{data.split(\":\")[0]}</b>\n    //           <span class=\"badge badge-secondary badge-pill\">{data.split(\":\")[1]}</span>\n    //         </li> ))}\n    //         </ul>\n    //  </div>  \n    //  </div>\n    // ); \n  }        \n}\n\nexport default MemoryInfo;","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n\n\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport $ from 'jquery';\nimport LoaderComponent from './LoaderComponent';\n\nclass Credential extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { credential: [],\n      loader:false,\n      jdbc_values: [],\n      aws_values: [],\n      jdbc_keys: [\"url\",\"user\",\"passsword\",\"driver\"],\n      aws_keys: [\"access_key\",\"secret_key\"],\n      errors: [],\n      is_error: false,\n      credential_name:'',\n      credential_type:'',\n      insert_credential_type: ''\n    }\n    this.filterOperation = [\"JDBC\",\"AWS\"]\n\n  }\n\n  async fetchEtlFlowCreds() {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    this.setState(prevState => ({\n      loader: true\n    }))\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          query {\n            credential {\n              name\n              type\n              valid_from\n            }\n           }\n          `\n        }\n      )  \n    })\n\n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n    \n    const {data} = await response.json();\n    this.setState(prevState => ({\n      loader: false\n    }))\n\n    return data;    \n  }\n\n  async updateCreds(name,type,value) {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    var props_updated = JSON.stringify(value).replaceAll(\"\\\"$\",\"\").replaceAll(\"$\\\"\",\"\")\n\n    var query = ` mutation { update_credentials (name:\\\"${name}\\\", type:JDBC, value: ${props_updated}) { name } }`\n    if(type === \"aws\") {\n      query = ` mutation { update_credentials (name:\\\"${name}\\\", type:AWS, value: ${props_updated}) { name } }`\n    }\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: query\n        }\n      )  \n    })\n    \n\n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n    \n    const {data,errors} = await response.json();\n\n    if(JSON.parse(JSON.stringify(data.update_credentials)) !== null){\n      this.set_job_error_deails(false)\n    }\n    else {\n      this.set_job_error_deails(true,JSON.parse(JSON.stringify(errors)))\n    }\n\n    return data;    \n  }\n\n  async insertCreds(name,type,value) {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    var props_updated = JSON.stringify(value).replaceAll(\"\\\"$\",\"\").replaceAll(\"$\\\"\",\"\")\n\n    var query = ` mutation { add_credentials (name:\\\"${name}\\\", type:JDBC, value: ${props_updated}) { name } }`\n    if(type === \"AWS\") {\n      query = ` mutation { add_credentials (name:\\\"${name}\\\", type:AWS, value: ${props_updated}) { name } }`\n    }\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: query\n        }\n      )  \n    })\n    \n\n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n    \n    const {data,errors} = await response.json();\n    if(JSON.parse(JSON.stringify(data.add_credentials)) !== null){\n      this.set_job_error_deails(false)\n    }\n    else {\n      this.set_job_error_deails(true,JSON.parse(JSON.stringify(errors)))\n    }\n\n    return data;    \n  }\n\n  set_notification(state){\n    this.setState(prevState => ({\n      notification: state\n    }))\n  }\n\n\n  create_update_cred_ui(){\n    if(this.state.credential_type === \"jdbc\"){\n    return this.state.jdbc_keys.map((el, i) => \n        <div key={i}>\n        <div class=\"row\">\n          <div class=\"col-xs-4 col-sm-4 col-md-4\">\n            <div class=\"form-group\">\n               <input class=\"form-control\" type=\"text\" placeholder={this.state.jdbc_keys[i]} disabled/>\n            </div>\n          </div>  \n          <div class=\"col-xs-7 col-sm-7 col-md-7\">\n            <div class=\"form-group\">\n              <input class=\"form-control\"  type=\"text\"  placeholder=\"***********\" onChange={this.set_insert_values.bind(this, i)} />\n            </div>    \n          </div> \n        </div> \n        </div>            \n    )\n    }else if(this.state.credential_type === \"aws\"){\n      return this.state.aws_keys.map((el, i) => \n        <div key={i}>\n        <div class=\"row\">\n          <div class=\"col-xs-4 col-sm-4 col-md-4\">\n            <div class=\"form-group\">\n               <input class=\"form-control\" type=\"text\" placeholder={this.state.aws_keys[i]} disabled/>\n            </div>\n          </div>  \n          <div class=\"col-xs-7 col-sm-7 col-md-7\">\n            <div class=\"form-group\">\n              <input class=\"form-control\"  type=\"text\"  placeholder=\"***********\" onChange={this.set_insert_values.bind(this, i)} />\n            </div>\n          </div> \n        </div> \n        </div>            \n    )\n    }\n }\n\n  create_add_cred_ui(){\n    if(this.state.insert_credential_type === \"JDBC\"){\n    return this.state.jdbc_keys.map((el, i) => \n        <div key={i}>\n        <div class=\"row\">\n          <div class=\"col-xs-4 col-sm-4 col-md-4\">\n            <div class=\"form-group\">\n               <input class=\"form-control\" type=\"text\" placeholder={this.state.jdbc_keys[i]} disabled/>\n            </div>\n          </div>  \n          <div class=\"col-xs-7 col-sm-7 col-md-7\">\n            <div class=\"form-group\">\n              <input class=\"form-control\"  type=\"text\"  placeholder=\"Type Value\" onChange={this.set_values.bind(this, i)} />\n            </div>\n          </div> \n        </div> \n        </div>            \n    )\n    }else if(this.state.insert_credential_type === \"AWS\"){\n      return this.state.aws_keys.map((el, i) => \n        <div key={i}>\n        <div class=\"row\">\n          <div class=\"col-xs-4 col-sm-4 col-md-4\">\n            <div class=\"form-group\">\n               <input class=\"form-control\" type=\"text\" placeholder={this.state.aws_keys[i]} disabled/>\n            </div>\n          </div>  \n          <div class=\"col-xs-7 col-sm-7 col-md-7\">\n            <div class=\"form-group\">\n              <input class=\"form-control\"  type=\"text\"  placeholder=\"Type Value\" onChange={this.set_values.bind(this, i)} />\n            </div>\n          </div> \n        </div> \n        </div>            \n    )\n    }\n }\n\n set_add_cred_initial_state(){\n  this.setState(prevState => ({  \n    insert_credential_type: '',\n    aws_values: [],\n    jdbc_values: []\n  }))\n  document.getElementById(\"cred_name\").value = ''\n}\n\nasync set_update_cred_initial_state(){\n  this.setState(prevState => ({  \n    aws_values: [],\n    jdbc_values: []\n  }))\n}\n\n set_values(i, event) {\n\n  if(this.state.insert_credential_type === \"JDBC\") {\n    let jdbc_values = [...this.state.jdbc_values];\n    jdbc_values[i] =  event.target.value;\n    this.setState({ jdbc_values });\n   } else{ \n    let aws_values = [...this.state.aws_values];\n    aws_values[i] =  event.target.value;\n    this.setState({ aws_values });\n   }\n}\n \nset_insert_values(i, event) {\n\n  if(this.state.credential_type === \"jdbc\") {\n    let jdbc_values = [...this.state.jdbc_values];\n    jdbc_values[i] =  event.target.value;\n    this.setState({ jdbc_values });\n   } else{ \n    let aws_values = [...this.state.aws_values];\n    aws_values[i] =  event.target.value;\n    this.setState({ aws_values });\n   }\n}\n \n componentDidMount() {\n    //calling getInfo api\n    this.set_credentials()\n  }\n\n\n  set_credentials(){\n    this.fetchEtlFlowCreds().then(({credential}) => {\n      this.setState(prevState => ({\n        credential: credential\n      }))\n    })\n   }\n\n  set_cred_update_deails(name){\n    this.setState(prevState => ({\n      credential_name: name\n      }))\n  } \n\n  update_credentials() {\n\n    var final_props = []\n    var i;\n\n    if(this.state.credential_type === \"jdbc\") {\n      for (i = 0; i < this.state.jdbc_keys.length; i++) {\n        var props = {[\"$key$\"] : this.state.jdbc_keys[i],[\"$value$\"] : this.state.jdbc_values[i]}\n       final_props[i] =  props\n       }\n     } else{ \n       for (i = 0; i < this.state.aws_keys.length; i++) {\n         var props = {[\"$key$\"] : this.state.aws_keys[i],[\"$value$\"] : this.state.aws_values[i]}\n        final_props[i] =  props\n        }\n     }\n \n   var props = ''\n \n   this.updateCreds(this.state.credential_name,this.state.credential_type,final_props).then(({update_credentials}) => {\n     this.set_notification(true)\n     var data =  JSON.parse(JSON.stringify(update_credentials))\n   }) \n\n   this.setState(prevState => ({  \n    credential_type: '',\n    aws_values: [],\n    jdbc_values: []\n  }))\n  }\n\n  async add_credentials() {\n\n    var final_props = []\n    var i;\n\n    if(this.state.insert_credential_type === \"JDBC\") {\n     for (i = 0; i < this.state.jdbc_keys.length; i++) {\n       var props = {[\"$key$\"] : this.state.jdbc_keys[i],[\"$value$\"] : this.state.jdbc_values[i]}\n      final_props[i] =  props\n      }\n    } else{ \n      for (i = 0; i < this.state.aws_keys.length; i++) {\n        var props = {[\"$key$\"] : this.state.aws_keys[i],[\"$value$\"] : this.state.aws_values[i]}\n       final_props[i] =  props\n       }\n    }\n \n   var props = ''\n \n   var cred_name = document.getElementById(\"cred_name\").value\n\n   this.insertCreds(cred_name,this.state.insert_credential_type,final_props).then(({add_credentials}) => {\n     this.set_notification(true)\n     var data =  JSON.parse(JSON.stringify(add_credentials))\n   }, () => this.set_add_cred_initial_state())\n\n   this.setState(prevState => ({  \n    insert_credential_type: '',\n    aws_values: [],\n    jdbc_values: []\n  }))\n  document.getElementById(\"cred_name\").value = ''\n  }\n\n  set_job_error_deails(is_error,errors){\n    this.setState(prevState => ({\n      is_error: is_error,\n      errors: errors                    \n      }))\n  }\n\n  render(){\n\n    var filter_button_name = ''\n    if (this.state.credential_type !== '') {\n      filter_button_name = this.state.credential_type  \n    }else {\n      filter_button_name = \"Add Credential Type\"\n    } \n\n    var filter_insert_button_name = ''\n    if (this.state.insert_credential_type !== '') {\n      filter_insert_button_name = this.state.insert_credential_type  \n    }else {\n      filter_insert_button_name = \"Add Credential Type\"\n    } \n\n    var filter_update_button_name = ''\n    if (this.state.credential_type !== '') {\n      filter_update_button_name = this.state.credential_type  \n    }else {\n      filter_update_button_name = \"Add Credential Type\"\n    } \n\n\n    var notification_var = \"\"\n    if(this.state.notification){\n      if(this.state.is_error) {\n         notification_var =\n         <div class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">\n            <h4 class=\"alert-heading\">Error while Updatating Credential !</h4>\n            <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" onClick = {() => {this.set_notification(false)}}>\n               <span aria-hidden=\"true\">&times;</span>\n            </button>\n         </div>\n       } else {\n          notification_var =\n          <div class=\"alert alert-success alert-dismissible fade show\" role=\"alert\">\n             <h4 class=\"alert-heading\">Credentials  submitted successfully!  </h4>\n             <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" onClick = {() => {this.set_notification(false)}}>\n                <span aria-hidden=\"true\">&times;</span>\n             </button>\n          </div>\n        }  \n    }\n\n    if (this.state.loader){\n      return (\n        <div>\n          <LoaderComponent job_run_id={this.job_run_id}  set_job_run_state = {this.set_job_run_state} />\n        </div>\n      );\n     }\n    else{\n      return (\n        <div className=\"container\">\n        <div>{notification_var}</div>\n          <ul class = \"pagination justify-content-center\">\n            <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                   this.set_credentials()\n                }} >\n               Refresh\n            </button>\n            <div class=\"inner\"> \n               <button type=\"button\" class=\"btn btn-warning ml-2\" data-toggle=\"modal\" data-target=\"#exampleModal1\">\n                   Add New Credentials\n               </button>\n               <div class=\"modal fade\" id=\"exampleModal1\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel1\" aria-hidden=\"true\">\n                  <div class=\"modal-dialog\" role=\"document\">\n                    <div class=\"modal-content\">\n                      <div class=\"modal-header\">\n                        <h5 class=\"modal-title\" id=\"exampleModalLabel1\">Add Credentials</h5>\n                        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                          <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                      </div>\n                      <div class=\"modal-body\">\n                        <div class=\"row\">\n                          <div class=\"col-xs-7 col-sm-7 col-md-7\">\n                            <div class=\"form-group\">\n                               Credential Name\n                               <input class=\"form-control\" placeholder=\"Add Name\"  type=\"text\" id=\"cred_name\"/>\n                            </div>\n                          </div> \n                          <div class=\"col-xs-7 col-sm-7 col-md-7\">\n                            <div class=\"form-group\">\n                            <div class=\"dropdown\">\n                              <button type=\"button\" class=\"btn btn-light dropdown-toggle\" data-toggle=\"dropdown\">\n                                {filter_insert_button_name}\n                              </button>\n                              <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n                                { this.filterOperation.map ( filter => (\n                                  <a class=\"dropdown-item\">\n                                     <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                                     this.setState(prevState => ({\n                                      insert_credential_type: filter\n                                   }))\n                                   }}> {filter} </button>\n                                  </a>\n                                ))}\n                              </div>\n                            </div> \n                            </div>\n                          </div>  \n                        </div> \n                        {this.create_add_cred_ui()} \n                        <input type=\"button\" class=\"btn btn-primary ml-2\" value=\"Submit\" onClick = {() => this.add_credentials()}/>\n                      </div>\n                      <div class=\"modal-footer\">\n                        <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n             </div>\n          </ul>\n          <table id=\"jobruns\" class=\"table table-sm table-bordered\">\n              <thead class=\"thead-dark\">\n                    <tr>\n                      <th>Credential Name</th>\n                      <th>Type</th>\n                      <th>Last Updated</th>\n                      <th>Action</th>\n                    </tr>\n                  </thead>\n                    <tbody>\n                    {this.state.credential.map( data => (\n                      <tr>\n                        <td>{data.name}</td>\n                        <td>{data.type}</td>\n                        <td>{data.valid_from}</td>\n                        <td>\n                        <div class=\"inner\">\n                             <button type=\"button\" class=\"btn btn-warning ml-2\" data-toggle=\"modal\" data-target=\"#exampleModal\"  onClick = {() => \n                                      this.setState(prevState => ({\n                                        credential_name: data.name,\n                                        credential_type: data.type\n                                  }))}>\n                                 Update\n                             </button>\n                             <div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                                <div class=\"modal-dialog\" role=\"document\">\n                                  <div class=\"modal-content\">\n                                    <div class=\"modal-header\">\n                                      <h5 class=\"modal-title\" id=\"exampleModalLabel\">Update Credentials</h5>\n                                      <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                        <span aria-hidden=\"true\">&times;</span>\n                                      </button>\n                                    </div>\n                                    <div class=\"modal-body\">\n                                    <div class=\"row\">\n                                        <div class=\"col-xs-7 col-sm-7 col-md-7\">\n                                          <div class=\"form-group\">\n                                             Credential Name\n                                             <input class=\"form-control\" placeholder={this.state.credential_name}  type=\"text\" disabled/>\n                                          </div>\n                                        </div> \n                                        <div class=\"col-xs-7 col-sm-7 col-md-7\">\n                                          <div class=\"form-group\">\n                                              Type\n                                             <input class=\"form-control\" placeholder={this.state.credential_type}   type=\"text\" disabled/>\n                                          </div>\n                                        </div>  \n                                      </div> \n                                      {this.create_update_cred_ui()}        \n                                      <input type=\"button\" class=\"btn btn-primary ml-2\" value=\"Submit\" onClick = {() => this.update_credentials()}/>\n                                    </div>\n                                    <div class=\"modal-footer\">\n                                      <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                    </div>\n                                  </div>\n                                </div>\n                              </div>\n                           </div>\n                        </td>\n                      </tr>\n                    ))}\n                    </tbody>\n               </table>  \n             </div>\n      );\n   }      \n  }\n}\nexport default Credential;\n","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\nimport { withRouter } from 'react-router'\n\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport $ from 'jquery';\nimport LoaderComponent from './LoaderComponent';\n\nclass JobRunDetails extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { \n      stepruns: [],\n      loader:false\n\n    }\n    \n  }\n\n  async fetchEtlFlowJobById(job_run_id) {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    this.setState(prevState => ({\n      loader: true\n    }))\n\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          query {\n            stepruns(job_run_id:    \\\"${job_run_id}\\\"){\n                job_run_id\n                step_name\n                properties\n                state\n                start_time\n                elapsed_time\n                step_type\n                step_run_id\n             }\n           }\n          `\n        }\n      )  \n    })\n\n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n\n    const {data} = await response.json();\n    this.setState(prevState => ({\n      loader: false\n    }))\n\n    return data;    \n  }\n\n  setInterval() {\n    this.timerID = setInterval(\n      () => this.fetchEtlFlowJobs(),\n      1000 * 1000\n    );\n  }\n \n  componentDidMount() {\n    this.fetchEtlFlowJobById(this.props.match.params.id).then(({stepruns}) => {\n      this.setState(prevState => ({\n        stepruns: stepruns\n      }))\n    })\n    // set Interval\n    this.setInterval();\n }\n\n componentWillUnmount() {\n  clearInterval(this.timerID);\n }\n \n show_modal(data)\n {\n   var props = ''\n   var data_jobruns = JSON.parse(data)\n\n   for(var key in data_jobruns) {\n   { \n       props  += \"<b>\"+ key + \"</b>\" +\"=\" + data_jobruns[key]+ \"<br></br>\"\n   }\n  {$(\"#stepRunModal .modal-body\").html(props)}\n  $(\"#stepRunModal\").modal();\n }\n}\n\nshow_step_run_state_modal(data)\n {\n  {$(\"#stepRunStateModal .modal-body\").html(data)}\n  $(\"#stepRunStateModal\").modal();\n }\n\n handleOnClick(job_id){    \n  this.props.history.push('/StepRunsById/' + job_id)\n }\n\n\n render(){\n   var step_run_id_flag = false\n   this.state.stepruns.map( item => {if(item.step_run_id !== \"\") step_run_id_flag = true})\n   var linked_jobs = ''\n   if(step_run_id_flag) {\n    linked_jobs = <th>Linked Job</th>\n   } else {\n    linked_jobs = \"\"\n   }\n\n   var remoteStep = [\"EtlFlowJobStep\",\"DPSparkJobStep\",\"ParallelETLStep\"];\n   if (this.state.loader){\n    return (\n      <div>\n        <LoaderComponent job_run_id={this.job_run_id}  set_job_run_state = {this.set_job_run_state} />\n      </div>\n    );\n   }\n   else{\n   return (\n     <div className=\"container-fluid\">\n         <table id=\"job runs\" class=\"table table-sm table-bordered\">\n           <thead class=\"thead-dark\">\n                 <tr>\n                   <th>Job Run Id</th>\n                   <th>Step Type</th>\n                   <th>Step Name</th>\n                   <th>Start Time</th>\n                   <th>Elapsed Time</th>\n                   <th>Status</th>\n                   <th>Properties</th> \n                   {linked_jobs}\n                   <th>\n                        <button className=\"btn btn-secondary btn-block\" onClick = {() => {\n                          this.props.history.push('/JobRuns')\n                         }} >Back</button>\n                   </th>\n                 </tr>\n               </thead>\n                 <tbody>\n                 {this.state.stepruns.map( data => (\n                   <tr>\n                     <td>{data.job_run_id}</td>\n                     <td>{data.step_type}</td>\n                     <td>{data.step_name}</td>\n                     <td>{data.start_time}</td>\n                     <td>{data.elapsed_time}</td>\n                     <td>\n                     {(() => {\n                           if (data.state === \"pass\" || data.state == \"\" ) {\n                             return (\n                               <div>\n                                 <p className = \"text-success\">{data.state}</p>\n                               </div>\n                             )\n                           } else if (data.state === \"started\" || data.state == \"running\" ) {\n                             return (\n                               <div>\n                                 <p className = \"text-warning\">{data.state}</p>\n                               </div>\n                             )\n                           } else {\n                            return (\n                              <div>\n                                 <button type=\"button\" class=\"btn btn-danger btn btn-sm\" data-toggle=\"modal\" onClick = {() => this.show_step_run_state_modal(data.state)}>\n                                     Error\n                                 </button>\n                            \n                                 <div class=\"modal fade\" id=\"stepRunStateModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                                   <div class=\"modal-dialog\" role=\"document\">\n                                     <div class=\"modal-content\">\n                                       <div class=\"modal-header\">\n                                         <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                         <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                           <span aria-hidden=\"true\">&times;</span>\n                                         </button>\n                                       </div>\n                                       <div class=\"modal-body\">\n                                       </div>\n                                       <div class=\"modal-footer\">\n                                         <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                       </div>\n                                     </div>\n                                   </div>\n                                 </div>\n                              </div>\n                            )\n                           }\n                         })()}\n                     </td>\n                     <td>\n                          <button type=\"button\" class=\"btn btn-secondary btn-sm\" data-toggle=\"modal\" onClick = {() => this.show_modal(data.properties)}>\n                            Properties\n                          </button>\n                          \n                          <div class=\"modal fade\" id=\"stepRunModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                            <div class=\"modal-dialog\" role=\"document\">\n                              <div class=\"modal-content\">\n                                <div class=\"modal-header\">\n                                  <h5 class=\"modal-title\" id=\"exampleModalLabel\">Step Properties</h5>\n                                  <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                    <span aria-hidden=\"true\">&times;</span>\n                                  </button>\n                                </div>\n                                <div class=\"modal-body\">\n                                </div>\n                                <div class=\"modal-footer\">\n                                  <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                      </td>\n                     <td>\n                         {(() => {\n                            if (remoteStep.includes(data.step_type)) {\n                              return (\n                                <input type=\"button\" value=\"Check Progress\" class=\"btn btn-secondary btn-sm\" onClick = {() => this.fetchEtlFlowJobById(data.step_run_id).then(({stepruns}) => {\n                                    this.setState(prevState => ({\n                                      stepruns: stepruns\n                                    }))\n                                  })}/>\n                              )\n                            } else {\n                              return (\n                                <div></div>\n                              )\n                            }\n                          })()}\n                    </td>\n                   </tr>\n                 ))}\n                 </tbody>\n            </table>\n          </div>\n    );\n    }\n  }\n}\nexport default withRouter(JobRunDetails)\n","import React from 'react';\nimport JobList from './JobList';\nimport JobRuns from './JobRuns';\n\nimport Metrics from './Metrics';\nimport QueueStats from './QueueStats';\n\nimport jwt_decode from \"jwt-decode\";\nimport LoaderComponent from './LoaderComponent';\nimport CurrentTime from './CurrentTime';\nimport MemoryInfo from './MemoryInfo';\nimport Credentials from './Credential';\n\n\nimport '../css/App.css'\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport JobRunDetails from './JobRunDetails';\nimport Chartist123 from './Chartist';\n\n\nclass Routes extends React.Component {\n\n  constructor(props){\n    super(props); \n    this.state  = {\n      jobs: [],\n      metrics: [],\n      user: '',\n      loader:false\n\n    }\n  }\n\n  async fetchEtlFlowJobs() {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    this.setState(prevState => ({\n      loader: true\n    }))\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          query {\n              jobs {\n                name \n                schedule\n                props {key value} \n                nextSchedule \n                schduleRemainingTime \n                is_active \n                max_active_runs\n             }\n           }\n          `\n        }\n      )  \n    })\n\n    if (response.status === 403) {\n      this.remove_token()\n    } \n\n    const {data} = await response.json();\n    this.setState(prevState => ({\n      loader: false\n    }))\n\n    return data;    \n  }\n\n  setInterval() {\n    this.timerID = setInterval(\n      () => this.fetchEtlFlowJobs(),\n      1000 * 1000\n    );\n  }\n\n  fetchEtlFlowUserDetails() {\n    const token = localStorage.getItem('Authorization')\n    var decoded = JSON.parse(JSON.stringify(jwt_decode(token)));\n    this.setState({\n      user: decoded[\"user\"]\n    })\n  }\n\n  componentDidMount() {\n\n    //calling jobs api\n    this.fetchEtlFlowJobs().then(({jobs}) => {\n      this.setState(prevState => ({\n        jobs: jobs\n      }))\n    })\n\n    this.fetchEtlFlowUserDetails()\n }\n\n get_etl_jobs = () => {\n  this.fetchEtlFlowJobs().then(({jobs}) => {\n    this.setState(prevState => ({\n      jobs: jobs\n    }))\n  })  \n }\n\n remove_token() {\n  localStorage.removeItem(\"Authorization\")\n  this.props.doLogout(\"\")\n}\n\n  render(){\n    if (this.state.loader){\n      return (\n        <div>\n          <LoaderComponent job_run_id={this.job_run_id}  set_job_run_state = {this.set_job_run_state} />\n        </div>\n      );\n     }\n    else{\n    return (\n      <Router>\n        <nav className = \"navbar navbar-expand-lg navbar-dark bg-dark mb-3\">\n            <ul className = \"nav navbar-nav w-100\">\n                <li className = \"nav-item nav-link\" ><Link to=\"/\">Jobs</Link> </li>\n                <li className = \"nav-item nav-link\" ><Link to=\"/JobRuns\">Job Runs</Link> </li>\n                <li className = \"nav-item nav-link\" ><Link to=\"/JobLogs\">Job Logs</Link> </li>\n                <li className = \"nav-item nav-link\" ><Link to=\"/Stats\">Stats</Link> </li>\n                <li className = \"nav-item nav-link\" ><Link to=\"/Credentials\">Credentials</Link> </li>\n\n            </ul>\n            <div class=\"navbar-collapse collapse w-100 order-3 dual-collapse2\">\n              <ul class=\"nav justify-content-end w-100\">\n              <CurrentTime/>\n                <li class=\"nav-item dropdown\">\n\t                <a class=\"nav-link  dropdown-toggle\" href=\"#\" data-toggle=\"dropdown\">{this.state.user}</a>\n\t                  <ul class=\"dropdown-menu\">\n\t\t                  <li>\n                        <a class=\"dropdown-item\" href=\"https://github.com/tharwaninitin/etlflow\">\n                           Git Hub \n                        </a>\n                      </li>\n                      <li>\n                        <a class=\"dropdown-item\" href=\"https://tharwaninitin.github.io/etlflow/site/\">\n                          Docs\n                        </a>\n                      </li>\n                      <li>\n                        <a class=\"dropdown-item\">\n                          <input type=\"button\" class=\"btn btn-secondary btn-sm\" value=\"LogOut\" onClick = {() => this.remove_token()}></input>\n                        </a>\n                      </li>\n\t                  </ul>\n\t              </li>\n              </ul>\n            </div>\n        </nav>\n        <Switch>\n          <Route exact path=\"/\" component={() => (<JobList jobs={this.state.jobs} get_etl_jobs = {this.get_etl_jobs} />)}/>\n          <Route path=\"/JobRuns/:job_name?\" component={() => (<JobRuns jobs={this.state.jobs}/>)}/>\n          <Route path=\"/JobLogs\" component={() => (<QueueStats/>)}/>\n          <Route path=\"/Stats\" component={() => (<MemoryInfo/>)}/>\n          <Route path=\"/Credentials\" component={() => (<Credentials/>)}/>\n          <Route path=\"/JobRunDetails/:id\" component={() => (<JobRunDetails/>)}/>\n\n        </Switch>\n      </Router>\n    );\n    }\n  }\n}\nexport default Routes;\n// export default withRouter(Routes)\n\n\n","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery/dist/jquery.min.js';\nimport jwt_decode from \"jwt-decode\";\n\n\nclass Login extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = {\n         user_name: '',\n         password: '',\n         token: '', \n         login: [],\n\n        }\n\n    this.login_validation = this.login_validation.bind(this);\n    this.set_login_user_name = this.set_login_user_name.bind(this);\n    this.set_login_password = this.set_login_password.bind(this);\n  }\n\n  async fetchLoginDetails(user_name,password) {\n    const GRAPHQL_URL = '/api/login'\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          mutation {\n            login (user_name: \\\"${user_name}\\\", password: \\\"${password}\\\") {\n                message \n                token\n             }\n           }\n          `\n         }\n      )  \n    })  \n    const {data} = await response.json();\n    return data;        \n  }\n\n login_validation() {\n    this.fetchLoginDetails(this.state.user_name,this.state.password).then(({login}) => {\n        var token_value = JSON.parse(JSON.stringify(login)).token\n        if(token_value !== \"\")\n        {\n            localStorage.setItem('Authorization', token_value);   \n            this.props.doLogin(token_value)\n            this.setState(prevState => ({\n                token: token_value\n              }))\n        }\n        else \n        {\n            alert(\"Invalid User\")\n        }\n    })   \n  } \n\n  set_login_user_name() {\n    this.setState(prevState => ({\n        user_name: document.getElementById(\"user_name\").value\n      }))\n  }\n\n  set_login_password() {\n    this.setState(prevState => ({\n        password: document.getElementById(\"password\").value\n      }))\n  }\n\n  render(){\n    return (\n    <div className=\"main\" align=\"center\">\n         <nav className = \"navbar navbar-expand-lg navbar-dark bg-dark mb-3\">\n             <ul className = \"nav navbar-nav w-50\">\n                 <li className = \"nav-item nav-link\">EtlFlow</li>\n             </ul>\n         </nav>   \n           <div className=\"col-md-3\">\n            <div className=\"login-form \">\n                <form id=\"form_login\" className = \"text-center border border-dark p-5\" onSubmit={(e) => {this.login_validation(); e.preventDefault();}  }>\n                    <p className = \"h4 mb-4\">EtlFlow Login</p>\n                    <div className=\"form-group\">\n                        <input type=\"text\"\n                         className=\"form-control\" \n                         aria-describedby=\"UsernameHelp\"\n                         placeholder=\"Username\"\n                         id=\"user_name\"\n                         onChange={e => this.set_login_user_name()}></input>\n                    </div>\n                    <div className=\"form-group\">\n                        <input\n                         type=\"password\"\n                         className=\"form-control\"\n                         aria-describedby=\"PasswordHelp\"\n                         placeholder=\"Password\"\n                         id=\"password\"\n                         onChange={e => this.set_login_password()}></input>\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-secondary btn-block\">Submit</button>\n                </form>   \n            </div>\n        </div>\n    </div>\n    );\n  }\n}\nexport default Login;","import React from 'react';\n//Bootstrap and jQuery libraries\nimport Routes from './components/Routes';\nimport LoginComponent from './components/Login';\n\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props);\n\n    this.state = {\n      token: '',\n    }\n\n    this.doLogin = this.doLogin.bind(this)\n    this.doLogout = this.doLogout.bind(this)\n\n  }\n\n  doLogin(args_token,args_user) {\n    this.setState({\n      token: args_token\n    })\n  }\n\n\n  doLogout(args_token) {\n    this.setState({\n      token: ''\n    })\n  }\n\n\n  render(){\n    if(localStorage.getItem(\"Authorization\") === null){\n      return (  \n          <div>\n            <LoginComponent doLogin = {this.doLogin}/>  \n          </div>\n      );\n    } else {\n      return (  \n        <div>\n          <Routes doLogout = {this.doLogin}/>  \n        </div>\n     );\n    }\n  }\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nwindow.login_url = \"/api/login\"\nwindow.url = \"/api/etlflow\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}