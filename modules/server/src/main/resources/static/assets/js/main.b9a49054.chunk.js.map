{"version":3,"sources":["components/LoaderComponent.js","components/CurrentTime.js","components/ErrorComponent.js","cards/MemoryInfo.js","cards/Credential.js","cards/JobList.js","cards/JobRuns.js","cards/QueueStats.js","cards/JobRunDetails.js","components/Routes.js","components/Login.js","App.js","index.js"],"names":["LoaderComponent","props","class","role","React","Component","CurrentTime","state","currentime","a","GRAPHQL_URL","this","token","localStorage","getItem","fetch","method","headers","body","JSON","stringify","query","response","json","data","fetchEtlFlowJobs","then","setState","prevState","current_time","className","ErrorComponent","custom_error","error","toString","ws_url","URL","window","location","href","protocol","replace","ws","WebSocket","MemoryInfo","addMessage","message","messages","used","total","free","max","jobLogs","filter","limit","metrics","error_code","filterOperation","limitOperation","options","low","showArea","showPoint","ok","status","logout","setErrorState","Error","loader","close_ws","close","document","getElementById","innerText","console","log","onopen","onmessage","evt","res","parse","memory","onclose","used_memory_data","series","free_memory_data","total_memory_data","used_memory_chart","Chartist","Line","free_memory_chart","total_memory_chart","updateUsedMemoryChart","getUsedMemoryData","updateFreeMemoryChart","getFreeMemoryData","updateTotalMemoryChart","getTotalMemoryData","Bar","labels","seriesBarDistance","axisX","offset","axisY","labelInterpolationFnc","value","scaleMinSpace","job_name_labels","job_success","job_failed","map","push","job_name","success","failed","call","callApi","setJobLogs","setMetrics","barChart","barChartData","seriesVals","chart","point","length","shift","update","setTimeout","catch","fetchEtlFlowMetrics","filter_button_name","limit_button_name","data-toggle","aria-expanded","aria-controls","id","type","onClick","aria-labelledby","setInitialState","active_jobs","active_subscribers","etl_jobs","cron_jobs","build_time","Credential","credential","jdbc_values","aws_values","jdbc_keys","aws_keys","errors","is_error","credential_name","credential_type","insert_credential_type","name","props_updated","replaceAll","update_credentials","setJobErrorDeails","add_credentials","notification","el","i","placeholder","disabled","onChange","setInsertValues","bind","setValues","event","target","setCredentials","fetchEtlFlowCreds","final_props","updateCreds","setNotification","cred_name","insertCreds","setAddCredInitialState","filter_insert_button_name","notification_var","data-dismiss","aria-label","aria-hidden","job_run_id","set_job_run_state","data-target","tabindex","createAddCredUI","addCredentials","valid_from","createUpdateCredUI","updateCredentials","JobList","jobs","run_job_props","is_active","values","keys","run_job","dt","$","DataTable","column","visible","job_properties","key","html","modal","history","set_run_job_keys","set_run_job_values","remove_props","splice","runEtlJob","setJobDeails","getEtlJobs","aria-describedby","defaultChecked","e","updateJobActiveState","update_job_state","handleOnClick","schedule","nextSchedule","data-order","schduleRemainingTime","last_run_time","last_run_description","showModal","createUI","addProps","submitRunJob","withRouter","JobRuns","jobruns","filter_start_date","filter_end_date","paginationValue","undefined","match","params","timerID","setInterval","setJobruns","clearInterval","data_jobruns","default_props","includes","job_id","button","filter_button_job_name","filter_back_button","aria-haspopup","list","setJobName","setFilterStartDate","setFilterEndDate","job_type","start_time","elapsed_time","showJobRunStateModal","properties","retryJobRun","QueueStats","queueStats","setEtlFlowQueueStats","fetchEtlFlowQueueStats","queue","submitted_from","execution_time","details","JobRunDetails","stepruns","setEtlFlowJobById","fetchEtlFlowJobById","step_run_id_flag","item","step_run_id","linked_jobs","remoteStep","step_type","step_name","showStepRunStateModal","Routes","get_etl_jobs","user","remove_token","decoded","jwt_decode","fetchEtlFlowUserDetails","removeItem","doLogout","to","exact","path","component","Login","user_name","password","login","login_validation","set_login_user_name","set_login_password","GRAPHQL_LOGIN_URL","fetchLoginDetails","token_value","setItem","doLogin","alert","align","onSubmit","preventDefault","App","args_token","args_user","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b9a49054.chunk.js","sourcesContent":["import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n\nimport '../css/App.css'\n\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\n\nclass LoaderComponent extends React.Component {\n  constructor(props){\n    super(props); \n  }\n\n  render(){\n    return (\n        <div class=\"d-flex justify-content-center\">\n           <div class=\"spinner-border m-5\" role=\"status\">\n             <span class=\"sr-only\">Loading...</span>\n           </div>\n        </div>\n    );\n  }\n}\nexport default LoaderComponent;\n","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery/dist/jquery.min.js';\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\n\nclass CurrentTime extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { currentime: '' }    \n  }\n\n  async fetchEtlFlowJobs() {\n    const GRAPHQL_URL = this.props.GRAPHQL_URL\n    const token = localStorage.getItem('Authorization')\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          query {\n            currentime {\n                current_time\n             }\n           }\n          `\n        }\n      )  \n    })\n    const {data} = await response.json();\n    return data;    \n  }\n\n\n  componentDidMount() {\n    this.fetchEtlFlowJobs().then(({currentime}) => {\n      this.setState(prevState => ({\n        currentime: currentime.current_time\n      }))\n    })\n }\n  \n render(){\n    return (\n         <li className =\"nav-item\">\n             <a className = \"nav-link disabled\">\n                {this.state.currentime} \n             </a>\n         </li>\n    );\n  }\n}\nexport default CurrentTime;","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n\nimport '../css/App.css'\n\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\n\nclass ErrorComponent extends React.Component {\n  constructor(props){\n    super(props); \n  }\n\n  render(){  \n\n    var custom_error = ''\n\n    if(this.props.error.toString() === 'TypeError: Failed to fetch') {\n      custom_error = this.props.error.toString() + \" \" + \"ERR_CONNECTION_REFUSED.Server is down\"\n    } else {\n      custom_error = this.props.error.toString()\n    }\n\n    return (\n        <div>\n          <table className = \"table table-striped\">\n              <thead class=\"thead-dark\">\n                 <tr>\n                   <th>Error</th>\n                 </tr>\n              </thead> \n              <tbody>\n                  <tr>\n                      <td class=\"text-danger\">{custom_error}</td>\n                  </tr>   \n              </tbody>  \n          </table>\n        </div>\n    );\n  }\n}\nexport default ErrorComponent;\n","\nimport React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\nimport 'chartist/dist/chartist.min.css';\nimport 'chartist/dist/chartist.js';\n \n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\nimport ChartistGraph from 'react-chartist';\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n \nimport 'chartist/dist/chartist.min.css';\nimport 'chartist/dist/chartist.js';\nimport Chartist from 'chartist/dist/chartist.min.js';\nimport ErrorComponent from '../components/ErrorComponent';\n\nvar ws_url = new URL(\"/ws/etlflow\" , window.location.href)\nws_url.protocol = ws_url.protocol.replace(\"http\",\"ws\")\n \nvar ws  = new WebSocket(ws_url + \"/\" + localStorage.getItem('Authorization'))\n\n// new WebSocket('wss://devetlflow.startv.com/ws/etlflow/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoibWludF9hZG1pbiIsICJyb2xlIjoiYWRtaW4ifQ.gwiUv0vss-3gX5rkPOGTdJ_81n5N3W7Hv1yeGsJj5g8')\n// new WebSocket(ws_url + \"/\" + localStorage.getItem('Authorization'))\n \nclass MemoryInfo extends React.Component {\n  constructor(props){\n    super(props);\n    const GRAPHQL_URL = '/ws/etlflow'\n \n    this.state  = {\n      used: '',\n      total: '',\n      free: '',\n      max: '',\n      jobLogs:[],\n      filter: '',\n      limit: '',\n      metrics: [],\n      error:'',\n      error_code:'',\n\n    }\n \n    this.filterOperation = ['2','5','10']\n    this.limitOperation = ['2','5','10','30','50']\n \n    this.options = {\n      low: 0,\n      showArea: true,\n      showPoint: false\n    };\n  }\n \n  async callApi() {\n    const GRAPHQL_URL = this.props.GRAPHQL_URL\n    const token = localStorage.getItem('Authorization')\n \n    var query =  ` query { jobLogs { job_name success failed }}`\n   \n    if(this.state.filter !== '' && this.state.limit !== '') {\n      query =  ` query { jobLogs(limit: ${this.state.limit}, filter: ${this.state.filter}  ) { job_name success failed }}`\n    } else  if (this.state.filter !== '') {\n      query =  ` query { jobLogs(filter: ${this.state.filter}) { job_name success failed }}`\n    } else  if (this.state.limit !== '') {\n      query =  ` query { jobLogs(limit: ${this.state.limit}) { job_name success failed }}`\n    }\n \n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: query\n        }\n      ) \n    })\n\n    if (!response.ok) {\n      const message = `An error has occured: ${response.status}`;\n      if (response.status === 403) {\n        this.props.logout()\n      } else if (response.status === 404) {\n        this.setErrorState('Not Found',response.status)\n      } else if (response.status === 0) {\n        this.setErrorState('ERR_CONNECTION_REFUSED.Server is down',response.status)\n      } else { \n        throw  new Error(message);\n      }\n    } else {\n      const {data} = await response.json()\n      return data;   \n    }\n  }\n \n  async fetchEtlFlowMetrics() {\n    const GRAPHQL_URL = this.props.GRAPHQL_URL\n    const token = localStorage.getItem('Authorization')\n \n    this.setState(prevState => ({\n      loader: true\n    }))\n \n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          query {\n            metrics {\n                active_jobs\n                active_subscribers\n                etl_jobs\n                cron_jobs\n                build_time\n              }\n           }\n          `\n        }\n      ) \n    })\n \n\n    if (!response.ok) {\n      const message = `An error has occured: ${response.status}`;\n      if (response.status === 403) {\n        this.props.logout()\n      } else if (response.status === 404) {\n        this.setErrorState('Not Found',response.status)\n      } else if (response.status === 0) {\n        this.setErrorState('ERR_CONNECTION_REFUSED.Server is down',response.status)\n      } else { \n        throw  new Error(message);\n      }\n    } else {\n    \n      const {data} = await response.json();\n      this.setState(prevState => ({\n      loader: false\n      }))\n \n    return data; }  \n  }\n \n  call(close_ws){\n \n    if(close_ws === \"true\"){\n      ws.close(1000,\"User closed the connection\")\n      document.getElementById(\"statslinknotify\").innerText = \"Real-Time Stats (Offline)\"\n      this.setState(prevState => ({\n        messages:[]            \n        }))\n      console.log('ws closed')\n    }\n    else{\n      document.getElementById(\"statslinknotify\").innerText = \"Real-Time Stats (Online)\"\n      ws  = new WebSocket(ws_url + \"/\" + localStorage.getItem('Authorization'))\n \n      ws.onopen = () => {\n      console.log('ws connected')\n      }  \n  \n      ws.onmessage = evt => {\n      const message = evt.data\n      const obj = JSON.parse(message);\n      var res = obj.memory;\n      this.setState(prevState => ({\n        used: res.used,\n        total: res.total,\n        free: res.free,\n        max: res.max\n      }))\n      } \n  \n      ws.onclose = () => {\n        console.log('disconnected')\n      }\n \n      var used_memory_data = {\n       series: [[]]\n        };\n   \n      var free_memory_data = {\n        series: [[]]\n      };\n      \n      var total_memory_data = {\n        series: [[]]\n      };\n  \n      var used_memory_chart = new Chartist.Line('.ct-chart', used_memory_data, this.options);\n      var free_memory_chart = new Chartist.Line('.cpu-chart', free_memory_data, this.options);\n      var total_memory_chart = new Chartist.Line('.cpu-chart-1', total_memory_data, this.options);\n \n      \n      this.updateUsedMemoryChart(used_memory_chart, used_memory_data, this.getUsedMemoryData(), 30)\n      this.updateFreeMemoryChart(free_memory_chart, free_memory_data, this.getFreeMemoryData(), 30)\n      this.updateTotalMemoryChart(total_memory_chart, total_memory_data, this.getTotalMemoryData(), 30)\n    }\n  }\n \n  barChart(){\n    new Chartist.Bar('.ct-chart-2', {\n      labels: [0],\n      series: [\n        [0],\n        [0],\n      ]\n    }, {\n      seriesBarDistance: 10,\n      axisX: {\n        offset: 60\n      },\n      axisY: {\n        offset: 80,\n        labelInterpolationFnc: function(value) {\n          return value\n        },\n        scaleMinSpace: 15\n      }\n    });       \n  }\n \n  barChartData(){\n    var job_name_labels = []\n    var job_success = []\n    var job_failed = []\n \n    this.state.jobLogs.map( (data) => {\n     job_name_labels.push(data.job_name)\n     job_success.push(data.success)\n     job_failed.push(data.failed)\n    })\n   \n    new Chartist.Bar('.ct-chart-2', {\n      labels: job_name_labels,\n      series: [\n        job_success,\n        job_failed,\n      ]\n    }, {\n      seriesBarDistance: 10,\n      axisX: {\n        offset: 60\n      },\n      axisY: {\n        offset: 80,\n        labelInterpolationFnc: function(value) {\n          return value\n        },\n        scaleMinSpace: 15\n      }\n    });                   \n  }\n\n  componentDidMount() {\n    this.call()\n    this.callApi()\n    this.setJobLogs()\n    this.setMetrics()\n    this.barChart()  \n    this.barChartData() \n  }\n \n  componentWillUnmount() {\n    ws.close()\n  }\n \n  addMessage = message =>\n    this.setState(prevState => ({\n      messages: message\n  }))\n \n  getUsedMemoryData() {\n    var seriesVals = [];\n    seriesVals.push(this.state.used)\n    // console.log(JSON.stringify(seriesVals[0]))\n    return seriesVals[0];\n  }\n\n  getFreeMemoryData() {\n    var seriesVals = [];\n    seriesVals.push(this.state.free)\n    // console.log(JSON.stringify(seriesVals[1]))\n    return seriesVals[0];\n  }\n\n  getTotalMemoryData() {\n    var seriesVals = [];\n    seriesVals.push(this.state.total)    \n    return seriesVals[0];\n  }\n\n  updateUsedMemoryChart(chart,data,point,length) {\n    if(data.series[0].length >= length) {\n      data.series[0].shift();\n    }\n    data.series[0].push(point);\n    chart.update(data);\n    setTimeout(() => { this.updateUsedMemoryChart(chart,data,this.getUsedMemoryData(),length) }, 1000);\n  }\n \n  updateFreeMemoryChart(chart,data,point,length) {\n    if(data.series[0].length >= length) {\n      data.series[0].shift();\n    }\n    data.series[0].push(point);\n    chart.update(data);\n    setTimeout(() => { this.updateFreeMemoryChart(chart,data,this.getFreeMemoryData(),length) }, 1000);\n  }\n \n  updateTotalMemoryChart(chart,data,point,length) {\n    if(data.series[0].length >= length) {\n      data.series[0].shift();\n    }\n    data.series[0].push(point);\n    chart.update(data);\n    setTimeout(() => { this.updateTotalMemoryChart(chart,data,this.getTotalMemoryData(),length) }, 1000);\n  }\n \n\n  async setInitialState(){\n    this.setState(prevState => ({ \n      filter: '',\n      limit: ''\n    }), () => this.setJobLogs())\n  }\n \n  setJobLogs(){\n    this.callApi().then(({jobLogs}) => {\n      this.setState(prevState => ({\n        jobLogs: jobLogs\n      }))\n    }).catch(error => {\n      this.setState(prevState => ({\n        error: error\n      }))\n    });  \n   }\n\n  setMetrics(){\n    this.fetchEtlFlowMetrics().then(({metrics}) => {\n      this.setState(prevState => ({\n          metrics: metrics\n      }))\n    }).catch(error => {\n      this.setState(prevState => ({\n        error: error\n      }))\n  });  \n  }\n \n  render(){\n \n\n    var filter_button_name = ''\n    var limit_button_name = ''\n \n    if (this.state.filter !== '') {\n      filter_button_name = this.state.filter\n    }else {\n      filter_button_name = \"Add Filter (In Days)\"\n    }\n \n    if (this.state.limit !== '') {\n      limit_button_name = this.state.limit\n    }else {\n      limit_button_name = \"Add limit\"\n    }\n \n    if (this.state.error !== ''){\n      return (\n        <div>\n          <ErrorComponent error={this.state.error}/>\n        </div>\n      );\n     } else {\n    return (\n      <div class = \"container-fluid\">\n      <div class=\"card\">\n      <div class=\"card-header\">\n        <a className = \"btn btn-secondary btn-sm\" data-toggle = \"collapse\"  href = \"#streamnotify\" role = \"button\" \n          aria-expanded = \"true\" aria-controls = \"streamnotify\" id = \"statslinknotify\">\n        </a>\n        <ul class = \"pagination float-right\">\n              <button class= \"btn btn btn-sm ml-2\" type=\"button \" onClick = {() => {\n                      this.call(\"false\")\n                }} >\n                Connect\n              </button>\n              <button class= \"btn btn btn-sm ml-2\" type=\"button \" onClick = {() => {\n                  this.call(\"true\")\n                }} >\n                Close\n              </button>\n        </ul>      \n      </div>\n    <div className = \"collapse\" id = \"streamnotify\">\n    <div class= \"card-body\">\n    <div class = \"row\">\n      <div class=\"col-sm-3\">\n          <div class=\"card\">\n              <div class=\"card-header\">Used Memory</div>\n              <div class= \"card-body\">\n                  <div class=\"ct-chart\"></div>\n              </div>\n          </div>\n      </div>\n      <div class=\"col-sm-3\">\n          <div class=\"card\">\n              <div class=\"card-header\">Free Memory</div>\n              <div class= \"card-body\">\n                  <div class=\"cpu-chart\"></div>\n              </div>\n          </div>\n      </div>\n      <div class=\"col-sm-3\">\n          <div class=\"card\">\n              <div class=\"card-header\">Total Memory</div>\n              <div class= \"card-body\">\n                  <div class=\"cpu-chart-1 \"></div>\n              </div>\n          </div>\n      </div>\n      <div class=\"col-sm-3\">\n        <div class=\"card\">\n           <div class=\"card-header\">Current Usage</div>\n              <div class= \"card-body\">\n                <div>\n                   <ul class=\"list-group \">\n                       <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                         <b>Used Memory</b>\n                         <span class=\"badge badge-secondary badge-pill\">{this.state.used}</span>\n                       </li>\n                       <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                         <b>Free Memory</b>\n                         <span class=\"badge badge-secondary badge-pill\">{this.state.free}</span>\n                       </li>\n                       <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                         <b>Total Memory</b>\n                         <span class=\"badge badge-secondary badge-pill\">{this.state.total}</span>\n                       </li>\n                       <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                         <b>Max Memory</b>\n                         <span class=\"badge badge-secondary badge-pill\">{this.state.max}</span>\n                       </li>\n                   </ul>\n                </div> \n              </div>\n      </div>\n      </div>\n    </div>\n    <br/>\n    </div>\n    </div>\n    </div>\n    <br/>\n    <div class = \"row\">\n    <div class=\"col-sm-9\">\n        <div class=\"card\">\n            <div class=\"card-header\">\n            <a className = \"btn btn-secondary btn-sm\" data-toggle = \"collapse\"  href = \"#streamnotify1\" role = \"button\" \n              aria-expanded = \"true\" aria-controls = \"streamnotify1\">Etl Jobs Vs Count (Success/Failed)\n            </a> \n              <ul class = \"pagination float-right\">\n              <div class=\"dropdown\">\n                  <button type=\"button\" class=\"btn btn-light dropdown-toggle\" data-toggle=\"dropdown\">\n                    {filter_button_name}\n                  </button>\n                  <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n                    { this.filterOperation.map ( filter => (\n                      <a class=\"dropdown-item\">\n                         <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                         this.setState(prevState => ({\n                             filter: filter\n                       }),() => this.setJobLogs())}}> {filter} </button>\n                      </a>\n                    ))}\n                  </div>\n                </div>\n                <div class=\"dropdown\">\n                  <button type=\"button\" class=\"btn btn-light dropdown-toggle\" data-toggle=\"dropdown\">\n                  {limit_button_name}\n                  </button>\n                  <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n                    { this.limitOperation.map ( limit => (\n                      <a class=\"dropdown-item\">\n                         <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                         this.setState(prevState => ({\n                             limit: limit\n                       }),() => this.setJobLogs())}}> {limit} </button>\n                      </a>\n                    ))}\n                  </div>\n                </div>\n                <button class= \"btn btn btn-sm ml-2\" type=\"button \" onClick = {() => {\n                      this.setInitialState()\n                }}>Clear</button>\n                <button class= \"btn btn btn-sm ml-2\" type=\"button \" onClick = {() => {\n                 \n                     this.setJobLogs() \n                \n                     var job_name_labels = []\n                     var job_success = []\n                     var job_failed = []\n \n                     this.state.jobLogs.map( (data) => {\n                      job_name_labels.push(data.job_name)\n                      job_success.push(data.success)\n                      job_failed.push(data.failed)\n                     })\n   \n                    new Chartist.Bar('.ct-chart-2', {\n                      labels: job_name_labels,\n                      series: [\n                        job_success,\n                        job_failed,\n                      ]\n                    }, {\n                      seriesBarDistance: 10,\n                      axisX: {\n                        offset: 60\n                      },\n                      axisY: {\n                        offset: 80,\n                        labelInterpolationFnc: function(value) {\n                          return value\n                        },\n                        scaleMinSpace: 15\n                      }\n                    });                   \n                }} >\n                Refresh\n                </button>\n              </ul>      \n              </div>\n              <div className = \"collapse\" id = \"streamnotify1\">\n              <div class= \"card-body\">\n                  <div class=\"ct-chart-2\"></div>\n              </div>\n              </div>\n        </div>\n      </div>\n      <div class=\"col-sm-3\">\n          <div class=\"card\">\n              <div class=\"card-header\">\n                <a className = \"btn btn-secondary btn-sm\" data-toggle = \"collapse\"  href = \"#streamnotify2\" role = \"button\" \n                   aria-expanded = \"true\" aria-controls = \"streamnotify\" id = \"statslinknotify\">Metrics\n                </a>\n                <ul class = \"pagination float-right\">\n                  <button class= \"btn btn btn-sm ml-2\" type=\"button \" onClick = {() => {\n                      this.setMetrics()\n                  }} >\n                  Refresh\n                  </button>\n                </ul>      \n              </div>\n              <div className = \"collapse\" id = \"streamnotify2\">\n              <div class= \"card-body\">\n              <ul class=\"list-group \">\n                    <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                        <b>Active Jobs</b>\n                      <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.active_jobs}</span>\n                    </li>\n                    <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                        <b>Active Subscribers</b>\n                      <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.active_subscribers}</span>\n                    </li>\n                    <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                        <b>Etl Jobs</b>\n                      <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.etl_jobs}</span>\n                    </li>\n                    <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                        <b>Cron Jobs</b>\n                      <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.cron_jobs}</span>\n                    </li> \n                    <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                        <b>Build Time</b>\n                      <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.build_time}</span>\n                    </li>  \n                 </ul>\n              </div>\n              </div>\n          </div>\n      </div>\n   </div>\n  </div>\n  );}\n  }       \n}\n \nexport default MemoryInfo;\n \n\n","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n\n\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport $ from 'jquery';\nimport LoaderComponent from '../components/LoaderComponent';\nimport ErrorComponent from '../components/ErrorComponent';\n\nclass Credential extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { credential: [],\n      loader:false,\n      jdbc_values: [],\n      aws_values: [],\n      jdbc_keys: [\"url\",\"user\",\"passsword\",\"driver\"],\n      aws_keys: [\"access_key\",\"secret_key\"],\n      errors: '',\n      is_error: false,\n      credential_name:'',\n      credential_type:'',\n      insert_credential_type: '',\n      error:'',\n      error_code:'',\n\n    }\n    this.filterOperation = [\"JDBC\",\"AWS\"]\n\n  }\n\n\n  setErrorState(error,error_code) {\n    this.setState(prevState => ({\n      error: error,\n      error_code: error_code\n    }))\n  }\n  async fetchEtlFlowCreds() {\n    const GRAPHQL_URL = this.props.GRAPHQL_URL\n    const token = localStorage.getItem('Authorization')\n\n    this.setState(prevState => ({\n      loader: true\n    }))\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {  \n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          query {\n            credential {\n              name\n              type\n              valid_from\n            }\n           }\n          `\n        }\n      )  \n    })\n\n\n    if (!response.ok) {\n      const message = `An error has occured: ${response.status}`;\n      if (response.status === 403) {\n        this.props.logout()\n      } else if (response.status === 404) {\n        this.setErrorState('Not Found',response.status)\n      } else if (response.status === 0) {\n        this.setErrorState('ERR_CONNECTION_REFUSED.Server is down',response.status)\n      } else { \n        throw  new Error(message);\n      }\n    }\n\n    const {data} = await response.json();\n    this.setState(prevState => ({\n      loader: false\n    }))\n    return data;   \n  }\n\n  async updateCreds(name,type,value) {\n    const GRAPHQL_URL = this.props.GRAPHQL_URL\n    const token = localStorage.getItem('Authorization')\n\n    var props_updated = JSON.stringify(value).replaceAll(\"\\\"?\",\"\").replaceAll(\"?\\\"\",\"\")\n\n    var query = ` mutation { update_credentials (name:\\\"${name}\\\", type:JDBC, value: ${props_updated}) { name } }`\n    if(type === \"aws\") {\n      query = ` mutation { update_credentials (name:\\\"${name}\\\", type:AWS, value: ${props_updated}) { name } }`\n    }\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: query\n        }\n      )  \n    })\n    \n    if (response.status === 403) {\n      this.props.logout()\n    } else if (response.status === 404) {\n      this.setErrorState('Not Found',response.status)\n    } else if (response.status === 0) {\n      this.setErrorState('ERR_CONNECTION_REFUSED.Server is down',response.status)\n    } else {  \n      const {data,errors} = await response.json();\n\n      if(JSON.parse(JSON.stringify(data.update_credentials)) !== null){\n        this.setJobErrorDeails(false)\n      }\n      else {\n        this.setJobErrorDeails(true,JSON.parse(JSON.stringify(errors)))\n      }\n  \n      return data;    \n    }   \n  }\n\n  async insertCreds(name,type,value) {\n    const GRAPHQL_URL = this.props.GRAPHQL_URL\n    const token = localStorage.getItem('Authorization')\n\n    var props_updated = JSON.stringify(value).replaceAll(\"\\\"?\",\"\").replaceAll(\"?\\\"\",\"\")\n    var query = ` mutation { add_credentials (name:\\\"${name}\\\", type:JDBC, value: ${props_updated}) { name } }`\n    if(type === \"AWS\") {\n      query = ` mutation { add_credentials (name:\\\"${name}\\\", type:AWS, value: ${props_updated}) { name } }`\n    }\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: query\n        }\n      )  \n    })\n    \n    if (response.status === 403) {\n      this.props.logout()\n    } else if (response.status === 404) {\n      this.setErrorState('Not Found',response.status)\n    } else if (response.status === 0) {\n      this.setErrorState('ERR_CONNECTION_REFUSED.Server is down',response.status)\n    } else {  \n      const {data,errors} = await response.json();\n      if(JSON.parse(JSON.stringify(data.add_credentials)) !== null){\n        this.setJobErrorDeails(false)\n      }\n      else {\n        this.setJobErrorDeails(true,errors[0].message)\n      }\n  \n      return data;    \n    } \n    \n  }\n\n  setUpdateCredInitialState(){\n    this.setState(prevState => ({  \n      aws_values: [],\n      jdbc_values: []\n    }))\n  }\n\n  setNotification(state){\n    this.setState(prevState => ({\n      notification: state\n    }))\n  }\n\n  createUpdateCredUI(){\n    if(this.state.credential_type === \"jdbc\"){\n    return this.state.jdbc_keys.map((el, i) => \n        <div key={i}>\n        <div class=\"row\">\n          <div class=\"col-xs-4 col-sm-4 col-md-4\">\n            <div class=\"form-group\">\n               <input class=\"form-control\" type=\"text\" placeholder={this.state.jdbc_keys[i]} disabled/>\n            </div>\n          </div>  \n          <div class=\"col-xs-7 col-sm-7 col-md-7\">\n            <div class=\"form-group\">\n              <input class=\"form-control\"  type=\"text\"  placeholder=\"***********\" onChange={this.setInsertValues.bind(this, i)} />\n            </div>    \n          </div> \n        </div> \n        </div>            \n    )\n    }else if(this.state.credential_type === \"aws\"){\n      return this.state.aws_keys.map((el, i) => \n        <div key={i}>\n        <div class=\"row\">\n          <div class=\"col-xs-4 col-sm-4 col-md-4\">\n            <div class=\"form-group\">\n               <input class=\"form-control\" type=\"text\" placeholder={this.state.aws_keys[i]} disabled/>\n            </div>\n          </div>  \n          <div class=\"col-xs-7 col-sm-7 col-md-7\">\n            <div class=\"form-group\">\n              <input class=\"form-control\"  type=\"text\"  placeholder=\"***********\" onChange={this.setInsertValues.bind(this, i)} />\n            </div>\n          </div> \n        </div> \n        </div>            \n    )\n    }\n  }\n\n  createAddCredUI(){\n    if(this.state.insert_credential_type === \"JDBC\"){\n    return this.state.jdbc_keys.map((el, i) => \n        <div key={i}>\n        <div class=\"row\">\n          <div class=\"col-xs-4 col-sm-4 col-md-4\">\n            <div class=\"form-group\">\n               <input class=\"form-control\" type=\"text\" placeholder={this.state.jdbc_keys[i]} disabled/>\n            </div>\n          </div>  \n          <div class=\"col-xs-7 col-sm-7 col-md-7\">\n            <div class=\"form-group\">\n              <input class=\"form-control\"  type=\"text\"  placeholder=\"Type Value\" onChange={this.setValues.bind(this, i)} />\n            </div>\n          </div> \n        </div> \n        </div>            \n    )\n    }else if(this.state.insert_credential_type === \"AWS\"){\n      return this.state.aws_keys.map((el, i) => \n        <div key={i}>\n        <div class=\"row\">\n          <div class=\"col-xs-4 col-sm-4 col-md-4\">\n            <div class=\"form-group\">\n               <input class=\"form-control\" type=\"text\" placeholder={this.state.aws_keys[i]} disabled/>\n            </div>\n          </div>  \n          <div class=\"col-xs-7 col-sm-7 col-md-7\">\n            <div class=\"form-group\">\n              <input class=\"form-control\"  type=\"text\"  placeholder=\"Type Value\" onChange={this.setValues.bind(this, i)} />\n            </div>\n          </div> \n        </div> \n        </div>            \n    )\n    }\n  }\n\n  setAddCredInitialState(){\n  this.setState(prevState => ({  \n    insert_credential_type: '',\n    aws_values: [],\n    jdbc_values: []\n  }))\n  document.getElementById(\"cred_name\").value = ''\n  }\n\n  setValues(i, event) {\n\n  if(this.state.insert_credential_type === \"JDBC\") {\n    let jdbc_values = [...this.state.jdbc_values];\n    jdbc_values[i] =  event.target.value;\n    this.setState({ jdbc_values });\n   } else{ \n    let aws_values = [...this.state.aws_values];\n    aws_values[i] =  event.target.value;\n    this.setState({ aws_values });\n   }\n  }\n \n  setInsertValues(i, event) {\n\n  if(this.state.credential_type === \"jdbc\") {\n    let jdbc_values = [...this.state.jdbc_values];\n    jdbc_values[i] =  event.target.value;\n    this.setState({ jdbc_values });\n   } else{ \n    let aws_values = [...this.state.aws_values];\n    aws_values[i] =  event.target.value;\n    this.setState({ aws_values });\n   }\n  }\n \n  componentDidMount() {\n    //calling getInfo api\n    this.setCredentials()\n  }\n\n  setCredentials(){\n    this.fetchEtlFlowCreds().then(({credential}) => {\n      this.setState(prevState => ({\n        credential: credential\n      }))\n    }).catch(error => {\n        this.setState(prevState => ({\n          error: error,\n          loader: false\n        }))\n    });\n  }\n\n  setCredUpdateDeails(name){\n    this.setState(prevState => ({\n      credential_name: name\n      }))\n  } \n\n  updateCredentials() {\n\n    var final_props = []\n    var i;\n\n    if(this.state.credential_type === \"jdbc\") {\n      for (i = 0; i < this.state.jdbc_keys.length; i++) {\n        var props = {[\"?key?\"] : this.state.jdbc_keys[i],[\"?value?\"] : this.state.jdbc_values[i]}\n       final_props[i] =  props\n       }\n     } else{ \n       for (i = 0; i < this.state.aws_keys.length; i++) {\n         var props = {[\"?key?\"] : this.state.aws_keys[i],[\"?value?\"] : this.state.aws_values[i]}\n        final_props[i] =  props\n        }\n     }\n \n   var props = ''\n \n   this.updateCreds(this.state.credential_name,this.state.credential_type,final_props).then(({update_credentials}) => {\n     this.setNotification(true)\n     var data =  JSON.parse(JSON.stringify(update_credentials))\n   }).catch(error => {\n    this.setState(prevState => ({\n      error: error,\n      loader: false\n    }))\n});\n\n   this.setState(prevState => ({  \n    credential_type: '',\n    aws_values: [],\n    jdbc_values: []\n  }))\n  }\n\n  async addCredentials() {\n\n    var final_props = []\n    var i;\n\n    if(this.state.insert_credential_type === \"JDBC\") {\n     for (i = 0; i < this.state.jdbc_keys.length; i++) {\n       var props = {[\"?key?\"] : this.state.jdbc_keys[i],[\"?value?\"] : this.state.jdbc_values[i]}\n      final_props[i] =  props\n      }\n    } else{ \n      for (i = 0; i < this.state.aws_keys.length; i++) {\n        var props = {[\"?key?\"] : this.state.aws_keys[i],[\"?value?\"] : this.state.aws_values[i]}\n       final_props[i] =  props\n       }\n    }\n \n   var props = ''\n \n   var cred_name = document.getElementById(\"cred_name\").value\n\n   this.insertCreds(cred_name,this.state.insert_credential_type,final_props).then(({add_credentials}) => {\n     this.setNotification(true)\n     var data =  JSON.parse(JSON.stringify(add_credentials))\n   }, () => this.setAddCredInitialState())\n\n   this.setState(prevState => ({  \n    insert_credential_type: '',\n    aws_values: [],\n    jdbc_values: []\n  }))\n  document.getElementById(\"cred_name\").value = ''\n  }\n\n  setJobErrorDeails(is_error,errors){\n    this.setState(prevState => ({\n      is_error: is_error,\n      errors: errors                   \n      }))\n  }\n\n  render(){\n\n    var filter_button_name = ''\n    if (this.state.credential_type !== '') {\n      filter_button_name = this.state.credential_type  \n    }else {\n      filter_button_name = \"Add Credential Type\"\n    } \n\n    var filter_insert_button_name = ''\n    if (this.state.insert_credential_type !== '') {\n      filter_insert_button_name = this.state.insert_credential_type  \n    }else {\n      filter_insert_button_name = \"Add Credential Type\"\n    } \n\n    var filter_update_button_name = ''\n    if (this.state.credential_type !== '') {\n      filter_update_button_name = this.state.credential_type  \n    }else {\n      filter_update_button_name = \"Add Credential Type\"\n    } \n\n\n    var notification_var = \"\"\n    if(this.state.notification){\n      if(this.state.is_error) {\n         notification_var =\n         <div class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">\n            <h4 class=\"alert-heading\">Error while Updatating Credential ! {this.state.errors}</h4>\n            <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" onClick = {() => {this.setNotification(false)}}>\n               <span aria-hidden=\"true\">&times;</span>\n            </button>\n         </div>\n       } else {\n          notification_var =\n          <div class=\"alert alert-success alert-dismissible fade show\" role=\"alert\">\n             <h4 class=\"alert-heading\">Credentials  submitted successfully!  </h4>\n             <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" onClick = {() => {this.setNotification(false)}}>\n                <span aria-hidden=\"true\">&times;</span>\n             </button>\n          </div>\n        }  \n    }\n\n    if (this.state.error !== ''){\n      return (\n        <div>\n          <ErrorComponent error={this.state.error}/>\n        </div>\n      );\n     } else if (this.state.loader){\n      return (\n        <div>\n          <LoaderComponent job_run_id={this.job_run_id}  set_job_run_state = {this.set_job_run_state} />\n        </div>\n      );\n     }\n    else{\n      return (\n        <div className=\"container\">\n        <div>{notification_var}</div>\n          <ul class = \"pagination justify-content-center\">\n            <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                   this.setCredentials()\n                }} >\n               Refresh\n            </button>\n            <div class=\"inner\"> \n               <button type=\"button\" class=\"btn btn-warning ml-2\" data-toggle=\"modal\" data-target=\"#exampleModal1\">\n                   Add New Credentials\n               </button>\n               <div class=\"modal fade\" id=\"exampleModal1\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel1\" aria-hidden=\"true\">\n                  <div class=\"modal-dialog\" role=\"document\">\n                    <div class=\"modal-content\">\n                      <div class=\"modal-header\">\n                        <h5 class=\"modal-title\" id=\"exampleModalLabel1\">Add Credentials</h5>\n                        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                          <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                      </div>\n                      <div class=\"modal-body\">\n                        <div class=\"row\">\n                          <div class=\"col-xs-7 col-sm-7 col-md-7\">\n                            <div class=\"form-group\">\n                               Credential Name\n                               <input class=\"form-control\" placeholder=\"Add Name\"  type=\"text\" id=\"cred_name\"/>\n                            </div>\n                          </div> \n                          <div class=\"col-xs-7 col-sm-7 col-md-7\">\n                            <div class=\"form-group\">\n                            <div class=\"dropdown\">\n                              <button type=\"button\" class=\"btn btn-light dropdown-toggle\" data-toggle=\"dropdown\">\n                                {filter_insert_button_name}\n                              </button>\n                              <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n                                { this.filterOperation.map ( filter => (\n                                  <a class=\"dropdown-item\">\n                                     <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                                     this.setState(prevState => ({\n                                      insert_credential_type: filter\n                                   }))\n                                   }}> {filter} </button>\n                                  </a>\n                                ))}\n                              </div>\n                            </div> \n                            </div>\n                          </div>  \n                        </div> \n                        {this.createAddCredUI()} \n                        <input type=\"button\" class=\"btn btn-primary ml-2\" value=\"Submit\" onClick = {() => this.addCredentials()}/>\n                      </div>\n                      <div class=\"modal-footer\">\n                        <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n             </div>\n          </ul>\n          <table id=\"jobruns\" class=\"table table-sm table-bordered\">\n              <thead class=\"thead-dark\">\n                    <tr>\n                      <th>Credential Name</th>\n                      <th>Type</th>\n                      <th>Last Updated</th>\n                      <th>Action</th>\n                    </tr>\n                  </thead>\n                    <tbody>\n                    {this.state.credential.map( data => (\n                      <tr>\n                        <td>{data.name}</td>\n                        <td>{data.type}</td>\n                        <td>{data.valid_from}</td>\n                        <td>\n                        <div class=\"inner\">\n                             <button type=\"button\" class=\"btn btn-warning ml-2\" data-toggle=\"modal\" data-target=\"#exampleModal\"  onClick = {() => \n                                      this.setState(prevState => ({\n                                        credential_name: data.name,\n                                        credential_type: data.type\n                                  }))}>\n                                 Update\n                             </button>\n                             <div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                                <div class=\"modal-dialog\" role=\"document\">\n                                  <div class=\"modal-content\">\n                                    <div class=\"modal-header\">\n                                      <h5 class=\"modal-title\" id=\"exampleModalLabel\">Update Credentials</h5>\n                                      <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                        <span aria-hidden=\"true\">&times;</span>\n                                      </button>\n                                    </div>\n                                    <div class=\"modal-body\">\n                                    <div class=\"row\">\n                                        <div class=\"col-xs-7 col-sm-7 col-md-7\">\n                                          <div class=\"form-group\">\n                                             Credential Name\n                                             <input class=\"form-control\" placeholder={this.state.credential_name}  type=\"text\" disabled/>\n                                          </div>\n                                        </div> \n                                        <div class=\"col-xs-7 col-sm-7 col-md-7\">\n                                          <div class=\"form-group\">\n                                              Type\n                                             <input class=\"form-control\" placeholder={this.state.credential_type}   type=\"text\" disabled/>\n                                          </div>\n                                        </div>  \n                                      </div> \n                                      {this.createUpdateCredUI()}        \n                                      <input type=\"button\" class=\"btn btn-primary ml-2\" value=\"Submit\" onClick = {() => this.updateCredentials()}/>\n                                    </div>\n                                    <div class=\"modal-footer\">\n                                      <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                    </div>\n                                  </div>\n                                </div>\n                              </div>\n                           </div>\n                        </td>\n                      </tr>\n                    ))}\n                    </tbody>\n               </table>  \n             </div>\n      );\n   }      \n  }\n}\n\nexport default Credential;\n","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n\nimport '../css/App.css'\nimport { withRouter } from 'react-router'\n\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport $ from 'jquery';\nimport ErrorComponent from '../components/ErrorComponent';\n\nclass JobList extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { \n      jobs: [],\n      notification: false,\n      run_job_props: '',\n      job_name: '',\n      errors: [],\n      is_error: false,\n      is_active: true,\n      values: [],keys: [],\n      error:'',\n      error_code:'',\n\n    }\n  }\n\n  async updateJobActiveState(job_name,state) {\n    const GRAPHQL_URL = this.props.GRAPHQL_URL\n    const token = localStorage.getItem('Authorization')\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n            mutation {\n              update_job_state (name:\\\"${job_name}\\\" ,state: ${state}){\n             }\n           }\n          `\n        }\n      )  \n    })\n    \n\n    if (!response.ok) {\n      const message = `An error has occured: ${response.status}`;\n      if (response.status === 403) {\n        this.props.logout()\n      } else if (response.status === 404) {\n        this.setErrorState('Not Found',response.status)\n      } else if (response.status === 0) {\n        this.setErrorState('ERR_CONNECTION_REFUSED.Server is down',response.status)\n      } else { \n        throw  new Error(message);\n      }\n    } else {\n      const {data} = await response.json();\n      return data;    \n    }\n  }\n\n  async runEtlJob(job_name,props) {\n    const GRAPHQL_URL = this.props.GRAPHQL_URL\n    const token = localStorage.getItem('Authorization')\n\n    var query =  `\n      mutation {\n        run_job (name:\\\"${job_name}\\\"){\n          name\n          props {key value}\n      }\n      }\n    ` \n    if(props.length > 0) {\n      var props_updated = JSON.stringify(props).replaceAll(\"\\\"$\",\"\").replaceAll(\"$\\\"\",\"\")\n      query =  `\n      mutation {\n        run_job (name:\\\"${job_name}\\\" ,props: ${props_updated}){\n          name\n          props {key value}\n      }\n      }\n    ` \n    }\n    this.setState(prevState => ({\n      loader: true\n    }))\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: query\n        }\n      )  \n    })\n\n\n    if (!response.ok) {\n      const message = `An error has occured: ${response.status}`;\n      if (response.status === 403) {\n        this.props.logout()\n      } else if (response.status === 404) {\n        this.setErrorState('Not Found',response.status)\n      } else if (response.status === 0) {\n        this.setErrorState('ERR_CONNECTION_REFUSED.Server is down',response.status)\n      } else { \n        throw  new Error(message);\n      }\n    } else {\n      this.setState(prevState => ({\n        loader: false\n      }))\n\n      const {data,errors} = await response.json();\n      if(JSON.parse(JSON.stringify(data.run_job)) !== null){\n          this.setJobErrorDeails(false)\n      }\n      else {\n        this.setJobErrorDeails(true,JSON.parse(JSON.stringify(errors)))\n      }\n      return data;  \n    }  \n }\n\n  componentDidMount() {\n    var dt = $('#joblist').DataTable({\n      \"order\": [[ 6, \"desc\" ]]\n  });\n    dt.column(6).visible(false);\n    dt.column(3).visible(false);\n\n  }\n\n  showModal(data)\n  {\n    var job_properties = \"\" \n    { \n      data.map(  props =>\n        job_properties  += \"<b>\"+ props.key + \"</b>\" +\"=\" + props.value + \"<br></br>\"\n    )}\n\n   {$(\"#jobListeModal .modal-body\").html(job_properties)}\n   $(\"#jobListeModal\").modal();\n  }\n\n  setNotification(state){\n    this.setState(prevState => ({\n      notification: state\n    }))\n  }\n\n  setJobDeails(job_name,props){\n    this.setState(prevState => ({\n      job_name: job_name,\n      run_job_props: props                    \n      }))\n  }\n\n  setJobErrorDeails(is_error,errors){\n    this.setState(prevState => ({\n      is_error: is_error,\n      errors: errors                    \n      }))\n  }\n\n  handleOnClick(job_name){    \n    this.props.history.push('/JobRuns/' + job_name)\n  }\n\n  createUI(){\n    return this.state.values.map((el, i) => \n        <div key={i}>\n        <div class=\"row\">\n          <div class=\"col-xs-4 col-sm-4 col-md-4\">\n            <div class=\"form-group\">\n               <input class=\"form-control\" value={this.state.keys[i]} type=\"text\" placeholder=\"Type Key\" onChange={this.set_run_job_keys.bind(this, i)} />\n            </div>\n          </div>  \n          <div class=\"col-xs-7 col-sm-7 col-md-7\">\n            <div class=\"form-group\">\n              <input class=\"form-control\" value={el||''} type=\"text\"  placeholder=\"Type Value\" onChange={this.set_run_job_values.bind(this, i)} />\n            </div>\n          </div> \n         <div class=\"col-xs-3\">\n             <input type='button' class=\"btn btn-danger\" value='-' onClick={this.remove_props.bind(this, i)}/>\n         </div>\n        </div> \n        </div>            \n    )\n  }\n\n  setRunJobValues(i, event) {\n    let values = [...this.state.values];\n    values[i] =  event.target.value;\n    this.setState({ values });\n  }\n\n  setRunJobKeys(i, event) {\n  let keys = [...this.state.keys];\n  keys[i] =  event.target.value;\n  this.setState({ keys });\n  }\n \n  addProps(){\n   this.setState(prevState => ({ values: [...prevState.values, '']}))\n  }\n \n  removeProps(i){\n\n    let values = [...this.state.values];\n    values.splice(i,1); \n    this.setState({ values });\n\n    let keys = [...this.state.keys];\n    keys.splice(i,1);\n    this.setState({ keys });\n  }\n\n  submitRunJob(job_name) {\n\n   var final_props = []\n   var i;\n   for (i = 0; i < this.state.keys.length; i++) {\n    var props = {[\"$key$\"] : this.state.keys[i],[\"$value$\"] : this.state.values[i]}\n    final_props[i] =  props\n   }\n\n  var props = ''\n\n  this.runEtlJob(this.state.job_name,final_props).then(({run_job}) => {\n    this.setNotification(true)\n    var data =  JSON.parse(JSON.stringify(run_job))\n    if(data !== null){\n        props = JSON.stringify(data[\"props\"]) \n        var job_name = JSON.stringify(data[\"name\"]) \n        this.setJobDeails(job_name,props)\n   }}).catch(error => {\n    this.setState(prevState => ({\n      error: error\n    }))\n    });  \n  }\n\n\n  render(){\n    var props = ''\n    var notification_var = \"\"\n    if(this.state.notification){\n      if(this.state.is_error) {\n         notification_var =\n         <div class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">\n            <h4 class=\"alert-heading\">Error while submitting job!</h4>\n            <p>{JSON.parse(JSON.stringify(this.state.errors)).map( (data) => data.message)}</p>\n            <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" onClick = {() => {this.setNotification(false)}}>\n               <span aria-hidden=\"true\">&times;</span>\n            </button>\n         </div>\n       } else {\n          notification_var =\n          <div class=\"alert alert-success alert-dismissible fade show\" role=\"alert\">\n             <h4 class=\"alert-heading\">Job {this.state.job_name.replace(/^\"(.*)\"$/, '$1')} submitted successfully!  </h4>\n             <p>{this.state.run_job_props}</p>\n             <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" onClick = {() => {this.setNotification(false)}}>\n                <span aria-hidden=\"true\">&times;</span>\n             </button>\n          </div>\n        }  \n    }\n  \n    return (\n          <div class=\"container-fluid\">\n          <div>{notification_var}</div>\n          <ul class = \"pagination justify-content-center\">\n             <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                      this.props.getEtlJobs() \n                }} >\n               Refresh\n             </button>\n         </ul>\n          <table id=\"joblist\" class=\"table table-sm table-bordered\">\n            <thead class=\"thead-dark\">\n                  <tr>\n                    <th>Active/Inactive</th>\n                    <th>Job Name</th>\n                    <th>Schedule</th>\n                    <th>Next Schedule</th>\n                    <th>Schedule Remaining Time</th>\n                    <th>Job Last Run</th>\n                    <th>Job Last Time</th>\n                    <th>Action</th>\n                  </tr>\n                </thead>\n                  <tbody>\n                  {this.props.jobs.map( (data) => (\n                    <tr>\n                      <td>{(() => {\n                           if (this.state.is_active && data.is_active) {\n                             return (\n                               <div className = \"checkbox\">\n                                 <input type=\"checkbox\"\n                                     aria-describedby=\"UsernameHelp\"\n                                     data-toggle = \"toggle\"\n                                     defaultChecked\n                                     onClick={e => this.updateJobActiveState(data.name,false).then(({update_job_state}) => {\n                                      this.props.getEtlJobs()\n                                      this.setState(prevState => ({  \n                                        is_active: false\n                                      }))\n                                    })}>\n                                 </input>\n                               </div>\n                             )\n                           } else {\n                            return (\n                              <div className = \"checkbox\">\n                                <input type=\"checkbox\"\n                                     aria-describedby=\"UsernameHelp\"\n                                     data-toggle = \"toggle\"\n                                     onClick={e => this.updateJobActiveState(data.name,true).then(({update_job_state}) => {\n                                      this.props.getEtlJobs()\n                                      this.setState(prevState => ({  \n                                        is_active: true\n                                      }))\n                                    })}>\n                                 </input>\n                              </div>\n                            )\n                           }\n                         })()}\n                      </td>\n                        <td> <button type=\"button\" class=\"btn btn-link\" data-dismiss=\"modal\" onClick = {() => this.handleOnClick(data.name)}>{data.name}</button></td>\n                      <td>{data.schedule}</td>\n                      <td>{data.nextSchedule}</td>\n                      <td data-order={data.nextSchedule}>{data.schduleRemainingTime}</td>\n                      <td data-order={data.last_run_time}>\n                      {(() => {\n\n                           if (data.last_run_time === 0) {\n                             return (\n                               <div>\n                               </div>\n                             )\n                           } else {\n                             return (\n                               <div>  \n                                  {data.last_run_description}\n                               </div>\n                             )\n                           } \n                         })()}\n                      </td>\n                      <td>{data.last_run_time}</td>\n\n                      <td >\n                      <div class='row'>\n                      <div class='col-xs-12 button-wrapper' class=\"inner\">\n                          <button type=\"button\" class=\"btn btn-secondary ml-2\" data-toggle=\"modal\" onClick = {() => this.showModal(data.props)}>\n                            Properties\n                          </button>\n                          <div class=\"modal fade\" id=\"jobListeModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                            <div class=\"modal-dialog\" role=\"document\">\n                              <div class=\"modal-content\">     \n                                <div class=\"modal-header\">\n                                  <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                  <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                    <span aria-hidden=\"true\">&times;</span>\n                                  </button>\n                                </div>\n                                <div class=\"modal-body\">\n                                </div>\n                                <div class=\"modal-footer\">\n                                  <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n\n\n                          <div class=\"inner\">\n                             <button type=\"button\" class=\"btn btn-warning ml-2\" data-toggle=\"modal\" data-target=\"#exampleModal\" onClick = {() => \n                                      this.setState(prevState => ({\n                                          job_name: data.name\n                                  }))}>\n                                 Run\n                             </button>\n                             <div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                                <div class=\"modal-dialog\" role=\"document\">\n                                  <div class=\"modal-content\">\n                                    <div class=\"modal-header\">\n                                      <h5 class=\"modal-title\" id=\"exampleModalLabel\">Run Job</h5>\n                                      <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                        <span aria-hidden=\"true\">&times;</span>\n                                      </button>\n                                    </div>\n                                    <div class=\"modal-body\">\n                                       {this.createUI()}        \n                                      <input type='button' class=\"btn btn-primary ml-2\" value='Add Properties' onClick={this.addProps.bind(this)}/>\n                                      <input type=\"button\" class=\"btn btn-primary ml-2\" value=\"Submit\" onClick = {() => this.submitRunJob()}/>\n                                    </div>\n                                    <div class=\"modal-footer\">\n                                      <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                    </div>\n                                  </div>\n                                </div>\n                              </div>\n                           </div>\n                           </div>\n                           </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n            </table>\n      </div>     \n    );\n  }\n}\n// export default JobList;\nexport default withRouter(JobList)","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery/dist/jquery.min.js';\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport $ from 'jquery';\nimport '../css/App.css'\nimport { withRouter } from 'react-router'\nimport ErrorComponent from '../components/ErrorComponent';\n\nimport LoaderComponent from '../components/LoaderComponent';\n\nclass JobRuns extends React.Component {\n  constructor(props){\n    super(props); \n    this.job_run_id = ''\n    this.filterOperation = [\"IN\",\"NOT IN\"]\n    this.state  = { \n      jobruns: [],\n      filter: '',\n      job_name: '',\n      filter_start_date: '',\n      filter_end_date: '',\n      paginationValue: 0,\n      loader:false,\n      errors: [],\n      is_error: false,\n      notification: false,\n      run_job_props: '',\n      error:'',\n      error_code:'',\n\n    }\n\n  }\n\n  async fetchEtlFlowJobs() {\n    const GRAPHQL_URL = this.props.GRAPHQL_URL\n    const token = localStorage.getItem('Authorization')\n\n    const limit = 10;\n    const offset = this.state.paginationValue;\n\n    var query = ` query { jobruns(limit: ${limit} , offset: ${offset}){ job_run_id job_name properties state start_time elapsed_time job_type is_master}}`\n    \n    if(this.props.match.params.job_name !== undefined){\n      query = ` query { jobruns(limit: ${limit} , offset: ${offset} ,filter: \"IN\", jobName: \\\"${this.props.match.params.job_name}\\\"  )\n              { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n\n      if (this.state.filter_end_date !== \"\") {\n        query = ` query { jobruns(limit: ${limit} , offset: ${offset},  startTime: \\\"${this.state.filter_start_date}\\\", endTime: \\\"${this.state.filter_end_date}\\\",filter: \"IN\", jobName: \\\"${this.props.match.params.job_name}\\\"  )\n        { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n      } \n\n      this.setState(prevState => ({\n        filter: 'IN',\n        job_name: this.props.match.params.job_name\n      }))\n\n    } else {\n      if (this.state.filter_end_date !== \"\" && this.state.filter !== \"\" ) {\n        query = ` query { jobruns(limit: ${limit} , offset: ${offset},  startTime: \\\"${this.state.filter_start_date}\\\", endTime: \\\"${this.state.filter_end_date}\\\",filter: \\\"${this.state.filter}\\\", jobName: \\\"${this.state.job_name}\\\"  )\n        { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n      } else if (this.state.filter_end_date !== \"\" ){\n        query = ` query { jobruns(limit: ${limit} , offset: ${offset},  startTime: \\\"${this.state.filter_start_date}\\\", endTime: \\\"${this.state.filter_end_date}\\\")\n        { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n      } else if (this.state.filter !== \"\" && this.state.job_name !== \"\") {\n        query = ` query { jobruns(limit: ${limit} , offset: ${offset}, filter: \\\"${this.state.filter}\\\", jobName: \\\"${this.state.job_name}\\\"  )\n        { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n      } else if (this.state.filter === \"\" && this.state.job_name !== \"\" ) {\n        query = ` query { jobruns(limit: ${limit} , offset: ${offset} ,filter: \"IN\", jobName: \\\"${this.state.job_name}\\\"  )\n        { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n      } else {\n        query = ` query { jobruns(limit: ${limit} , offset: ${offset}){ job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n      }\n    }\n\n    this.setState(prevState => ({\n      loader: true\n    }))\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: query\n        }\n      )  \n    })\n\n\n    if (!response.ok) {\n      const message = `An error has occured: ${response.status}`;\n      if (response.status === 403) {\n        this.props.logout()\n      } else if (response.status === 404) {\n        this.setErrorState('Not Found',response.status)\n      } else if (response.status === 0) {\n        this.setErrorState('ERR_CONNECTION_REFUSED.Server is down',response.status)\n      } else { \n        throw  new Error(message);\n      }\n    } else {\n    const {data} = await response.json();\n    this.setState(prevState => ({\n      loader: false\n    }))\n\n    return data;  \n  } \n  }\n\n  async runeEtlJob(job_name,props) {\n    const GRAPHQL_URL = this.props.GRAPHQL_URL\n    const token = localStorage.getItem('Authorization')\n\n    var query =  `\n      mutation {\n        run_job (name:\\\"${job_name}\\\"){\n          name\n          props {key value}\n      }\n      }\n    ` \n    if(props.length > 0) {\n      var props_updated = [JSON.stringify(props).replaceAll(\"\\\"$\",\"\").replaceAll(\"$\\\"\",\"\")]   \n      query =  `\n      mutation {\n        run_job (name:\\\"${job_name}\\\" ,props: ${props_updated}){\n          name\n          props {key value}\n      }\n      }\n    ` \n    }\n    this.setState(prevState => ({\n      loader: true\n    }))\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: query\n        }\n      )  \n    })\n\n    if (!response.ok) {\n      const message = `An error has occured: ${response.status}`;\n      if (response.status === 403) {\n        this.props.logout()\n      } else if (response.status === 404) {\n        this.setErrorState('Not Found',response.status)\n      } else if (response.status === 0) {\n        this.setErrorState('ERR_CONNECTION_REFUSED.Server is down',response.status)\n      } else { \n        throw  new Error(message);\n      }\n    } else {\n\n    this.setState(prevState => ({\n      loader: false\n    }))\n    const {data,errors} = await response.json();\n    if(JSON.parse(JSON.stringify(data.run_job)) !== null){\n      this.setJobErrorDeails(false)\n    }\n    else {\n      this.setJobErrorDeails(true,JSON.parse(JSON.stringify(errors)))\n    }\n    return data;  \n  }  \n  }\n\n  setJobErrorDeails(is_error,errors){\n    this.setState(prevState => ({\n      is_error: is_error,\n      errors: errors                    \n      }))\n  }\n\n  setInterval() {\n    this.timerID = setInterval(\n      () => this.fetchEtlFlowJobs(),\n      1000 * 1000\n    );\n  }\n \n  componentDidMount() {\n    this.setJobruns()\n    this.setInterval();\n  }\n\n  componentWillUnmount() {\n  clearInterval(this.timerID);\n  }\n\n  setJobruns(){\n  this.fetchEtlFlowJobs().then(({jobruns}) => {\n    this.setState(prevState => ({\n      jobruns: jobruns\n    }))\n   }).catch(error => {\n    this.setState(prevState => ({\n      error: error\n    }))})\n  }\n\n  setJobName() {\n  this.setState(prevState => ({\n    job_name: document.getElementById(\"exampleDataList\").value\n  }))\n  }\n\n  setFilterStartDate() {\n   this.setState(prevState => ({\n    filter_start_date: document.getElementById(\"start_date\").value\n   }))\n  }\n\n  setFilterEndDate() {\n   this.setState(prevState => ({\n    filter_end_date: document.getElementById(\"end_date\").value\n   }))\n  } \n\n  showModal(data)\n {\n   var props = ''\n   var data_jobruns = JSON.parse(data)\n\n   for(var key in data_jobruns) {\n   { \n       props  += \"<b>\"+ key + \"</b>\" +\"=\" + data_jobruns[key]+ \"<br></br>\"\n   }\n  {$(\"#jobRunModal .modal-body\").html(props)}\n  $(\"#jobRunModal\").modal();\n }\n  }\n\n  retryJobRun(job_name,data)\n {\n   var final_props = []\n   var data_jobruns = JSON.parse(data)\n   var default_props=[\"job_send_slack_notification\", \"job_enable_db_logging\", \"job_notification_level\"];\n\n   var i = 0\n   var final_props = []\n   var i;\n   for(var key in data_jobruns) {\n     if(!default_props.includes(key)){\n        final_props[i] =  {[\"$key$\"] : key,[\"$value$\"] : data_jobruns[key]}\n        i++\n     }\n   }\n   var props = ''\n\n\n   this.runEtlJob(job_name,final_props).then(({run_job}) => {\n    this.setNotification(true)\n    var data =  JSON.parse(JSON.stringify(run_job))\n    if(data !== null){\n        props = JSON.stringify(data[\"props\"]) \n        var job_name = JSON.stringify(data[\"name\"]) \n        this.setJobDeails(job_name,props)\n   }});     \n\n  }\n\n  setJobDeails(job_name,props){\n  this.setState(prevState => ({\n    job_name: job_name,\n    run_job_props: props                    \n    }))\n  }\n\n  setNotification(state){\n  this.setState(prevState => ({\n    notification: state\n  }))\n  }\n\n\n  async setInitialState(){\n  this.props.match.params.job_name = undefined\n  this.setState(prevState => ({  \n    filter: '',\n    job_name: '',\n    filter_start_date: '',\n    filter_end_date: '',\n    paginationValue: 0,\n  }), () => this.setJobruns())\n  }\n\n  showJobRunStateModal(data)\n {\n  {$(\"#jobRunStateModal .modal-body\").html(data)}\n  $(\"#jobRunStateModal\").modal();\n  }\n\n  handleOnClick(job_id){    \n  this.props.history.push('/JobRunDetails/' + job_id)\n  }\n\n  render(){\n   \n   var button = ''\n   var filter_button_name = '' \n   var filter_button_job_name = '' \n   var filter_start_date = ''  \n   var filter_end_date = ''  \n   var filter_back_button = ''\n\n   var notification_var = \"\"\n    if(this.state.notification){\n      if(this.state.is_error) {\n         notification_var =\n         <div class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">\n            <h4 class=\"alert-heading\">Error while submitting job!</h4>\n            <p>{JSON.parse(JSON.stringify(this.state.errors)).map( (data) => data.message)}</p>\n            <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" onClick = {() => {this.setNotification(false)}}>\n               <span aria-hidden=\"true\">&times;</span>\n            </button>\n         </div>\n       } else {\n          notification_var =\n          <div class=\"alert alert-success alert-dismissible fade show\" role=\"alert\">\n             <h4 class=\"alert-heading\">Job {this.state.job_name.replace(/^\"(.*)\"$/, '$1')} submitted successfully!  </h4>\n             <p>{this.state.run_job_props}</p>\n             <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" onClick = {() => {this.setNotification(false)}}>\n                <span aria-hidden=\"true\">&times;</span>\n             </button>\n          </div>\n        }  \n    }\n\n   //Code for adding pagination element\n  if (this.state.paginationValue === 0) {\n    button = <li class=\"page-item disabled\">\n    <input type=\"button\" value=\"Previous\" class=\"page-link btn btn-secondary btn-sm\"/></li>\n  } else {\n    button =  <li class=\"page-item\">\n    <input type=\"button\" value=\"Previous\" class=\"page-link btn btn-secondary btn-sm\" onClick = {() => {\n             this.setState(prevState => ({\n              paginationValue: this.state.paginationValue  -   10\n            }))\n            this.fetchEtlFlowJobs(this.state.paginationValue - 10).then(({jobruns}) => {\n              this.setState(prevState => ({\n                jobruns: jobruns\n              }))\n            }) \n    }}/></li>\n  } \n\n   //Code for adding button name\n  if (this.state.filter !== '') {\n    filter_button_name = this.state.filter\n  }else {\n    filter_button_name = \"Add Filter\"\n  } \n\n   //Code for adding button name\n  if (this.state.job_name !== '') {\n     filter_button_job_name = this.state.job_name\n  }else {\n     filter_button_job_name = \"Type to search\"\n  } \n\n  if (this.state.filter_start_date !== '') {\n   filter_start_date = this.state.filter_start_date\n  }else {\n    filter_start_date = \"Start Date\"\n  } \n\n  if (this.state.filter_end_date !== '') {\n    filter_end_date = this.state.filter_end_date\n  }else {\n    filter_end_date = \"End Date\"\n  } \n\n  if(this.props.match.params.job_name !== undefined){\n    filter_back_button= <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                          this.props.history.push('/')\n                         }} >\n                        Back\n                        </button>\n  }\n\n  if (this.state.error !== ''){\n    return (\n      <div>\n        <ErrorComponent error={this.state.error}/>\n      </div>\n    );\n   } else  if (this.state.loader){\n    return (\n      <div>\n        <LoaderComponent />\n      </div>\n    );\n   }\n   else{\n   return (\n     <div className=\"container-fluid\">\n       <h3>{this.state.loader}</h3>\n       <div>{notification_var}</div>\n       <ul class = \"pagination justify-content-center\">\n         <div class=\"dropdown\">\n            <button class=\"btn btn-light dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n               {filter_button_name}\n            </button>\n            <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n              { this.filterOperation.map ( filter => (\n                   <a class=\"dropdown-item\">\n                      <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                           this.setState(prevState => ({\n                               filter: filter\n                       }))}}> {filter} </button>\n                   </a>\n              ))}\n            </div>\n         </div>\n         <div className =\"form-inline float-right\">\n             <div className=\"mb-1\">\n             <input type=\"text\"\n                        className=\"form-control input-sm\"\n                        list = \"datalistOptions\"\n                        id = \"exampleDataList\"\n                        placeholder = {filter_button_job_name}\n                        onChange={e => this.setJobName()}></input>      \n             </div>\n             <datalist id = \"datalistOptions\">\n               {this.props.jobs.map( data => (\n                 <option value = {data.name}></option>\n               ))}\n             </datalist> \n         </div>\n         <div class = \"form-inline float-right\">\n              <div class = \"mb-1\"> \n                  <input type=\"date\"\n                         className=\"form-control input-sm\"\n                         placeholder={filter_start_date}\n                         id = \"start_date\"\n                         onChange={e => this.setFilterStartDate()}\n                   ></input>\n              </div>\n              <div class = \"mb-1\"> \n                  <input type=\"date\"\n                         className=\"form-control input-sm\"\n                         placeholder={filter_end_date}\n                         id = \"end_date\"\n                         onChange={e => this.setFilterEndDate()}\n                   ></input> \n              </div>    \n         </div> \n         <button class= \"btn btn btn-sm\" type=\"button \" onClick= {() => {\n            this.setInitialState()\n            }}>\n            Clear\n         </button>\n         <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                this.setJobruns()\n             }} >\n            Refresh\n         </button>\n         {filter_back_button}\n       </ul>\n       <table id=\"jobruns\" class=\"table table-sm table-bordered\">\n           <thead class=\"thead-dark\">\n                 <tr>\n                   <th>Job Name</th>\n                   <th>Job Type</th>\n                   <th>Job Start Time</th>\n                   <th>Elapsed Time</th>\n                   <th>Job Status</th>\n                   <th>Actions</th>\n                 </tr>\n               </thead>\n                 <tbody>\n                 {this.state.jobruns.map( data => (\n                   <tr>\n                     <td> <button type=\"button\" class=\"btn btn-link\" data-dismiss=\"modal\" onClick = {() => this.handleOnClick(data.job_run_id)}>{data.job_name}</button></td>\n                     <td>{data.job_type}</td>\n                     <td>{data.start_time}</td>\n                     <td>{data.elapsed_time}</td>\n                     <td>\n                     {(() => {\n                           if (data.state === \"pass\" || data.state == \"\" ) {\n                             return (\n                               <div>\n                                 <p className = \"text-success\">{data.state}</p>\n                               </div>\n                             )\n                           } else if (data.state === \"started\" || data.state == \"running\" ) {\n                             return (\n                               <div>\n                                 <p className = \"text-warning\">{data.state}</p>\n                               </div>\n                             )\n                           } else {\n                            return (\n                              <div>\n                                 <button type=\"button\" class=\"btn btn-danger btn btn-sm\" data-toggle=\"modal\" onClick = {() => this.showJobRunStateModal(data.state)}>\n                                     Error\n                                 </button>\n                            \n                                 <div class=\"modal fade\" id=\"jobRunStateModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                                   <div class=\"modal-dialog\" role=\"document\">\n                                     <div class=\"modal-content\">\n                                       <div class=\"modal-header\">\n                                         <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                         <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                           <span aria-hidden=\"true\">&times;</span>\n                                         </button>\n                                       </div>\n                                       <div class=\"modal-body\">\n                                       </div>\n                                       <div class=\"modal-footer\">\n                                         <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                       </div>\n                                     </div>\n                                   </div>\n                                 </div>\n                              </div>\n                            )\n                           }\n                         })()}\n                     </td>\n                     <td>\n                     <div class='row'>\n                     <div class='col-xs-12 button-wrapper' class=\"inner\">\n                         <button type=\"button\" class=\"btn btn-secondary btn-sm ml-2\" data-toggle=\"modal\" onClick = {() => this.showModal(data.properties)}>\n                           Properties\n                         </button>\n                         \n                         <div class=\"modal fade\" id=\"jobRunModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                           <div class=\"modal-dialog\" role=\"document\">\n                             <div class=\"modal-content\">\n                               <div class=\"modal-header\">\n                                 <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                 <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                   <span aria-hidden=\"true\">&times;</span>\n                                 </button>\n                               </div>\n                               <div class=\"modal-body\">\n                               </div>\n                               <div class=\"modal-footer\">\n                                 <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                               </div>\n                             </div>\n                           </div>\n                         </div>\n\n                         {(() => {\n                           if (data.state === \"pass\" || data.state == \"\" || data.state == \"started\" ) {\n                             return (\n                               <div>\n                               </div>\n                             )\n                           } else {\n                             return (\n                               <div class=\"inner\">  \n                                  <button type=\"button\" class=\"btn btn-warning btn-sm ml-2\" data-toggle=\"modal\" onClick = {() => this.retryJobRun(data.job_name,data.properties)}>\n                                      Retry\n                                  </button>\n                               </div>\n                             )\n                           } \n                         })()}\n                        </div>\n                        </div> \n                     </td>\n                   </tr>\n                 ))}\n                 </tbody>\n            </table>  \n            <nav aria-label=\"Page navigation example\">\n               <ul class=\"pagination justify-content-center\">\n                 {button}\n                 <li class=\"page-item\"><input type=\"button\" value=\"Next\" class=\"page-link btn btn-secondary btn-sm\" onClick = {() => {\n                   this.setState(prevState => ({\n                     paginationValue: this.state.paginationValue  + 10\n                   }))\n                   this.fetchEtlFlowJobs(this.state.paginationValue + 10).then(({jobruns}) => {\n                    this.setState(prevState => ({  \n                      jobruns: jobruns\n                    }))\n                   })\n                   }}/></li>\n               </ul>\n         </nav>\n          </div>\n   );\n  }\n  }\n}\n// export default JobRuns;     \nexport default withRouter(JobRuns)\n","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n  \nimport { withRouter } from 'react-router'\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport $ from 'jquery';\nimport LoaderComponent from '../components/LoaderComponent';\nimport ErrorComponent from '../components/ErrorComponent';\n\nclass QueueStats extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { queueStats: [],\n      loader:false,\n      error:'',\n      error_code:'',\n\n    }\n  }\n\n  async fetchEtlFlowQueueStats() {\n    const GRAPHQL_URL = this.props.GRAPHQL_URL\n    const token = localStorage.getItem('Authorization')\n\n    this.setState(prevState => ({\n      loader: true\n    }))\n\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          query {\n            queueStats {\n              name \n              details\n              submitted_from\n              execution_time\n              }\n           }\n          `\n        }\n      )  \n    })\n\n\n    if (!response.ok) {\n      const message = `An error has occured: ${response.status}`;\n      if (response.status === 403) {\n        this.props.logout()\n      } else if (response.status === 404) {\n        this.setErrorState('Not Found',response.status)\n      } else if (response.status === 0) {\n        this.setErrorState('ERR_CONNECTION_REFUSED.Server is down',response.status)\n      } else { \n        throw  new Error(message);\n      }\n    } else {  \n      const {data} = await response.json();\n      this.setState(prevState => ({\n      loader: false\n    }))\n\n    return data;   \n  } \n  }\n\n  componentDidMount() {\n    //calling getInfo api\n    this.setEtlFlowQueueStats()\n  }\n\n  setEtlFlowQueueStats() {\n    this.fetchEtlFlowQueueStats().then(({queueStats}) => {\n      this.setState(prevState => ({\n        queueStats: queueStats\n      }))\n    }).catch(error => {\n      this.setState(prevState => ({\n        error: error,\n        loader: false\n      }))\n  }); \n  }\n\n  showModal(data)\n  {\n    var props = ''\n    var queue = JSON.parse(data)\n \n    for(var key in queue) {\n    { \n        props  += \"<b>\"+ key + \"</b>\" +\"=\" + queue[key]+ \"<br></br>\"\n    }\n\n   {$(\"#queueStats .modal-body\").html(props)}\n   $(\"#queueStats\").modal();\n  }\n  }\n\n  render(){\n\n    if (this.state.error !== ''){\n      return (\n        <div>\n          <ErrorComponent error={this.state.error}/>\n        </div>\n      );\n     } else if (this.state.loader){\n      return (\n        <div>\n          <LoaderComponent job_run_id={this.job_run_id}  set_job_run_state = {this.set_job_run_state} />\n        </div>\n      );\n     }\n    else{ \n    return (\n      <div class=\"container\">\n        <ul class = \"pagination justify-content-center\">\n             <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                      this.setEtlFlowQueueStats()\n                }}>\n               Refresh\n             </button>\n         </ul>\n          <table id=\"joblist\" class=\"table table-sm table-bordered\">\n            <thead class=\"thead-dark\">\n                  <tr>\n                    <th>Job Name</th>\n                    <th>Submitted From</th>\n                    <th>Execution Time</th>\n                    <th>Details</th>\n                  </tr>\n                </thead>\n                  <tbody>\n                  {this.state.queueStats.map( (data) => (\n                    <tr>\n                      <td>{data.name  }</td>\n                      <td>{data.submitted_from}</td>\n                      <td>{data.execution_time}</td>\n\n                      <td>\n                          <button type=\"button\" class=\"btn btn-secondary btn-sm\" data-toggle=\"modal\" onClick = {() => this.showModal(data.details)}>\n                            Stats\n                          </button>\n                          \n                          <div class=\"modal fade\" id=\"queueStats\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                            <div class=\"modal-dialog\" role=\"document\">\n                              <div class=\"modal-content\">\n                                <div class=\"modal-header\">\n                                  <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                  <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                    <span aria-hidden=\"true\">&times;</span>\n                                  </button>\n                                </div>\n                                <div class=\"modal-body\">\n                                </div>\n                                <div class=\"modal-footer\">\n                                  <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n            </table>\n      </div>     \n    ); \n    }         \n  }\n}\nexport default withRouter(QueueStats)\n// export default QueueStats;\n","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\nimport { withRouter } from 'react-router'\n\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport $ from 'jquery';\nimport LoaderComponent from '../components/LoaderComponent';\nimport ErrorComponent from '../components/ErrorComponent';\n\nclass JobRunDetails extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { \n      stepruns: [],\n      loader:false,\n      error:'',\n      error_code:'',\n\n\n    }\n    \n  }\n\n  async fetchEtlFlowJobById(job_run_id) {\n    const GRAPHQL_URL = this.props.GRAPHQL_URL\n    const token = localStorage.getItem('Authorization')\n\n    this.setState(prevState => ({\n      loader: true\n    }))\n\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          query {\n            stepruns(job_run_id:    \\\"${job_run_id}\\\"){\n                job_run_id\n                step_name\n                properties\n                state\n                start_time\n                elapsed_time\n                step_type\n                step_run_id\n             }\n           }\n          `\n        }\n      )  \n    })\n\n\n    if (!response.ok) {\n      const message = `An error has occured: ${response.status}`;\n      if (response.status === 403) {\n        this.props.logout()\n      } else if (response.status === 404) {\n        this.setErrorState('Not Found',response.status)\n      } else if (response.status === 0) {\n        this.setErrorState('ERR_CONNECTION_REFUSED.Server is down',response.status)\n      } else { \n        throw  new Error(message);\n      }\n    } else {\n\n      const {data} = await response.json();\n      this.setState(prevState => ({\n      loader: false\n    }))\n\n    return data;\n  }    \n  }\n\n  setInterval() {\n    this.timerID = setInterval(\n      () => this.fetchEtlFlowJobs(),\n      1000 * 1000\n    );\n  }\n \n  componentDidMount() {\n    this.setEtlFlowJobById(this.props.match.params.id)\n    // set Interval\n    this.setInterval();\n  }\n\n  setEtlFlowJobById(id) {\n    this.fetchEtlFlowJobById(id).then(({stepruns}) => {\n      this.setState(prevState => ({\n        stepruns: stepruns\n      }))\n    })\n  }\n\n  componentWillUnmount() {\n  clearInterval(this.timerID);\n  }\n \n  showModal(data)\n {\n   var props = ''\n   var data_jobruns = JSON.parse(data)\n\n   for(var key in data_jobruns) {\n   { \n       props  += \"<b>\"+ key + \"</b>\" +\"=\" + data_jobruns[key]+ \"<br></br>\"\n   }\n  {$(\"#stepRunModal .modal-body\").html(props)}\n  $(\"#stepRunModal\").modal();\n }\n  }\n\n  showStepRunStateModal(data)\n {\n  {$(\"#stepRunStateModal .modal-body\").html(data)}\n  $(\"#stepRunStateModal\").modal();\n  }\n\n  handleOnClick(job_id){    \n  this.props.history.push('/StepRunsById/' + job_id)\n  }\n\n  render(){\n   var step_run_id_flag = false\n   this.state.stepruns.map( item => {if(item.step_run_id !== \"\") step_run_id_flag = true})\n   var linked_jobs = ''\n   if(step_run_id_flag) {\n    linked_jobs = <th>Linked Job</th>\n   } else {\n    linked_jobs = \"\"\n   }\n\n   var remoteStep = [\"EtlFlowJobStep\",\"DPSparkJobStep\",\"ParallelETLStep\"];\n   if (this.state.error !== ''){\n    return (\n      <div>\n        <ErrorComponent error={this.state.error}/>\n      </div>\n    );\n   } else if (this.state.loader){\n    return (\n      <div>\n        <LoaderComponent job_run_id={this.job_run_id}  set_job_run_state = {this.set_job_run_state} />\n      </div>\n    );\n   }\n   else{\n   return (\n     <div className=\"container-fluid\">\n         <table id=\"job runs\" class=\"table table-sm table-bordered\">\n           <thead class=\"thead-dark\">\n                 <tr>\n                   <th>Job Run Id</th>\n                   <th>Step Type</th>\n                   <th>Step Name</th>\n                   <th>Start Time</th>\n                   <th>Elapsed Time</th>\n                   <th>Status</th>\n                   <th>Properties</th> \n                   {linked_jobs}\n                   <th>\n                        <button className=\"btn btn-secondary btn-block\" onClick = {() => {\n                          this.props.history.push('/JobRuns')\n                         }} >Back</button>\n                   </th>\n                 </tr>\n               </thead>\n                 <tbody>\n                 {this.state.stepruns.map( data => (\n                   <tr>\n                     <td>{data.job_run_id}</td>\n                     <td>{data.step_type}</td>\n                     <td>{data.step_name}</td>\n                     <td>{data.start_time}</td>\n                     <td>{data.elapsed_time}</td>\n                     <td>\n                     {(() => {\n                           if (data.state === \"pass\" || data.state == \"\" ) {\n                             return (\n                               <div>\n                                 <p className = \"text-success\">{data.state}</p>\n                               </div>\n                             )\n                           } else if (data.state === \"started\" || data.state == \"running\" ) {\n                             return (\n                               <div>\n                                 <p className = \"text-warning\">{data.state}</p>\n                               </div>\n                             )\n                           } else {\n                            return (\n                              <div>\n                                 <button type=\"button\" class=\"btn btn-danger btn btn-sm\" data-toggle=\"modal\" onClick = {() => this.showStepRunStateModal(data.state)}>\n                                     Error\n                                 </button>\n                            \n                                 <div class=\"modal fade\" id=\"stepRunStateModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                                   <div class=\"modal-dialog\" role=\"document\">\n                                     <div class=\"modal-content\">\n                                       <div class=\"modal-header\">\n                                         <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                         <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                           <span aria-hidden=\"true\">&times;</span>\n                                         </button>\n                                       </div>\n                                       <div class=\"modal-body\">\n                                       </div>\n                                       <div class=\"modal-footer\">\n                                         <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                       </div>\n                                     </div>\n                                   </div>\n                                 </div>\n                              </div>\n                            )\n                           }\n                         })()}\n                     </td>\n                     <td>\n                          <button type=\"button\" class=\"btn btn-secondary btn-sm\" data-toggle=\"modal\" onClick = {() => this.showModal(data.properties)}>\n                            Properties\n                          </button>\n                          \n                          <div class=\"modal fade\" id=\"stepRunModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                            <div class=\"modal-dialog\" role=\"document\">\n                              <div class=\"modal-content\">\n                                <div class=\"modal-header\">\n                                  <h5 class=\"modal-title\" id=\"exampleModalLabel\">Step Properties</h5>\n                                  <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                    <span aria-hidden=\"true\">&times;</span>\n                                  </button>\n                                </div>\n                                <div class=\"modal-body\">\n                                </div>\n                                <div class=\"modal-footer\">\n                                  <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                      </td>\n                     <td>\n                         {(() => {\n                            if (remoteStep.includes(data.step_type)) {\n                              return (\n                                <input type=\"button\" value=\"Check Progress\" class=\"btn btn-secondary btn-sm\" onClick = {() => this.setEtlFlowJobById(data.step_run_id)}/>\n                              )\n                            } else {\n                              return (\n                                <div></div>\n                              )\n                            }\n                          })()}\n                    </td>\n                   </tr>\n                 ))}\n                 </tbody>\n            </table>\n          </div>\n    );\n    }\n  }\n}\nexport default withRouter(JobRunDetails)\n","import React from 'react';\n\nimport jwt_decode from \"jwt-decode\";\nimport LoaderComponent from './LoaderComponent';\nimport CurrentTime from './CurrentTime';\nimport MemoryInfo from '../cards/MemoryInfo';\nimport Credentials from '../cards/Credential';\nimport JobList from '../cards/JobList';\nimport JobRuns from '../cards/JobRuns';\nimport QueueStats from '../cards/QueueStats';\nimport ErrorComponent from '../components/ErrorComponent';\n\nimport '../css/App.css'\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport JobRunDetails from '../cards/JobRunDetails';\n\n\nclass Routes extends React.Component {\n\n  constructor(props){\n    super(props); \n    this.state  = {\n      jobs: [],\n      metrics: [],\n      user: '',\n      loader:false,\n      error:'',\n      error_code:''\n    }\n  }\n\n  async fetchEtlFlowJobs() {\n    const GRAPHQL_URL = this.props.GRAPHQL_URL\n    const token = localStorage.getItem('Authorization')\n\n    this.setState(prevState => ({\n      loader: true\n    }))\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          query {\n              jobs {\n                name \n                schedule\n                props {key value} \n                nextSchedule \n                schduleRemainingTime \n                is_active \n                last_run_time\n                last_run_description\n             }\n           }\n          `\n        }\n      )  \n    })\n\n    if (response.status === 403) {\n      this.remove_token()\n    } else if (response.status === 404) {\n      this.setErrorState('Not Found',response.status)\n    } else if (response.status === 0) {\n      this.setErrorState('ERR_CONNECTION_REFUSED.Server is down',response.status)\n    } else {  \n      const {data} = await response.json();\n      this.setState(prevState => ({\n      loader: false\n     }))\n\n    return data;    \n    }\n  }\n\n  setInterval() {\n    this.timerID = setInterval(\n      () => this.get_etl_jobs(),\n      1000 * 1000\n    );\n  }\n\n  fetchEtlFlowUserDetails() {\n    const token = localStorage.getItem('Authorization')\n    var decoded = JSON.parse(JSON.stringify(jwt_decode(token)));\n    this.setState({\n      user: decoded[\"user\"]\n    })\n  }\n\n  componentDidMount() {\n\n    //calling jobs api\n    this.get_etl_jobs()\n    this.fetchEtlFlowUserDetails()\n }\n\n get_etl_jobs = () => {\n  this.fetchEtlFlowJobs().then(({jobs}) => {\n    this.setState(prevState => ({\n      jobs: jobs\n    }))\n  }).catch(error => {\n    this.setState(prevState => ({\n      error: error,\n      loader: false\n    }))\n  });\n }\n\n remove_token() {\n  localStorage.removeItem(\"Authorization\")\n  this.props.doLogout(\"\")\n}\n\n  render(){\n    if (this.state.error !== ''){\n      return (\n        <div>\n          <ErrorComponent error={this.state.error}/>\n        </div>\n      );\n     } else if (this.state.loader){\n      return (\n        <div>\n          <LoaderComponent job_run_id={this.job_run_id}  set_job_run_state = {this.set_job_run_state} />\n        </div>\n      );\n     }\n    else{\n    return (\n      <Router>\n        <nav className = \"navbar navbar-expand-lg navbar-dark bg-dark mb-3\">\n            <ul className = \"nav navbar-nav w-100\">\n                <li className = \"nav-item nav-link\" ><Link to=\"/\">Jobs</Link> </li>\n                <li className = \"nav-item nav-link\" ><Link to=\"/JobRuns\">Job Runs</Link> </li>\n                <li className = \"nav-item nav-link\" ><Link to=\"/JobLogs\">Job Logs</Link> </li>\n                <li className = \"nav-item nav-link\" ><Link to=\"/Stats\">Stats</Link> </li>\n                <li className = \"nav-item nav-link\" ><Link to=\"/Credentials\">Credentials</Link> </li>\n\n            </ul>\n            <div class=\"navbar-collapse collapse w-100 order-3 dual-collapse2\">\n              <ul class=\"nav justify-content-end w-100\">\n              <CurrentTime/>\n                <li class=\"nav-item dropdown\">\n\t                <a class=\"nav-link  dropdown-toggle\" href=\"#\" data-toggle=\"dropdown\">{this.state.user}</a>\n\t                  <ul class=\"dropdown-menu\">\n\t\t                  <li>\n                        <a class=\"dropdown-item\" href=\"https://github.com/tharwaninitin/etlflow\">\n                           Git Hub \n                        </a>\n                      </li>\n                      <li>\n                        <a class=\"dropdown-item\" href=\"https://tharwaninitin.github.io/etlflow/site/\">\n                          Docs\n                        </a>\n                      </li>\n                      <li>\n                        <a class=\"dropdown-item\">\n                          <input type=\"button\" class=\"btn btn-secondary btn-sm\" value=\"LogOut\" onClick = {() => this.remove_token()}></input>\n                        </a>\n                      </li>\n\t                  </ul>\n\t              </li>\n              </ul>\n            </div>\n        </nav>\n        <Switch>\n          <Route exact path=\"/\" component={() => (<JobList GRAPHQL_URL = {this.props.GRAPHQL_URL} jobs={this.state.jobs} logout={this.props.doLogout} getEtlJobs = {this.get_etl_jobs} />)}/>\n          <Route path=\"/JobRuns/:job_name?\" component={() => (<JobRuns GRAPHQL_URL = {this.props.GRAPHQL_URL} logout={this.props.doLogout} jobs={this.state.jobs}/>)}/>\n          <Route path=\"/JobLogs\" component={() => (<QueueStats GRAPHQL_URL = {this.props.GRAPHQL_URL} logout={this.props.doLogout}/>)}/>\n          <Route path=\"/Stats\" component={() => (<MemoryInfo GRAPHQL_URL = {this.props.GRAPHQL_URL} logout={this.props.doLogout} />)}/>\n          <Route path=\"/Credentials\" component={() => (<Credentials GRAPHQL_URL = {this.props.GRAPHQL_URL} logout={this.props.doLogout} />)}/>\n          <Route path=\"/JobRunDetails/:id\" component={() => (<JobRunDetails GRAPHQL_URL = {this.props.GRAPHQL_URL}/>)}/>\n\n        </Switch>\n      </Router>\n    );\n    }\n  }\n}\nexport default Routes;\n// export default withRouter(Routes)\n\n","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery/dist/jquery.min.js';\nimport jwt_decode from \"jwt-decode\";\n\n\nclass Login extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = {\n         user_name: '',\n         password: '',\n         token: '', \n         login: [],\n\n        }\n\n    this.login_validation = this.login_validation.bind(this);\n    this.set_login_user_name = this.set_login_user_name.bind(this);\n    this.set_login_password = this.set_login_password.bind(this);\n  }\n\n  async fetchLoginDetails(user_name,password) {\n    const GRAPHQL_URL = this.props.GRAPHQL_LOGIN_URL\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          mutation {\n            login (user_name: \\\"${user_name}\\\", password: \\\"${password}\\\") {\n                message \n                token\n             }\n           }\n          `\n         }\n      )  \n    })  \n    const {data} = await response.json();\n    return data;        \n  }\n\n login_validation() {\n    this.fetchLoginDetails(this.state.user_name,this.state.password).then(({login}) => {\n        var token_value = JSON.parse(JSON.stringify(login)).token\n        if(token_value !== \"\")\n        {\n            localStorage.setItem('Authorization', token_value);   \n            this.props.doLogin(token_value)\n            this.setState(prevState => ({\n                token: token_value\n              }))\n        }\n        else \n        {\n            alert(\"Invalid User\")\n        }\n    })   \n  } \n\n  set_login_user_name() {\n    this.setState(prevState => ({\n        user_name: document.getElementById(\"user_name\").value\n      }))\n  }\n\n  set_login_password() {\n    this.setState(prevState => ({\n        password: document.getElementById(\"password\").value\n      }))\n  }\n\n  render(){\n    return (\n    <div className=\"main\" align=\"center\">\n         <nav className = \"navbar navbar-expand-lg navbar-dark bg-dark mb-3\">\n             <ul className = \"nav navbar-nav w-50\">\n                 <li className = \"nav-item nav-link\">EtlFlow</li>\n             </ul>\n         </nav>   \n           <div className=\"col-md-3\">\n            <div className=\"login-form \">\n                <form id=\"form_login\" className = \"text-center border border-dark p-5\" onSubmit={(e) => {this.login_validation(); e.preventDefault();}  }>\n                    <p className = \"h4 mb-4\">EtlFlow Login</p>\n                    <div className=\"form-group\">\n                        <input type=\"text\"\n                         className=\"form-control\" \n                         aria-describedby=\"UsernameHelp\"\n                         placeholder=\"Username\"\n                         id=\"user_name\"\n                         onChange={e => this.set_login_user_name()}></input>\n                    </div>\n                    <div className=\"form-group\">\n                        <input\n                         type=\"password\"\n                         className=\"form-control\"\n                         aria-describedby=\"PasswordHelp\"\n                         placeholder=\"Password\"\n                         id=\"password\"\n                         onChange={e => this.set_login_password()}></input>\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-secondary btn-block\">Submit</button>\n                </form>   \n            </div>\n        </div>\n    </div>\n    );\n  }\n}\nexport default Login;","import React from 'react';\n//Bootstrap and jQuery libraries\nimport Routes from './components/Routes';\nimport LoginComponent from './components/Login';\n\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props);\n\n    this.state = {\n      token: '',\n    }\n\n  //  this.GRAPHQL_URL = 'https://devetlflow.startv.com/api/etlflow'\n  //  this.GRAPHQL_LOGIN_URL = 'https://devetlflow.startv.com/api/login'\n\n   this.GRAPHQL_URL = '/api/etlflow'\n   this.GRAPHQL_LOGIN_URL = 'api/login'\n   \n   this.doLogin = this.doLogin.bind(this)\n   this.doLogout = this.doLogout.bind(this)\n\n  }\n\n  doLogin(args_token,args_user) {\n    this.setState({\n      token: args_token\n    })\n  }\n\n\n  doLogout(args_token) {\n    this.setState({\n      token: ''\n    })\n  }\n\n\n  render(){\n    if(localStorage.getItem(\"Authorization\") === null){\n      return (  \n          <div>\n            <LoginComponent  GRAPHQL_LOGIN_URL = {this.GRAPHQL_LOGIN_URL} doLogin = {this.doLogin}/>  \n          </div>\n      );\n    } else {\n      return (  \n        <div>\n          <Routes  GRAPHQL_URL = {this.GRAPHQL_URL} doLogout = {this.doLogin}/>  \n        </div>\n     );\n    }\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}