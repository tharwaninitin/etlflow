{"version":3,"sources":["components/JobList.js","components/StepRuns.js","components/JobRuns.js","components/Metrics.js","components/QueueStats.js","components/Routes.js","components/Login.js","App.js","index.js"],"names":["JobList","props","state","jobs","notification","run_job_props","job_name","a","token","localStorage","getItem","fetch","method","headers","body","JSON","stringify","query","response","status","console","log","json","data","removeItem","$","DataTable","job_properties","map","key","value","html","modal","this","setState","prevState","notification_var","class","role","replace","type","data-dismiss","aria-label","onClick","set_notification","aria-hidden","id","is_active","className","aria-describedby","data-toggle","defaultChecked","e","updateJobActiveState","name","job_deploy_mode","schedule","nextSchedule","schduleRemainingTime","show_modal","aria-labelledby","run_etl_job","then","run_job","parse","React","Component","StepRuns","stepruns","job_run_id","timerID","setInterval","fetchEtlFlowJobs","fetchEtlFlowJobById","clearInterval","data_jobruns","step_run_id_flag","item","step_run_id","linked_jobs","remoteStep","set_job_run_state","step_type","step_name","start_time","elapsed_time","show_step_run_state_modal","properties","tabindex","includes","JobRuns","resetForm","jobruns","filter","filter_start_date","filter_end_date","paginationValue","stepRun","filterOperation","baseState","bind","limit","offset","document","getElementById","button","filter_button_name","aria-haspopup","aria-expanded","list","placeholder","onChange","set_job_name","set_filter_start_date","set_filter_end_date","window","location","reload","job_type","show_job_run_state_modal","Metrics","metrics","fetchEtlFlowMetrics","active_jobs","active_subscribers","etl_jobs","cron_jobs","used_memory","free_memory","total_memory","max_memory","build_time","QueueStats","queueStats","fetchEtlFlowQueueStats","queue","submitted_from","details","Routes","user","remove_token","decoded","jwt_decode","fetchEtlFlowUserDetails","doLogout","to","href","exact","path","component","Login","user_name","password","login","login_validation","set_login_user_name","set_login_password","fetchLoginDetails","token_value","setItem","doLogin","alert","align","onSubmit","preventDefault","App","args_token","args_user","login_url","url","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.bd4ddd0e.chunk.js","sourcesContent":["import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n\nimport '../css/App.css'\n\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport $ from 'jquery';\n\nclass JobList extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { \n      jobs: [],\n      notification: false,\n      run_job_props: '',\n      job_name: ''\n      }\n  }\n\n  async updateJobActiveState(job_name,state) {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n            mutation {\n              update_job_state (name:\\\"${job_name}\\\" ,state: ${state}){\n             }\n           }\n          `\n        }\n      )  \n    })\n\n    if (response.status === 403) {\n      console.log(\"user not found\")\n    } else {\n      console.log(\"user  found\")\n\n    }\n\n    const {data} = await response.json();\n    return data;    \n  }\n\n  async run_etl_job(job_name,state) {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n            mutation {\n              run_job (name:\\\"${job_name}\\\" ,props: { key: \\\"\\\", value: \\\"\\\" }){\n                name\n                props {key value}\n             }\n           }\n          `\n        }\n      )  \n    })\n\n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n\n    const {data} = await response.json();\n    return data;    \n  }\n\n\n  componentDidMount() {\n    $('#joblist').DataTable();\n  }\n\n show_modal(data)\n  {\n    var job_properties = \"\"\n    { \n      data.map(  props =>\n        job_properties  += \"<b>\"+ props.key + \"</b>\" +\"=\" + props.value + \"<br></br>\"\n    )}\n\n   {$(\"#jobListeModal .modal-body\").html(job_properties)}\n   $(\"#jobListeModal\").modal();\n  }\n\n  set_notification(state){\n    this.setState(prevState => ({\n      notification: state\n      }))\n  }\n\n\n  render(){\n\n    var props = ''\n    var notification_var = \"\"\n    if(this.state.notification) {\n      notification_var =\n      <div class=\"alert alert-success alert-dismissible fade show\" role=\"alert\">\n         <h4 class=\"alert-heading\">Job {this.state.job_name.replace(/^\"(.*)\"$/, '$1')} submitted successfully!  </h4>\n         <p>{this.state.run_job_props}</p>\n         <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" onClick = {() => {this.set_notification(false)}}>\n            <span aria-hidden=\"true\">&times;</span>\n         </button>\n      </div>\n    } \n\n\n    return (\n          <div class=\"container-fluid\">\n          <div>{notification_var}</div>\n          <table id=\"joblist\" class=\"table table-sm table-bordered\">\n            <thead class=\"thead-dark\">\n                  <tr>\n                    <th>Active/Inactive</th>\n                    <th>Job Name</th>\n                    <th>Schedule</th>\n                    <th>Next Schedule</th>\n                    <th>Schedule Remaining Time</th>\n                    <th>Job Deploy Mode</th>\n                    <th>Properties</th>\n                    <th>Action</th>\n                  </tr>\n                </thead>\n                  <tbody>\n                  {this.props.jobs.map( (data) => (\n                    <tr>\n                      <td>{(() => {\n                           if (data.is_active ) {\n                             return (\n                               <div className = \"checkbox\">\n                                 <input type=\"checkbox\"\n                                     aria-describedby=\"UsernameHelp\"\n                                     data-toggle = \"toggle\"\n                                     defaultChecked\n                                     onClick={e => this.updateJobActiveState(data.name,false)}>\n                                 </input>\n                               </div>\n                             )\n                           } else {\n                            return (\n                              <div className = \"checkbox\">\n                                <input type=\"checkbox\"\n                                     aria-describedby=\"UsernameHelp\"\n                                     data-toggle = \"toggle\"\n                                     onClick={e => this.updateJobActiveState(data.name,true)}>\n                                 </input>\n                              </div>\n                            )\n                           }\n                         })()}\n                      </td>\n                      <td>{(() => {\n                           if (data.job_deploy_mode === \"NA\" ) {\n                             return (\n                               <div>\n                                 <p className = \"text-danger\">{data.name}</p>\n                               </div>\n                             )\n                           } else {\n                            return (\n                              <div>\n                               {data.name}\n                              </div>\n                            )\n                           }\n                         })()}</td>\n                      <td>{data.schedule}</td>\n                      <td>{data.nextSchedule}</td>\n                      <td>{data.schduleRemainingTime}</td>\n                      <td>{data.job_deploy_mode}</td>\n                      <td>\n                          <button type=\"button\" class=\"btn btn-secondary btn-sm\" data-toggle=\"modal\" onClick = {() => this.show_modal(data.props)}>\n                            Properties\n                          </button>\n                          \n                          <div class=\"modal fade\" id=\"jobListeModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                            <div class=\"modal-dialog\" role=\"document\">\n                              <div class=\"modal-content\">\n                                <div class=\"modal-header\">\n                                  <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                  <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                    <span aria-hidden=\"true\">&times;</span>\n                                  </button>\n                                </div>\n                                <div class=\"modal-body\">\n                                </div>\n                                <div class=\"modal-footer\">\n                                  <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                      </td>\n                      <td>\n                      \n                          <input type=\"button\" value=\"Run\" class=\"btn btn-secondary btn-sm\" onClick = {() => {\n                                 this.run_etl_job(data.name).then(({run_job}) => {\n                                  this.set_notification(true)\n                                  var data =  JSON.parse(JSON.stringify(run_job))\n                                  for(var key in data) {\n                                    {  \n                                       if(key === \"props\") {\n                                        props = JSON.stringify(data[key])\n                                        this.setState(prevState => ({\n                                          run_job_props: props\n                                          }))\n                                       } else {\n                                        this.setState(prevState => ({\n                                          job_name: JSON.stringify(data[key])\n                                          }))\n                                       }\n                                    }\n                                   }\n                                 });\n                                 \n                         }}  />\n                        {/* </form> */}\n                        </td>\n                    </tr>\n                  ))}\n                </tbody>\n            </table>\n      </div>     \n    );\n  }\n}\nexport default JobList;\n","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport $ from 'jquery';\n\nclass StepRuns extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { \n      stepruns: []\n    }\n    \n  }\n\n  async fetchEtlFlowJobById(job_run_id) {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          query {\n            stepruns(job_run_id:    \\\"${job_run_id}\\\"){\n                job_run_id\n                step_name\n                properties\n                state\n                start_time\n                elapsed_time\n                step_type\n                step_run_id\n             }\n           }\n          `\n        }\n      )  \n    })\n\n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n\n    const {data} = await response.json();\n    return data;    \n  }\n\n  setInterval() {\n    this.timerID = setInterval(\n      () => this.fetchEtlFlowJobs(),\n      1000 * 1000\n    );\n  }\n \n  componentDidMount() {\n    this.fetchEtlFlowJobById(this.props.job_run_id).then(({stepruns}) => {\n      this.setState(prevState => ({\n        stepruns: stepruns\n      }))\n    })\n    // set Interval\n    this.setInterval();\n }\n\n componentWillUnmount() {\n  clearInterval(this.timerID);\n }\n \n show_modal(data)\n {\n   var props = ''\n   var data_jobruns = JSON.parse(data)\n\n   for(var key in data_jobruns) {\n   { \n       props  += \"<b>\"+ key + \"</b>\" +\"=\" + data_jobruns[key]+ \"<br></br>\"\n   }\n  {$(\"#stepRunModal .modal-body\").html(props)}\n  $(\"#stepRunModal\").modal();\n }\n}\n\nshow_step_run_state_modal(data)\n {\n  {$(\"#stepRunStateModal .modal-body\").html(data)}\n  $(\"#stepRunStateModal\").modal();\n }\n\n\n\n render(){\n   var step_run_id_flag = false\n   this.state.stepruns.map( item => {if(item.step_run_id !== \"\") step_run_id_flag = true})\n   var linked_jobs = ''\n   if(step_run_id_flag) {\n    linked_jobs = <th>Linked Job</th>\n   } else {\n    linked_jobs = \"\"\n   }\n\n   var remoteStep = [\"EtlFlowJobStep\",\"DPSparkJobStep\",\"ParallelETLStep\"];\n   return (\n     <div className=\"container-fluid\">\n         <table id=\"job runs\" class=\"table table-sm table-bordered\">\n           <thead class=\"thead-dark\">\n                 <tr>\n                   <th>Job Run Id</th>\n                   <th>Step Type</th>\n                   <th>Step Name</th>\n                   <th>Start Time</th>\n                   <th>Elapsed Time</th>\n                   <th>Status</th>\n                   <th>Properties</th> \n                   {linked_jobs}\n                   <th>\n                        <button className=\"btn btn-secondary btn-block\" onClick = {() => this.props.set_job_run_state()}>Back</button>\n                   </th>\n                 </tr>\n               </thead>\n                 <tbody>\n                 {this.state.stepruns.map( data => (\n                   <tr>\n                     <td>{data.job_run_id}</td>\n                     <td>{data.step_type}</td>\n                     <td>{data.step_name}</td>\n                     <td>{data.start_time}</td>\n                     <td>{data.elapsed_time}</td>\n                     <td>\n                     {(() => {\n                           if (data.state === \"pass\" || data.state == \"\" ) {\n                             return (\n                               <div>\n                                 <p className = \"text-success\">{data.state}</p>\n                               </div>\n                             )\n                           } else if (data.state === \"started\" || data.state == \"running\" ) {\n                             return (\n                               <div>\n                                 <p className = \"text-warning\">{data.state}</p>\n                               </div>\n                             )\n                           } else {\n                            return (\n                              <div>\n                                 <button type=\"button\" class=\"btn btn-danger btn btn-sm\" data-toggle=\"modal\" onClick = {() => this.show_step_run_state_modal(data.state)}>\n                                     Error\n                                 </button>\n                            \n                                 <div class=\"modal fade\" id=\"stepRunStateModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                                   <div class=\"modal-dialog\" role=\"document\">\n                                     <div class=\"modal-content\">\n                                       <div class=\"modal-header\">\n                                         <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                         <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                           <span aria-hidden=\"true\">&times;</span>\n                                         </button>\n                                       </div>\n                                       <div class=\"modal-body\">\n                                       </div>\n                                       <div class=\"modal-footer\">\n                                         <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                       </div>\n                                     </div>\n                                   </div>\n                                 </div>\n                              </div>\n                            )\n                           }\n                         })()}\n                     </td>\n                     <td>\n                          <button type=\"button\" class=\"btn btn-secondary btn-sm\" data-toggle=\"modal\" onClick = {() => this.show_modal(data.properties)}>\n                            Properties\n                          </button>\n                          \n                          <div class=\"modal fade\" id=\"stepRunModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                            <div class=\"modal-dialog\" role=\"document\">\n                              <div class=\"modal-content\">\n                                <div class=\"modal-header\">\n                                  <h5 class=\"modal-title\" id=\"exampleModalLabel\">Step Properties</h5>\n                                  <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                    <span aria-hidden=\"true\">&times;</span>\n                                  </button>\n                                </div>\n                                <div class=\"modal-body\">\n                                </div>\n                                <div class=\"modal-footer\">\n                                  <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                      </td>\n                     <td>\n                         {(() => {\n                            if (remoteStep.includes(data.step_type)) {\n                              return (\n                                <input type=\"button\" value=\"Check Progress\" class=\"btn btn-secondary btn-sm\" onClick = {() => this.fetchEtlFlowJobById(data.step_run_id).then(({stepruns}) => {\n                                    this.setState(prevState => ({\n                                      stepruns: stepruns\n                                    }))\n                                  })}/>\n                              )\n                            } else {\n                              return (\n                                <div></div>\n                              )\n                            }\n                          })()}\n                    </td>\n                   </tr>\n                 ))}\n                 </tbody>\n            </table>\n          </div>\n    );\n  }\n}\nexport default StepRuns;     ","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery/dist/jquery.min.js';\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport StepRuns from './StepRuns';\nimport $ from 'jquery';\n\nclass JobRuns extends React.Component {\n  constructor(props){\n    super(props); \n    this.job_run_id = ''\n    this.filterOperation = [\"IN\",\"NOT IN\"]\n    this.state  = { \n      jobruns: [],\n      filter: '',\n      job_name: '',\n      filter_start_date: '',\n      filter_end_date: '',\n      paginationValue: 0,\n      stepRun: false\n    }\n    this.baseState = this.state \n    this.set_job_run_state = this.set_job_run_state.bind(this);    \n  }\n\n  resetForm = () => {\n    this.setState({jobruns: this.state.jobruns,\n      filter: '',\n      job_name: '',\n      filter_start_date: '',\n      filter_end_date: '',\n      paginationValue: 0,\n      stepRun: false})\n  }\n\n\n  async fetchEtlFlowJobs() {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    const limit = 10;\n    const offset = this.state.paginationValue;\n\n    var query = ` query { jobruns(limit: ${limit} , offset: ${offset}){ job_run_id job_name properties state start_time elapsed_time job_type is_master}}`\n    \n    if (this.state.filter_end_date !== \"\" && this.state.filter !== \"\" ) {\n      query = ` query { jobruns(limit: ${limit} , offset: ${offset},  startTime: \\\"${this.state.filter_start_date}\\\", endTime: \\\"${this.state.filter_end_date}\\\",filter: \\\"${this.state.filter}\\\", jobName: \\\"${this.state.job_name}\\\"  )\n      { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n    } else if (this.state.filter_end_date !== \"\" ){\n      query = ` query { jobruns(limit: ${limit} , offset: ${offset},  startTime: \\\"${this.state.filter_start_date}\\\", endTime: \\\"${this.state.filter_end_date}\\\")\n      { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n    } else if (this.state.filter !== \"\") {\n      query = ` query { jobruns(limit: ${limit} , offset: ${offset}, filter: \\\"${this.state.filter}\\\", jobName: \\\"${this.state.job_name}\\\"  )\n      { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n    } else if (this.state.filter === \"\" && this.state.job_name !== \"\") {\n      query = ` query { jobruns(limit: ${limit} , offset: ${offset} ,filter: \"IN\", jobName: \\\"${this.state.job_name}\\\"  )\n      { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n    } else {\n      query = ` query { jobruns(limit: ${limit} , offset: ${offset}){ job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n    }\n    \n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: query\n        }\n      )  \n    })\n\n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n\n    const {data} = await response.json();\n    return data;   \n  }\n\n  setInterval() {\n    this.timerID = setInterval(\n      () => this.fetchEtlFlowJobs(),\n      1000 * 1000\n    );\n  }\n \n  componentDidMount() {\n    this.fetchEtlFlowJobs().then(({jobruns}) => {\n      this.setState(prevState => ({\n        jobruns: jobruns\n      }))\n    })\n\n\n    // set Interval\n    this.setInterval();\n }\n\n componentWillUnmount() {\n  clearInterval(this.timerID);\n }\n\n set_job_run_state() {\n  this.setState(state => ({\n    stepRun: !state.stepRun\n  }))\n }\n \n\n set_job_name() {\n  this.setState(prevState => ({\n    job_name: document.getElementById(\"exampleDataList\").value\n  }))\n }\n\n set_filter_start_date() {\n  this.setState(prevState => ({\n    filter_start_date: document.getElementById(\"start_date\").value\n  }))\n }\n\n set_filter_end_date() {\n  this.setState(prevState => ({\n    filter_end_date: document.getElementById(\"end_date\").value\n  }))\n }\n\n\n show_modal(data)\n {\n   var props = ''\n   var data_jobruns = JSON.parse(data)\n\n   for(var key in data_jobruns) {\n   { \n       props  += \"<b>\"+ key + \"</b>\" +\"=\" + data_jobruns[key]+ \"<br></br>\"\n   }\n  {$(\"#jobRunModal .modal-body\").html(props)}\n  $(\"#jobRunModal\").modal();\n }\n}\n\nshow_job_run_state_modal(data)\n {\n  {$(\"#jobRunStateModal .modal-body\").html(data)}\n  $(\"#jobRunStateModal\").modal();\n }\n\n render(){\n   \n   var button = ''\n   var filter_button_name = '' \n\n   //Code for adding pagination element\n   if (this.state.paginationValue === 0) {\n     button = <li class=\"page-item disabled\">\n     <input type=\"button\" value=\"Previous\" class=\"page-link btn btn-secondary btn-sm\"/></li>\n   } else {\n     button =  <li class=\"page-item\">\n     <input type=\"button\" value=\"Previous\" class=\"page-link btn btn-secondary btn-sm\" onClick = {() => {\n              this.setState(prevState => ({\n               paginationValue: this.state.paginationValue  -   10\n             }))\n             this.fetchEtlFlowJobs(this.state.paginationValue - 10).then(({jobruns}) => {\n               this.setState(prevState => ({\n                 jobruns: jobruns\n               }))\n             }) \n     }}/></li>\n   } \n\n   //Code for adding button name\n   if (this.state.filter !== '') {\n     filter_button_name = this.state.filter\n   }else {\n     filter_button_name = \"Add Filter\"\n   } \n\n   if(this.state.stepRun) {\n     return (\n       <div>\n         <StepRuns job_run_id={this.job_run_id}  set_job_run_state = {this.set_job_run_state} />\n       </div>\n     );\n   } else{\n   return (\n     <div className=\"container-fluid\">\n       <ul class = \"pagination justify-content-center\">\n         <div class=\"dropdown\">\n            <button class=\"btn btn-light dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n               {filter_button_name}\n            </button>\n            <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n              { this.filterOperation.map ( filter => (\n                   <a class=\"dropdown-item\">\n                      <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                           this.setState(prevState => ({\n                               filter: filter\n                       }))}}> {filter} </button>\n                   </a>\n              ))}\n            </div>\n         </div>\n         <div className =\"form-inline float-right\">\n             <div className=\"mb-1\">\n             <input type=\"text\"\n                        className=\"form-control input-sm\"\n                        list = \"datalistOptions\"\n                        id = \"exampleDataList\"\n                        placeholder = \"Type to search\"\n                        onChange={e => this.set_job_name()}></input>      \n             </div>\n             <datalist id = \"datalistOptions\">\n               {this.props.jobs.map( data => (\n                 <option value = {data.name}></option>\n               ))}\n             </datalist> \n         </div>\n         <div class = \"form-inline float-right\">\n              <div class = \"mb-1\"> \n                  <input type=\"date\"\n                         className=\"form-control input-sm\"\n                         placeholder=\"startdate(YYYY-MM-DD)\" \n                         id = \"start_date\"\n                         onChange={e => this.set_filter_start_date()}\n                   ></input>\n              </div>\n              <div class = \"mb-1\"> \n                  <input type=\"date\"\n                         className=\"form-control input-sm\"\n                         placeholder=\"enddate(YYYY-MM-DD)\"\n                         id = \"end_date\"\n                         onChange={e => this.set_filter_end_date()}\n                   ></input> \n              </div>    \n         </div> \n         <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                window.location.reload(true)\n             }} >\n            Clear\n         </button>\n         <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                this.fetchEtlFlowJobs().then(({jobruns}) => {\n                     this.setState(prevState => ({\n                       jobruns: jobruns\n                     }))\n                   })\n             }} >\n            Refresh\n         </button>\n       </ul>\n       <table id=\"jobruns\" class=\"table table-sm table-bordered\">\n           <thead class=\"thead-dark\">\n                 <tr>\n                   <th>Job Name</th>\n                   <th>Job Type</th>\n                   <th>Job Start Time</th>\n                   <th>Elapsed Time</th>\n                   <th>Job Status</th>\n                   <th>Job Properties</th>\n                   <th>Step Properties</th>\n                 </tr>\n               </thead>\n                 <tbody>\n                 {this.state  .jobruns.map( data => (\n                   <tr>\n                     <td>{data.job_name}</td>\n                     <td>{data.job_type}</td>\n                     <td>{data.start_time}</td>\n                     <td>{data.elapsed_time}</td>\n                     <td>\n                     {(() => {\n                           if (data.state === \"pass\" || data.state == \"\" ) {\n                             return (\n                               <div>\n                                 <p className = \"text-success\">{data.state}</p>\n                               </div>\n                             )\n                           } else if (data.state === \"started\" || data.state == \"running\" ) {\n                             return (\n                               <div>\n                                 <p className = \"text-warning\">{data.state}</p>\n                               </div>\n                             )\n                           } else {\n                            return (\n                              <div>\n                                 <button type=\"button\" class=\"btn btn-danger btn btn-sm\" data-toggle=\"modal\" onClick = {() => this.show_job_run_state_modal(data.state)}>\n                                     Error\n                                 </button>\n                            \n                                 <div class=\"modal fade\" id=\"jobRunStateModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                                   <div class=\"modal-dialog\" role=\"document\">\n                                     <div class=\"modal-content\">\n                                       <div class=\"modal-header\">\n                                         <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                         <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                           <span aria-hidden=\"true\">&times;</span>\n                                         </button>\n                                       </div>\n                                       <div class=\"modal-body\">\n                                       </div>\n                                       <div class=\"modal-footer\">\n                                         <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                       </div>\n                                     </div>\n                                   </div>\n                                 </div>\n                              </div>\n                            )\n                           }\n                         })()}\n                     </td>\n                     <td>\n                         <button type=\"button\" class=\"btn btn-secondary btn-sm\" data-toggle=\"modal\" onClick = {() => this.show_modal(data.properties)}>\n                           Properties\n                         </button>\n                         \n                         <div class=\"modal fade\" id=\"jobRunModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                           <div class=\"modal-dialog\" role=\"document\">\n                             <div class=\"modal-content\">\n                               <div class=\"modal-header\">\n                                 <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                 <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                   <span aria-hidden=\"true\">&times;</span>\n                                 </button>\n                               </div>\n                               <div class=\"modal-body\">\n                               </div>\n                               <div class=\"modal-footer\">\n                                 <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                               </div>\n                             </div>\n                           </div>\n                         </div>\n                     </td>\n                     <td><input type=\"button\" value=\"Step Properties\" class=\"btn btn-secondary btn-sm\" onClick = {() => {\n                       this.set_job_run_state()\n                       this.job_run_id =  data.job_run_id\n                     }}/></td>\n                   </tr>\n                 ))}\n                 </tbody>\n            </table>  \n            <nav aria-label=\"Page navigation example\">\n               <ul class=\"pagination justify-content-center\">\n                 {button}\n                 <li class=\"page-item\"><input type=\"button\" value=\"Next\" class=\"page-link btn btn-secondary btn-sm\" onClick = {() => {\n                   this.setState(prevState => ({\n                     paginationValue: this.state.paginationValue  + 10\n                   }))\n                   this.fetchEtlFlowJobs(this.state.paginationValue + 10).then(({jobruns}) => {\n                     this.setState(prevState => ({  \n                       jobruns: jobruns\n                     }))\n                   })\n                   }}/></li>\n               </ul>\n         </nav>\n          </div>\n   );\n  }\n }\n}\nexport default JobRuns;     ","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n\n\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport $ from 'jquery';\n\nclass Metrics extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { metrics: [] }\n  }\n\n  async fetchEtlFlowMetrics() {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          query {\n            metrics {\n                active_jobs\n                active_subscribers\n                etl_jobs\n                cron_jobs\n                used_memory\n                free_memory\n                total_memory\n                max_memory\n                build_time\n              }\n           }\n          `\n        }\n      )  \n    })\n\n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n    \n    const {data} = await response.json();\n    return data;    \n  }\n\n  componentDidMount() {\n    //calling getInfo api\n    this.fetchEtlFlowMetrics().then(({metrics}) => {\n        this.setState(prevState => ({\n            metrics: metrics\n        }))\n      })\n   }\n\n\n  render(){\n    return (\n      <div class=\"container\">\n          <ul class = \"pagination justify-content-center\">\n             <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                   this.fetchEtlFlowMetrics().then(({metrics}) => {\n                    this.setState(prevState => ({\n                        metrics: metrics\n                    }))\n                  })\n                }} >\n               Refresh\n             </button>\n         </ul>\n         <ul class=\"list-group \">\n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Active Jobs</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.active_jobs}</span>\n            </li>\n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Active Subscribers</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.active_subscribers}</span>\n            </li>\n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Etl Jobs</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.etl_jobs}</span>\n            </li>\n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Cron Jobs</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.cron_jobs}</span>\n            </li>  \n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Used Memory</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.used_memory}</span>\n            </li> \n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Free Memory</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.free_memory}</span>\n            </li>  \n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Total Memory</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.total_memory}</span>\n            </li>\n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Max Memory</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.max_memory}</span>\n            </li> \n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Build Time</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.build_time}</span>\n            </li>   \n         </ul>\n      </div>     \n    );          \n  }\n}\nexport default Metrics;\n","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n\n\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport $ from 'jquery';\n\nclass QueueStats extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { queueStats: [] }\n  }\n\n  async fetchEtlFlowQueueStats() {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          query {\n            queueStats {\n              name \n              details\n              submitted_from\n              }\n           }\n          `\n        }\n      )  \n    })\n\n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n    \n    const {data} = await response.json();\n    return data;    \n  }\n\n  componentDidMount() {\n    //calling getInfo api\n    this.fetchEtlFlowQueueStats().then(({queueStats}) => {\n        this.setState(prevState => ({\n          queueStats: queueStats\n        }))\n      })\n   }\n\n   show_modal(data)\n  {\n    var props = ''\n    var queue = JSON.parse(data)\n \n    for(var key in queue) {\n    { \n        props  += \"<b>\"+ key + \"</b>\" +\"=\" + queue[key]+ \"<br></br>\"\n    }\n\n   {$(\"#queueStats .modal-body\").html(props)}\n   $(\"#queueStats\").modal();\n  }\n}\n\n\n  render(){\n    return (\n      <div class=\"container\">\n        <ul class = \"pagination justify-content-center\">\n             <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                    this.fetchEtlFlowQueueStats().then(({queueStats}) => {\n                      this.setState(prevState => ({\n                        queueStats: queueStats\n                      }))\n                  })\n                }} >\n               Refresh\n             </button>\n         </ul>\n          <table id=\"joblist\" class=\"table table-sm table-bordered\">\n            <thead class=\"thead-dark\">\n                  <tr>\n                    <th>Job Name</th>\n                    <th>Submitted From</th>\n                    <th>Details</th>\n                  </tr>\n                </thead>\n                  <tbody>\n                  {this.state.queueStats.map( (data) => (\n                    <tr>\n                      <td>{data.name  }</td>\n                      <td>{data.submitted_from}</td>\n                      <td>\n                          <button type=\"button\" class=\"btn btn-secondary btn-sm\" data-toggle=\"modal\" onClick = {() => this.show_modal(data.details)}>\n                            Stats\n                          </button>\n                          \n                          <div class=\"modal fade\" id=\"queueStats\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                            <div class=\"modal-dialog\" role=\"document\">\n                              <div class=\"modal-content\">\n                                <div class=\"modal-header\">\n                                  <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                  <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                    <span aria-hidden=\"true\">&times;</span>\n                                  </button>\n                                </div>\n                                <div class=\"modal-body\">\n                                </div>\n                                <div class=\"modal-footer\">\n                                  <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n            </table>\n      </div>     \n    );          \n  }\n}\nexport default QueueStats;\n","import React from 'react';\nimport JobList from './JobList';\nimport JobRuns from './JobRuns';\nimport Metrics from './Metrics';\nimport QueueStats from './QueueStats';\n\nimport jwt_decode from \"jwt-decode\";\n\nimport '../css/App.css'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nclass Routes extends React.Component {\n\n  constructor(props){\n    super(props); \n    this.state  = {\n      jobs: [],\n      metrics: [],\n      user: ''\n    }\n  }\n\n  async fetchEtlFlowJobs() {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          query {\n              jobs {\n                name \n                schedule\n                props {key value} \n                nextSchedule \n                schduleRemainingTime \n                is_active \n                job_deploy_mode \n                max_active_runs\n             }\n           }\n          `\n        }\n      )  \n    })\n\n    if (response.status === 403) {\n      this.remove_token()\n    } \n\n    const {data} = await response.json();\n    return data;    \n  }\n\n  setInterval() {\n    this.timerID = setInterval(\n      () => this.fetchEtlFlowJobs(),\n      1000 * 1000\n    );\n  }\n\n  fetchEtlFlowUserDetails() {\n    const token = localStorage.getItem('Authorization')\n    var decoded = JSON.parse(JSON.stringify(jwt_decode(token)));\n    this.setState({\n      user: decoded[\"user\"]\n    })\n  }\n\n  componentDidMount() {\n\n    //calling jobs api\n    this.fetchEtlFlowJobs().then(({jobs}) => {\n      this.setState(prevState => ({\n        jobs: jobs\n      }))\n    })\n\n    this.fetchEtlFlowUserDetails()\n }\n\n remove_token() {\n  localStorage.removeItem(\"Authorization\")\n  this.props.doLogout(\"\")\n}\n\n  render(){\n    return (\n      <Router>\n        <nav className = \"navbar navbar-expand-lg navbar-dark bg-dark mb-3\">\n            <ul className = \"nav navbar-nav w-100\">\n                <li className = \"nav-item nav-link\" ><Link to=\"/\">Etlflow</Link> </li>\n                <li className = \"nav-item nav-link\" ><Link to=\"/JobRuns\">JobRuns</Link> </li>\n                <li className = \"nav-item nav-link\" ><Link to=\"/getInfo\">Metrics</Link> </li>\n                <li className = \"nav-item nav-link\" ><Link to=\"/getQueueStats\">Job Stats</Link> </li>\n\n            </ul>\n            <div class=\"navbar-collapse collapse w-100 order-3 dual-collapse2\">\n              <ul class=\"nav justify-content-end w-100\">\n                <li class=\"nav-item dropdown\">\n\t                <a class=\"nav-link  dropdown-toggle\" href=\"#\" data-toggle=\"dropdown\">{this.state.user}</a>\n\t                  <ul class=\"dropdown-menu\">\n\t\t                  <li>\n                        <a class=\"dropdown-item\" href=\"https://github.com/tharwaninitin/etlflow\">\n                           Git Hub \n                        </a>\n                      </li>\n                      <li>\n                        <a class=\"dropdown-item\" href=\"https://tharwaninitin.github.io/etlflow/site/\">\n                          Docs\n                        </a>\n                      </li>\n                      <li>\n                        <a class=\"dropdown-item\">\n                          <input type=\"button\" class=\"btn btn-secondary btn-sm\" value=\"LogOut\" onClick = {() => this.remove_token()}></input>\n                        </a>\n                      </li>\n\t                  </ul>\n\t              </li>\n              </ul>\n            </div>\n        </nav>\n        <Switch>\n          <Route exact path=\"/\" component={() => (<JobList jobs={this.state.jobs} />)}/>\n          <Route path=\"/JobRuns\" component={() => (<JobRuns jobs={this.state.jobs}/>)}/>\n          <Route path=\"/getInfo\" component={() => (<Metrics/>)}/>\n          <Route path=\"/getQueueStats\" component={() => (<QueueStats/>)}/>\n        </Switch>\n      </Router>\n    );\n  }\n}\nexport default Routes;\n\n","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery/dist/jquery.min.js';\nimport jwt_decode from \"jwt-decode\";\n\n\nclass Login extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = {\n         user_name: '',\n         password: '',\n         token: '', \n         login: [],\n\n        }\n\n    this.login_validation = this.login_validation.bind(this);\n    this.set_login_user_name = this.set_login_user_name.bind(this);\n    this.set_login_password = this.set_login_password.bind(this);\n  }\n\n  async fetchLoginDetails(user_name,password) {\n    const GRAPHQL_URL = '/api/login'\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          mutation {\n            login (user_name: \\\"${user_name}\\\", password: \\\"${password}\\\") {\n                message \n                token\n             }\n           }\n          `\n         }\n      )  \n    })  \n    const {data} = await response.json();\n    return data;        \n  }\n\n login_validation() {\n    this.fetchLoginDetails(this.state.user_name,this.state.password).then(({login}) => {\n        var token_value = JSON.parse(JSON.stringify(login)).token\n        if(token_value !== \"\")\n        {\n            localStorage.setItem('Authorization', token_value);   \n            this.props.doLogin(token_value)\n            this.setState(prevState => ({\n                token: token_value\n              }))\n        }\n        else \n        {\n            alert(\"Invalid User\")\n        }\n    })   \n  } \n\n  set_login_user_name() {\n    this.setState(prevState => ({\n        user_name: document.getElementById(\"user_name\").value\n      }))\n  }\n\n  set_login_password() {\n    this.setState(prevState => ({\n        password: document.getElementById(\"password\").value\n      }))\n  }\n\n  render(){\n    return (\n    <div className=\"main\" align=\"center\">\n         <nav className = \"navbar navbar-expand-lg navbar-dark bg-dark mb-3\">\n             <ul className = \"nav navbar-nav w-50\">\n                 <li className = \"nav-item nav-link\">EtlFlow</li>\n             </ul>\n         </nav>   \n           <div className=\"col-md-3\">\n            <div className=\"login-form \">\n                <form id=\"form_login\" className = \"text-center border border-dark p-5\" onSubmit={(e) => {this.login_validation(); e.preventDefault();}  }>\n                    <p className = \"h4 mb-4\">EtlFlow Login</p>\n                    <div className=\"form-group\">\n                        <input type=\"text\"\n                         className=\"form-control\" \n                         aria-describedby=\"UsernameHelp\"\n                         placeholder=\"Username\"\n                         id=\"user_name\"\n                         onChange={e => this.set_login_user_name()}></input>\n                    </div>\n                    <div className=\"form-group\">\n                        <input\n                         type=\"password\"\n                         className=\"form-control\"\n                         aria-describedby=\"PasswordHelp\"\n                         placeholder=\"Password\"\n                         id=\"password\"\n                         onChange={e => this.set_login_password()}></input>\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-secondary btn-block\">Submit</button>\n                </form>   \n            </div>\n        </div>\n    </div>\n    );\n  }\n}\nexport default Login;","import React from 'react';\n//Bootstrap and jQuery libraries\nimport Routes from './components/Routes';\nimport LoginComponent from './components/Login';\nimport StepRuns from './components/StepRuns';\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props);\n\n    this.state = {\n      token: '',\n    }\n\n    this.doLogin = this.doLogin.bind(this)\n    this.doLogout = this.doLogout.bind(this)\n\n  }\n\n  doLogin(args_token,args_user) {\n    this.setState({\n      token: args_token\n    })\n  }\n\n\n  doLogout(args_token) {\n    this.setState({\n      token: ''\n    })\n  }\n\n\n  render(){\n    if(localStorage.getItem(\"Authorization\") === null){\n      return (  \n          <div>\n            <LoginComponent doLogin = {this.doLogin}/>  \n          </div>\n      );\n    } else {\n      return (  \n        <div>\n          <Routes doLogout = {this.doLogin}/>  \n        </div>\n     );\n    }\n  }\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nwindow.login_url = \"/api/login\"\nwindow.url = \"/api/etlflow\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}