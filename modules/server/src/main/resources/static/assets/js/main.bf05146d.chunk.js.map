{"version":3,"sources":["components/CurrentTime.js","components/ErrorComponent.js","pages/MemoryGraph.js","pages/Metrics.js","pages/BarGraph.js","cards/Stats.js","components/LoaderComponent.js","components/NotificationComponent.js","cards/Credential.js","cards/JobList.js","cards/JobRuns.js","pages/JobLogs.js","cards/JobLogs.js","pages/JobRunDetails.js","components/Routes.js","components/Login.js","App.js","index.js"],"names":["CurrentTime","props","state","currentime","a","GRAPHQL_URL","this","token","localStorage","getItem","fetch","method","headers","body","JSON","stringify","query","response","json","data","fetchEtlFlowJobs","then","setState","prevState","current_time","className","React","Component","ErrorComponent","custom_error","error","toString","class","ws_url","URL","window","location","href","protocol","replace","MemoryGraph","used","total","free","max","error_code","ws","WebSocket","options","low","showArea","showPoint","close_ws","close","document","getElementById","innerText","messages","console","log","onopen","onmessage","evt","message","res","parse","memory","onclose","used_memory_data","series","free_memory_data","total_memory_data","used_memory_chart","Chartist","Line","free_memory_chart","total_memory_chart","updateUsedMemoryChart","getUsedMemoryData","updateFreeMemoryChart","getFreeMemoryData","updateTotalMemoryChart","getTotalMemoryData","call","seriesVals","push","chart","point","length","shift","update","setTimeout","data-toggle","role","aria-expanded","aria-controls","id","type","onClick","Metrics","metrics","loader","status","removeItem","ok","logout","Error","setMetrics","fetchEtlFlowMetrics","catch","active_jobs","active_subscribers","etl_jobs","cron_jobs","build_time","BarGraph","jobLogs","filter","limit","filterOperation","limitOperation","Bar","labels","seriesBarDistance","axisX","offset","axisY","labelInterpolationFnc","value","scaleMinSpace","job_name_labels","job_success","job_failed","map","job_name","success","failed","callApi","setJobLogs","barChart","barChartData","filter_button_name","limit_button_name","aria-labelledby","setInitialState","Stats","LoaderComponent","NotificationComponent","notification_var","notification","is_error","errors","data-dismiss","aria-label","setNotification","aria-hidden","job_props","Credential","credential","jdbc_values","aws_values","jdbc_keys","aws_keys","credential_name","credential_type","insert_credential_type","name","props_updated","replaceAll","update_credentials","setJobErrorDeails","add_credentials","el","i","placeholder","disabled","onChange","setInsertValues","bind","setValues","event","target","setCredentials","fetchEtlFlowCreds","final_props","updateCreds","cred_name","insertCreds","setAddCredInitialState","filter_insert_button_name","job_run_id","set_job_run_state","data-target","tabindex","createAddCredUI","addCredentials","valid_from","createUpdateCredUI","updateCredentials","JobList","jobs","run_job_props","is_active","values","keys","run_job","dt","$","DataTable","column","visible","job_properties","key","html","modal","history","setRunJobKeys","setRunJobValues","removeProps","splice","runEtlJob","setJobDeails","get_etl_jobs","aria-describedby","defaultChecked","e","updateJobActiveState","update_job_state","handleOnClick","schedule","nextSchedule","data-order","schduleRemainingTime","last_run_time","last_run_description","showModal","createUI","addProps","submitRunJob","withRouter","JobRuns","jobruns","retry_job_name","filter_start_date","filter_end_date","paginationValue","undefined","match","params","timerID","setInterval","setJobruns","clearInterval","data_jobruns","default_props","includes","job_id","button","filter_button_job_name","filter_back_button","aria-haspopup","list","setJobName","setFilterStartDate","setFilterEndDate","job_type","start_time","elapsed_time","showJobRunStateModal","properties","retryJobRun","JobLogsData","queueStats","queue","setEtlFlowQueueStats","submitted_from","execution_time","details","JobLogs","fetchEtlFlowQueueStats","JobRunDetails","stepruns","setEtlFlowJobById","fetchEtlFlowJobById","step_run_id_flag","item","step_run_id","linked_jobs","remoteStep","step_type","step_name","showStepRunStateModal","Routes","user","doLogout","decoded","jwt_decode","fetchEtlFlowUserDetails","to","remove_token","exact","path","component","render","Login","user_name","password","login","login_validation","set_login_user_name","set_login_password","GRAPHQL_LOGIN_URL","fetchLoginDetails","token_value","setItem","doLogin","alert","align","onSubmit","preventDefault","App","args_token","args_user","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.bf05146d.chunk.js","sourcesContent":["import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery/dist/jquery.min.js';\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\n\nclass CurrentTime extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { currentime: '' }    \n  }\n\n  async fetchEtlFlowJobs() {\n    const GRAPHQL_URL = this.props.GRAPHQL_URL\n    const token = localStorage.getItem('Authorization')\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          query {\n            currentime {\n                current_time\n             }\n           }\n          `\n        }\n      )  \n    })\n    const {data} = await response.json();\n    return data;    \n  }\n\n\n  componentDidMount() {\n    this.fetchEtlFlowJobs().then(({currentime}) => {\n      this.setState(prevState => ({\n        currentime: currentime.current_time\n      }))\n    })\n }\n  \n render(){\n    return (\n         <li className =\"nav-item\">\n             <a className = \"nav-link disabled\">\n                {this.state.currentime} \n             </a>\n         </li>\n    );\n  }\n}\nexport default CurrentTime;","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n\nimport '../css/App.css'\n\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\n\nclass ErrorComponent extends React.Component {\n  constructor(props){\n    super(props); \n  }\n\n  render(){  \n\n    var custom_error = ''\n\n    if(this.props.error.toString() === 'TypeError: Failed to fetch') {\n      custom_error = this.props.error.toString() + \" \" + \"ERR_CONNECTION_REFUSED.Server is down\"\n    } else {\n      custom_error = this.props.error.toString()\n    }\n\n    return (\n        <div>\n          <table className = \"table table-striped\">\n              <thead class=\"thead-dark\">\n                 <tr>\n                   <th>Error</th>\n                 </tr>\n              </thead> \n              <tbody>\n                  <tr>\n                      <td class=\"text-danger\">{custom_error} </td>\n                  </tr>   \n              </tbody>  \n          </table>\n        </div>\n    );\n  }\n}\nexport default ErrorComponent;\n","\nimport React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\nimport 'chartist/dist/chartist.min.css';\nimport 'chartist/dist/chartist.js';\n \n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n \nimport 'chartist/dist/chartist.min.css';\nimport 'chartist/dist/chartist.js';\nimport Chartist from 'chartist/dist/chartist.min.js';\nimport ErrorComponent from '../components/ErrorComponent';\n\nvar ws_url = new URL(\"/ws/etlflow\" , window.location.href)\nws_url.protocol = ws_url.protocol.replace(\"http\",\"ws\")\n\n// var ws = new WebSocket('wss://devetlflow.startv.com/ws/etlflow/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoibWludF9hZG1pbiIsICJyb2xlIjoiYWRtaW4ifQ.gwiUv0vss-3gX5rkPOGTdJ_81n5N3W7Hv1yeGsJj5g8')\n\n// new WebSocket('wss://devetlflow.startv.com/ws/etlflow/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoibWludF9hZG1pbiIsICJyb2xlIjoiYWRtaW4ifQ.gwiUv0vss-3gX5rkPOGTdJ_81n5N3W7Hv1yeGsJj5g8')\n// new WebSocket(ws_url + \"/\" + localStorage.getItem('Authorization'))\n \nclass MemoryGraph extends React.Component {\n  constructor(props){\n    super(props);\n    const GRAPHQL_URL = '/ws/etlflow'\n \n    this.state  = {\n      used: '',\n      total: '',\n      free: '',\n      max: '',\n      error:'',\n      error_code:'',\n    }\n    this.ws = new WebSocket(ws_url + \"/\" + localStorage.getItem('Authorization'))\n \n    this.options =  {\n      low: 0,\n      showArea: true,\n      showPoint: false\n    };\n  }\n \n  call(close_ws){\n \n    if(close_ws === \"true\"){\n      this.ws.close(1000,\"User closed the connection\")\n      document.getElementById(\"statslinknotify\").innerText = \"Real-Time Stats (Offline)\"\n      this.setState(prevState => ({\n        messages:[]            \n        }))\n      console.log('ws closed')\n    }\n    else{\n      document.getElementById(\"statslinknotify\").innerText = \"Real-Time Stats (Online)\"\n      this.ws = new WebSocket(ws_url + \"/\" + localStorage.getItem('Authorization'))\n \n      this.ws.onopen = () => {\n      console.log('ws connected')\n      }  \n  \n      this.ws.onmessage = evt => {\n      const message = evt.data\n      const obj = JSON.parse(message);\n      var res = obj.memory;\n      this.setState(prevState => ({\n        used: res.used,\n        total: res.total,\n        free: res.free,\n        max: res.max\n      }))\n      } \n  \n      this.ws.onclose = () => {\n        console.log('disconnected')\n      }\n \n      var used_memory_data = {\n       series: [[]]\n        };\n   \n      var free_memory_data = {\n        series: [[]]\n      };\n      \n      var total_memory_data = {\n        series: [[]]\n      };\n  \n      var used_memory_chart = new Chartist.Line('.ct-chart', used_memory_data, this.options);\n      var free_memory_chart = new Chartist.Line('.cpu-chart', free_memory_data, this.options);\n      var total_memory_chart = new Chartist.Line('.cpu-chart-1', total_memory_data, this.options);\n \n      \n      this.updateUsedMemoryChart(used_memory_chart, used_memory_data, this.getUsedMemoryData(), 30)\n      this.updateFreeMemoryChart(free_memory_chart, free_memory_data, this.getFreeMemoryData(), 30)\n      this.updateTotalMemoryChart(total_memory_chart, total_memory_data, this.getTotalMemoryData(), 30)\n    }\n  }\n\n  componentDidMount() {\n    this.call()\n  }\n \n  componentWillUnmount() {\n    this.ws.close()\n  }\n\n  getUsedMemoryData() {\n    var seriesVals = [];\n    seriesVals.push(this.state.used)\n    // console.log(JSON.stringify(seriesVals[0]))\n    return seriesVals[0];\n  }\n\n  getFreeMemoryData() {\n    var seriesVals = [];\n    seriesVals.push(this.state.free)\n    // console.log(JSON.stringify(seriesVals[1]))\n    return seriesVals[0];\n  }\n\n  getTotalMemoryData() {\n    var seriesVals = [];\n    seriesVals.push(this.state.total)    \n    return seriesVals[0];\n  }\n\n  updateUsedMemoryChart(chart,data,point,length) {\n    if(data.series[0].length >= length) {\n      data.series[0].shift();\n    }\n    data.series[0].push(point);\n    chart.update(data);\n    setTimeout(() => { this.updateUsedMemoryChart(chart,data,this.getUsedMemoryData(),length) }, 1000);\n  }\n \n  updateFreeMemoryChart(chart,data,point,length) {\n    if(data.series[0].length >= length) {\n      data.series[0].shift();\n    }\n    data.series[0].push(point);\n    chart.update(data);\n    setTimeout(() => { this.updateFreeMemoryChart(chart,data,this.getFreeMemoryData(),length) }, 1000);\n  }\n \n  updateTotalMemoryChart(chart,data,point,length) {\n    if(data.series[0].length >= length) {\n      data.series[0].shift();\n    }\n    data.series[0].push(point);\n    chart.update(data);\n    setTimeout(() => { this.updateTotalMemoryChart(chart,data,this.getTotalMemoryData(),length) }, 1000);\n  }\n\n   render(){ \n    if (this.state.error !== ''){\n      return (\n        <div>\n          <ErrorComponent error={this.state.error}/>\n        </div>\n      );\n     } else {\n      return (\n      <div class=\"card\">\n      <div class=\"card-header\">\n        <a className = \"btn btn-secondary btn-sm\" data-toggle = \"collapse\"  href = \"#streamnotify\" role = \"button\" \n          aria-expanded = \"true\" aria-controls = \"streamnotify\" id = \"statslinknotify\">\n        </a>\n        <ul class = \"pagination float-right\">\n              <button class= \"btn btn btn-sm ml-2\" type=\"button \" onClick = {() => {\n                      this.call(\"false\")\n                }} >\n                Connect\n              </button>\n              <button class= \"btn btn btn-sm ml-2\" type=\"button \" onClick = {() => {\n                  this.call(\"true\")\n                }} >\n                Close\n              </button>\n        </ul>      \n      </div>\n    <div className = \"collapse\" id = \"streamnotify\">\n    <div class= \"card-body\">\n    <div class = \"row\">\n      <div class=\"col-sm-3\">\n          <div class=\"card\">\n              <div class=\"card-header\">Used Memory</div>\n              <div class= \"card-body\">\n                  <div class=\"ct-chart\"></div>\n              </div>\n          </div>\n      </div>\n      <div class=\"col-sm-3\">\n          <div class=\"card\">\n              <div class=\"card-header\">Free Memory</div>\n              <div class= \"card-body\">\n                  <div class=\"cpu-chart\"></div>\n              </div>\n          </div>\n      </div>\n      <div class=\"col-sm-3\">\n          <div class=\"card\">\n              <div class=\"card-header\">Total Memory</div>\n              <div class= \"card-body\">\n                  <div class=\"cpu-chart-1 \"></div>\n              </div>\n          </div>\n      </div>\n      <div class=\"col-sm-3\">\n        <div class=\"card\">\n           <div class=\"card-header\">Current Usage</div>\n              <div class= \"card-body\">\n                <div>\n                   <ul class=\"list-group \">\n                       <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                         <b>Used Memory</b>\n                         <span class=\"badge badge-secondary badge-pill\">{this.state.used}</span>\n                       </li>\n                       <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                         <b>Free Memory</b>\n                         <span class=\"badge badge-secondary badge-pill\">{this.state.free}</span>\n                       </li>\n                       <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                         <b>Total Memory</b>\n                         <span class=\"badge badge-secondary badge-pill\">{this.state.total}</span>\n                       </li>\n                       <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                         <b>Max Memory</b>\n                         <span class=\"badge badge-secondary badge-pill\">{this.state.max}</span>\n                       </li>\n                   </ul>\n                </div> \n              </div>\n      </div>\n      </div>\n    </div>\n    <br/>\n    </div>\n    </div>\n    </div>\n  );}\n  }       \n}\n \nexport default MemoryGraph;\n \n\n","\nimport React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\nimport 'chartist/dist/chartist.min.css';\nimport 'chartist/dist/chartist.js';\n \n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\nimport ChartistGraph from 'react-chartist';\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n \nimport 'chartist/dist/chartist.min.css';\nimport 'chartist/dist/chartist.js';\nimport Chartist from 'chartist/dist/chartist.min.js';\nimport ErrorComponent from '../components/ErrorComponent';\n\n\nclass Metrics extends React.Component {\n  constructor(props){\n    super(props);\n \n    this.state  = {\n      metrics: [],\n      error:'',\n      error_code:'',\n\n    }\n  }\n \n  async fetchEtlFlowMetrics() {\n    const GRAPHQL_URL = this.props.GRAPHQL_URL\n    const token = localStorage.getItem('Authorization')\n \n    this.setState(prevState => ({\n      loader: true,\n      error: ''\n    }))\n    \n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          query {\n            metrics {\n                active_jobs\n                active_subscribers\n                etl_jobs\n                cron_jobs\n                build_time\n              }\n           }\n          `\n        }\n      ) \n    })\n \n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n    \n\n    if (!response.ok) {\n      var message = `An error has occured: ${response.status}`;\n      if (response.status === 403) {\n        message = `net::ERR_ABORTED 403 (Forbidden). Please Logout ...`;\n        this.props.logout() \n        localStorage.removeItem(\"Authorization\")\n        throw  new Error(message);\n      } else { \n        throw  new Error(message);\n      }\n    } \n    else { \n    \n      const {data} = await response.json();\n      this.setState(prevState => ({\n      loader: false\n      }))\n \n    return data; }  \n  }\n \n  componentDidMount() {\n    this.setMetrics()\n  }\n \n  setMetrics(){\n    this.fetchEtlFlowMetrics().then(({metrics}) => {\n      this.setState(prevState => ({\n          metrics: metrics\n      }))\n    }).catch(error => {\n      this.setState(prevState => ({\n        error: error\n      }))\n  });  \n  }\n \n  render(){\n \n    if (this.state.error !== ''){\n      return (\n        <div class=\"container\">\n         <ul class = \"pagination justify-content-center\">\n             <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                    this.setMetrics()\n                }}>\n               Refresh\n             </button>\n         </ul>\n          <ErrorComponent error={this.state.error}/>\n        </div>\n      );\n     } else {\n      return (\n      <div class=\"card\">\n      <div class=\"card-header\">\n        <a className = \"btn btn-secondary btn-sm\" data-toggle = \"collapse\"  href = \"#streamnotify2\" role = \"button\" \n           aria-expanded = \"true\" aria-controls = \"streamnotify\" id = \"statslinknotify\">Metrics\n        </a>\n        <ul class = \"pagination float-right\">\n          <button class= \"btn btn btn-sm ml-2\" type=\"button \" onClick = {() => {\n              this.setMetrics()\n          }} >\n          Refresh\n          </button>\n        </ul>      \n      </div>\n      <div className = \"collapse\" id = \"streamnotify2\">\n      <div class= \"card-body\">\n      <ul class=\"list-group \">\n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Active Jobs</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.active_jobs}</span>\n            </li>\n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Active Subscribers</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.active_subscribers}</span>\n            </li>\n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Etl Jobs</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.etl_jobs}</span>\n            </li>\n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Cron Jobs</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.cron_jobs}</span>\n            </li> \n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Build Time</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.build_time}</span>\n            </li>  \n         </ul>\n      </div>\n      </div>\n  </div>\n  );}\n  }       \n}\n \nexport default Metrics;\n \n\n","\nimport React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\nimport 'chartist/dist/chartist.min.css';\nimport 'chartist/dist/chartist.js';\n \n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\nimport ChartistGraph from 'react-chartist';\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n \nimport 'chartist/dist/chartist.min.css';\nimport 'chartist/dist/chartist.js';\nimport Chartist from 'chartist/dist/chartist.min.js';\nimport ErrorComponent from '../components/ErrorComponent';\n\nclass BarGraph extends React.Component {\n  constructor(props){\n    super(props);\n    const GRAPHQL_URL = '/ws/etlflow'\n \n    this.state  = {\n      jobLogs:[],\n      filter: '',\n      limit: '',\n      error:'',\n      error_code:'',\n    }\n \n    this.filterOperation = ['2','5','10']\n    this.limitOperation = ['2','5','10','30','50']\n \n    this.options = {\n      low: 0,\n      showArea: true,\n      showPoint: false\n    };\n  }\n \n  async callApi() {\n    const GRAPHQL_URL = this.props.GRAPHQL_URL\n    const token = localStorage.getItem('Authorization')\n \n    var query =  ` query { jobLogs { job_name success failed }}`\n   \n    if(this.state.filter !== '' && this.state.limit !== '') {\n      query =  ` query { jobLogs(limit: ${this.state.limit}, filter: ${this.state.filter}  ) { job_name success failed }}`\n    } else  if (this.state.filter !== '') {\n      query =  ` query { jobLogs(filter: ${this.state.filter}) { job_name success failed }}`\n    } else  if (this.state.limit !== '') {\n      query =  ` query { jobLogs(limit: ${this.state.limit}) { job_name success failed }}`\n    }\n \n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: query\n        }\n      ) \n    })\n\n    this.setState(prevState => ({\n      loader: true,\n      error: ''\n    }))\n\n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n\n\n    if (!response.ok) {\n      var message = `An error has occured: ${response.status}`;\n      if (response.status === 403) {\n        \n        message = `net::ERR_ABORTED 403 (Forbidden). Please Logout ...`;\n        this.props.logout() \n        localStorage.removeItem(\"Authorization\")\n        throw  new Error(message);\n      } else { \n        throw  new Error(message);\n      }\n    } \n    else {  \n      const {data} = await response.json()\n      return data;   \n    }\n  }\n\n  setErrorState(error,error_code) {\n    this.setState(prevState => ({\n      error: error,\n      error_code: error_code\n    }))\n  }\n\n  barChart(){\n    new Chartist.Bar('.ct-chart-2', {\n      labels: [0],\n      series: [\n        [0],\n        [0],\n      ]\n    }, {\n      seriesBarDistance: 10,\n      axisX: {\n        offset: 60\n      },\n      axisY: {\n        offset: 80,\n        labelInterpolationFnc: function(value) {\n          return value\n        },\n        scaleMinSpace: 15\n      }\n    });       \n  }\n \n  barChartData(){\n    var job_name_labels = []\n    var job_success = []\n    var job_failed = []\n \n    this.state.jobLogs.map( (data) => {\n     job_name_labels.push(data.job_name)\n     job_success.push(data.success)\n     job_failed.push(data.failed)\n    })\n   \n    new Chartist.Bar('.ct-chart-2', {\n      labels: job_name_labels,\n      series: [\n        job_success,\n        job_failed,\n      ]\n    }, {\n      seriesBarDistance: 10,\n      axisX: {\n        offset: 60\n      },\n      axisY: {\n        offset: 80,\n        labelInterpolationFnc: function(value) {\n          return value\n        },\n        scaleMinSpace: 15\n      }\n    });                   \n  }\n\n  componentDidMount() {\n    this.callApi()\n    this.setJobLogs()\n    this.barChart()  \n    this.barChartData() \n  }\n \n\n  async setInitialState(){\n    this.setState(prevState => ({ \n      filter: '',\n      limit: ''\n    }), () => this.setJobLogs())\n  }\n \n  setJobLogs(){\n    this.callApi().then(({jobLogs}) => {\n      this.setState(prevState => ({\n        jobLogs: jobLogs\n      }))\n    }).catch(error => {\n      this.setState(prevState => ({\n        error: error,\n        loader: false\n      }))\n    });  \n  }\n\n \n  render(){\n\n    var filter_button_name = ''\n    var limit_button_name = ''\n \n    if (this.state.filter !== '') {\n      filter_button_name = this.state.filter\n    }else {\n      filter_button_name = \"Add Filter (In Days)\"\n    }\n \n    if (this.state.limit !== '') {\n      limit_button_name = this.state.limit\n    }else {\n      limit_button_name = \"Add limit\"\n    }\n\n    if (this.state.error !== ''){\n      return (\n        <div class=\"container\">\n         <ul class = \"pagination justify-content-center\">\n             <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                    this.setJobLogs() \n                }}>\n               Refresh\n             </button>\n         </ul>\n          <ErrorComponent error={this.state.error}/>\n        </div>\n      );\n     } else {\n    return (\n      <div class=\"card\">\n      <div class=\"card-header\">\n      <a className = \"btn btn-secondary btn-sm\" data-toggle = \"collapse\"  href = \"#streamnotify1\" role = \"button\" \n        aria-expanded = \"true\" aria-controls = \"streamnotify1\">Etl Jobs Vs Count (Success/Failed)\n      </a> \n        <ul class = \"pagination float-right\">\n        <div class=\"dropdown\">\n            <button type=\"button\" class=\"btn btn-light dropdown-toggle\" data-toggle=\"dropdown\">\n              {filter_button_name}\n            </button>\n            <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n              { this.filterOperation.map ( filter => (\n                <a class=\"dropdown-item\">\n                   <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                   this.setState(prevState => ({\n                       filter: filter\n                 }),() => this.setJobLogs())}}> {filter} </button>\n                </a>\n              ))}\n            </div>\n          </div>\n          <div class=\"dropdown\">\n            <button type=\"button\" class=\"btn btn-light dropdown-toggle\" data-toggle=\"dropdown\">\n            {limit_button_name}\n            </button>\n            <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n              { this.limitOperation.map ( limit => (\n                <a class=\"dropdown-item\">\n                   <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                   this.setState(prevState => ({\n                       limit: limit\n                 }),() => this.setJobLogs())}}> {limit} </button>\n                </a>\n              ))}\n            </div>\n          </div>\n          <button class= \"btn btn btn-sm ml-2\" type=\"button \" onClick = {() => {\n                this.setInitialState()\n          }}>Clear</button>\n          <button class= \"btn btn btn-sm ml-2\" type=\"button \" onClick = {() => {\n           \n               this.setJobLogs() \n          \n               var job_name_labels = []\n               var job_success = []\n               var job_failed = []\n\n               this.state.jobLogs.map( (data) => {\n                job_name_labels.push(data.job_name)\n                job_success.push(data.success)\n                job_failed.push(data.failed)\n               })\n\n              new Chartist.Bar('.ct-chart-2', {\n                labels: job_name_labels,\n                series: [\n                  job_success,\n                  job_failed,\n                ]\n              }, {\n                seriesBarDistance: 10,\n                axisX: {\n                  offset: 60\n                },\n                axisY: {\n                  offset: 80,\n                  labelInterpolationFnc: function(value) {\n                    return value\n                  },\n                  scaleMinSpace: 15\n                }\n              });                   \n          }} >\n          Refresh\n          </button>\n        </ul>      \n        </div>\n        <div className = \"collapse\" id = \"streamnotify1\">\n        <div class= \"card-body\">\n            <div class=\"ct-chart-2\"></div>\n        </div>\n        </div>\n  </div>\n  );}\n  }       \n}\n \nexport default BarGraph;\n \n\n","\nimport React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\nimport 'chartist/dist/chartist.min.css';\nimport 'chartist/dist/chartist.js';\n \n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n \nimport 'chartist/dist/chartist.min.css';\nimport 'chartist/dist/chartist.js';\nimport ErrorComponent from '../components/ErrorComponent';\nimport MemoryGraph from '../pages/MemoryGraph';\nimport Metrics from '../pages/Metrics';\nimport BarGraph from '../pages/BarGraph';\n\nclass Stats extends React.Component {\n  constructor(props){\n    super(props);\n    this.state  = { \n        error:'',\n        error_code:'',\n      }\n  }\n\n  render(){\n\n    if (this.state.error !== ''){\n      return (\n        <div>\n          <ErrorComponent error={this.state.error}/>\n        </div>\n      );\n     } else {\n    return (\n      <div class = \"container-fluid\">\n                <MemoryGraph GRAPHQL_URL = {this.props.GRAPHQL_URL} logout={this.props.logout}  />    \n         <br/>\n        <div class = \"row\">\n            <div class=\"col-sm-9\">\n                <BarGraph GRAPHQL_URL = {this.props.GRAPHQL_URL}  logout={this.props.logout} />   \n            </div>\n            <div class=\"col-sm-3\">\n                <Metrics  GRAPHQL_URL = {this.props.GRAPHQL_URL} logout={this.props.logout}  />  \n            </div>    \n        </div>\n      </div>\n  );}\n  }       \n}\n \nexport default Stats;\n \n\n","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n\nimport '../css/App.css'\n\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\n\nclass LoaderComponent extends React.Component {\n  constructor(props){\n    super(props); \n  }\n\n  render(){\n    return (\n        <div class=\"d-flex justify-content-center\">\n           <div class=\"spinner-border m-5\" role=\"status\">\n             <span class=\"sr-only\">Loading...</span>\n           </div>\n        </div>\n    );\n  }\n}\nexport default LoaderComponent;\n","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n\nimport '../css/App.css'\n\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\n\nclass NotificationComponent extends React.Component {\n  constructor(props){\n    super(props); \n  }\n\n  render(){  \n\n    var notification_var = \"\"\n    if(this.props.notification){\n      if(this.props.is_error) {\n         notification_var =\n         <div class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">\n            <h4 class=\"alert-heading\">{this.props.message}</h4>\n            <p>{this.props.errors}</p>\n            <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" onClick = {() => {this.props.setNotification(false)}}>\n               <span aria-hidden=\"true\">&times;</span>\n            </button>\n         </div>\n       } else {\n          notification_var =\n          <div class=\"alert alert-success alert-dismissible fade show\" role=\"alert\">\n             <h4 class=\"alert-heading\">{this.props.message}</h4>\n             <p>{this.props.job_props}</p>\n             <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" onClick = {() => {this.props.setNotification(false)}}>\n                <span aria-hidden=\"true\">&times;</span>\n             </button>\n          </div>\n        }  \n    }\n\n    return (\n        <div>\n          {notification_var}\n        </div>\n    );\n  }\n}\nexport default NotificationComponent;\n","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n\n\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport $ from 'jquery';\nimport LoaderComponent from '../components/LoaderComponent';\nimport ErrorComponent from '../components/ErrorComponent';\nimport Notification from '../components/NotificationComponent';\n\nclass Credential extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { credential: [],\n      loader:false,\n      jdbc_values: [],\n      aws_values: [],\n      jdbc_keys: [\"url\",\"user\",\"passsword\",\"driver\"],\n      aws_keys: [\"access_key\",\"secret_key\"],\n      errors: '',\n      is_error: false,\n      credential_name:'',\n      credential_type:'',\n      insert_credential_type: '',\n      error:'',\n      error_code:'',\n\n    }\n    this.filterOperation = [\"JDBC\",\"AWS\"]\n\n  }\n  \n  async fetchEtlFlowCreds() {\n    const GRAPHQL_URL = this.props.GRAPHQL_URL\n    const token = localStorage.getItem('Authorization')\n\n    this.setState(prevState => ({\n      loader: true,\n      error: ''\n    }))\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {  \n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          query {\n            credential {\n              name\n              type\n              valid_from\n            }\n           }\n          `\n        }\n      )  \n    })\n\n\n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n\n\n    if (!response.ok) {\n      var message = `An error has occured: ${response.status}`;\n      if (response.status === 403) {\n        \n        message = `net::ERR_ABORTED 403 (Forbidden). Please Logout ...`;\n        this.props.logout() \n        localStorage.removeItem(\"Authorization\")\n        throw  new Error(message);\n      } else { \n        throw  new Error(message);\n      }\n    } \n    else {  \n    const {data} = await response.json();\n    this.setState(prevState => ({\n      loader: false\n    }))\n    return data;   \n  }\n}\n\n  async updateCreds(name,type,value) {\n    const GRAPHQL_URL = this.props.GRAPHQL_URL\n    const token = localStorage.getItem('Authorization')\n\n    var props_updated = JSON.stringify(value).replaceAll(\"\\\"?\",\"\").replaceAll(\"?\\\"\",\"\")\n\n    var query = ` mutation { update_credentials (name:\\\"${name}\\\", type:JDBC, value: ${props_updated}) { name } }`\n    if(type === \"aws\") {\n      query = ` mutation { update_credentials (name:\\\"${name}\\\", type:AWS, value: ${props_updated}) { name } }`\n    }\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: query\n        }\n      )  \n    })\n    \n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n    \n    if (!response.ok) {\n      var message = `An error has occured: ${response.status}`;\n      if (response.status === 403) {\n        \n        message = `net::ERR_ABORTED 403 (Forbidden). Please Logout ...`;\n        this.props.logout() \n        localStorage.removeItem(\"Authorization\")\n        throw  new Error(message);\n      } else { \n        throw  new Error(message);\n      }\n    }  else {  \n      const {data,errors} = await response.json();\n\n      if(JSON.parse(JSON.stringify(data.update_credentials)) !== null){\n        this.setJobErrorDeails(false)\n      }\n      else {\n        this.setJobErrorDeails(true,JSON.parse(JSON.stringify(errors)))\n      }\n  \n      return data;    \n    }   \n  }\n\n  async insertCreds(name,type,value) {\n    const GRAPHQL_URL = this.props.GRAPHQL_URL\n    const token = localStorage.getItem('Authorization')\n\n    var props_updated = JSON.stringify(value).replaceAll(\"\\\"?\",\"\").replaceAll(\"?\\\"\",\"\")\n    var query = ` mutation { add_credentials (name:\\\"${name}\\\", type:JDBC, value: ${props_updated}) { name } }`\n    if(type === \"AWS\") {\n      query = ` mutation { add_credentials (name:\\\"${name}\\\", type:AWS, value: ${props_updated}) { name } }`\n    }\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: query\n        }\n      )  \n    })\n\n\n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n    \n    if (!response.ok) {\n      var message = `An error has occured: ${response.status}`;\n      if (response.status === 403) {\n        \n        message = `net::ERR_ABORTED 403 (Forbidden). Please Logout ...`;\n        this.props.logout() \n        localStorage.removeItem(\"Authorization\")\n        throw  new Error(message);\n      } else { \n        throw  new Error(message);\n      }\n    } \n    else {  \n      const {data,errors} = await response.json();\n      if(JSON.parse(JSON.stringify(data.add_credentials)) !== null){\n        this.setJobErrorDeails(false)\n      }\n      else {\n        this.setJobErrorDeails(true,errors[0].message)\n      }\n  \n      return data;    \n    } \n    \n  }\n\n  setUpdateCredInitialState(){\n    this.setState(prevState => ({  \n      aws_values: [],\n      jdbc_values: []\n    }))\n  }\n\n  setNotification = state => {\n    this.setState(prevState => ({\n      notification: state\n    }))\n  }\n\n  createUpdateCredUI(){\n    if(this.state.credential_type === \"jdbc\"){\n    return this.state.jdbc_keys.map((el, i) => \n        <div key={i}>\n        <div class=\"row\">\n          <div class=\"col-xs-4 col-sm-4 col-md-4\">\n            <div class=\"form-group\">\n               <input class=\"form-control\" type=\"text\" placeholder={this.state.jdbc_keys[i]} disabled/>\n            </div>\n          </div>  \n          <div class=\"col-xs-7 col-sm-7 col-md-7\">\n            <div class=\"form-group\">\n              <input class=\"form-control\"  type=\"text\"  placeholder=\"***********\" onChange={this.setInsertValues.bind(this, i)} />\n            </div>    \n          </div> \n        </div> \n        </div>            \n    )\n    }else if(this.state.credential_type === \"aws\"){\n      return this.state.aws_keys.map((el, i) => \n        <div key={i}>\n        <div class=\"row\">\n          <div class=\"col-xs-4 col-sm-4 col-md-4\">\n            <div class=\"form-group\">\n               <input class=\"form-control\" type=\"text\" placeholder={this.state.aws_keys[i]} disabled/>\n            </div>\n          </div>  \n          <div class=\"col-xs-7 col-sm-7 col-md-7\">\n            <div class=\"form-group\">\n              <input class=\"form-control\"  type=\"text\"  placeholder=\"***********\" onChange={this.setInsertValues.bind(this, i)} />\n            </div>\n          </div> \n        </div> \n        </div>            \n    )\n    }\n  }\n\n  createAddCredUI(){\n    if(this.state.insert_credential_type === \"JDBC\"){\n    return this.state.jdbc_keys.map((el, i) => \n        <div key={i}>\n        <div class=\"row\">\n          <div class=\"col-xs-4 col-sm-4 col-md-4\">\n            <div class=\"form-group\">\n               <input class=\"form-control\" type=\"text\" placeholder={this.state.jdbc_keys[i]} disabled/>\n            </div>\n          </div>  \n          <div class=\"col-xs-7 col-sm-7 col-md-7\">\n            <div class=\"form-group\">\n              <input class=\"form-control\"  type=\"text\"  placeholder=\"Type Value\" onChange={this.setValues.bind(this, i)} />\n            </div>\n          </div> \n        </div> \n        </div>            \n    )\n    }else if(this.state.insert_credential_type === \"AWS\"){\n      return this.state.aws_keys.map((el, i) => \n        <div key={i}>\n        <div class=\"row\">\n          <div class=\"col-xs-4 col-sm-4 col-md-4\">\n            <div class=\"form-group\">\n               <input class=\"form-control\" type=\"text\" placeholder={this.state.aws_keys[i]} disabled/>\n            </div>\n          </div>  \n          <div class=\"col-xs-7 col-sm-7 col-md-7\">\n            <div class=\"form-group\">\n              <input class=\"form-control\"  type=\"text\"  placeholder=\"Type Value\" onChange={this.setValues.bind(this, i)} />\n            </div>\n          </div> \n        </div> \n        </div>            \n    )\n    }\n  }\n\n  setAddCredInitialState(){\n  this.setState(prevState => ({  \n    insert_credential_type: '',\n    aws_values: [],\n    jdbc_values: []\n  }))\n  document.getElementById(\"cred_name\").value = ''\n  }\n\n  setValues(i, event) {\n\n  if(this.state.insert_credential_type === \"JDBC\") {\n    let jdbc_values = [...this.state.jdbc_values];\n    jdbc_values[i] =  event.target.value;\n    this.setState({ jdbc_values });\n   } else{ \n    let aws_values = [...this.state.aws_values];\n    aws_values[i] =  event.target.value;\n    this.setState({ aws_values });\n   }\n  }\n \n  setInsertValues(i, event) {\n\n  if(this.state.credential_type === \"jdbc\") {\n    let jdbc_values = [...this.state.jdbc_values];\n    jdbc_values[i] =  event.target.value;\n    this.setState({ jdbc_values });\n   } else{ \n    let aws_values = [...this.state.aws_values];\n    aws_values[i] =  event.target.value;\n    this.setState({ aws_values });\n   }\n  }\n \n  componentDidMount() {\n    //calling getInfo api\n    this.setCredentials()\n  }\n\n  setCredentials(){\n    this.fetchEtlFlowCreds().then(({credential}) => {\n      this.setState(prevState => ({\n        credential: credential\n      }))\n    }).catch(error => {\n        this.setState(prevState => ({\n          error: error,\n          loader: false\n        }))\n    });\n  }\n\n  setCredUpdateDeails(name){\n    this.setState(prevState => ({\n      credential_name: name\n      }))\n  } \n\n  updateCredentials() {\n\n    var final_props = []\n    var i;\n\n    if(this.state.credential_type === \"jdbc\") {\n      for (i = 0; i < this.state.jdbc_keys.length; i++) {\n        var props = {[\"?key?\"] : this.state.jdbc_keys[i],[\"?value?\"] : this.state.jdbc_values[i]}\n       final_props[i] =  props\n       }\n     } else{ \n       for (i = 0; i < this.state.aws_keys.length; i++) {\n         var props = {[\"?key?\"] : this.state.aws_keys[i],[\"?value?\"] : this.state.aws_values[i]}\n        final_props[i] =  props\n        }\n     }\n \n   var props = ''\n \n   this.updateCreds(this.state.credential_name,this.state.credential_type,final_props).then(({update_credentials}) => {\n     this.setNotification(true)\n     var data =  JSON.parse(JSON.stringify(update_credentials))\n   }).catch(error => {\n    this.setState(prevState => ({\n      error: error,\n      loader: false\n    }))\n});\n\n   this.setState(prevState => ({  \n    credential_type: '',\n    aws_values: [],\n    jdbc_values: []\n  }))\n  }\n\n  async addCredentials() {\n\n    var final_props = []\n    var i;\n\n    if(this.state.insert_credential_type === \"JDBC\") {\n     for (i = 0; i < this.state.jdbc_keys.length; i++) {\n       var props = {[\"?key?\"] : this.state.jdbc_keys[i],[\"?value?\"] : this.state.jdbc_values[i]}\n      final_props[i] =  props\n      }\n    } else{ \n      for (i = 0; i < this.state.aws_keys.length; i++) {\n        var props = {[\"?key?\"] : this.state.aws_keys[i],[\"?value?\"] : this.state.aws_values[i]}\n       final_props[i] =  props\n       }\n    }\n \n   var props = ''\n \n   var cred_name = document.getElementById(\"cred_name\").value\n\n   this.insertCreds(cred_name,this.state.insert_credential_type,final_props).then(({add_credentials}) => {\n     this.setNotification(true)\n     var data =  JSON.parse(JSON.stringify(add_credentials))\n   }, () => this.setAddCredInitialState())\n\n   this.setState(prevState => ({  \n    insert_credential_type: '',\n    aws_values: [],\n    jdbc_values: []\n  }))\n  document.getElementById(\"cred_name\").value = ''\n  }\n\n  setJobErrorDeails(is_error,errors){\n    this.setState(prevState => ({\n      is_error: is_error,\n      errors: errors                   \n      }))\n  }\n\n  render(){\n\n    var filter_button_name = ''\n    if (this.state.credential_type !== '') {\n      filter_button_name = this.state.credential_type  \n    }else {\n      filter_button_name = \"Add Credential Type\"\n    } \n\n    var filter_insert_button_name = ''\n    if (this.state.insert_credential_type !== '') {\n      filter_insert_button_name = this.state.insert_credential_type  \n    }else {\n      filter_insert_button_name = \"Add Credential Type\"\n    } \n\n    var filter_update_button_name = ''\n    if (this.state.credential_type !== '') {\n      filter_update_button_name = this.state.credential_type  \n    }else {\n      filter_update_button_name = \"Add Credential Type\"\n    } \n\n    var message = \"\"\n    var job_props = ''\n    var errors = ''\n\n    if(this.state.notification){\n      if(this.state.is_error) {\n         message = 'Error while Updatating Credential ! '\n         job_props = ''\n         errors = this.state.errors\n       } else {\n          message = 'Credentials  submitted successfully! '\n          job_props = ''\n          errors = ''\n        }  \n    }\n\n    if (this.state.error !== ''){\n      return (\n        <div class=\"container\">\n         <ul class = \"pagination justify-content-center\">\n             <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                    this.setCredentials()\n                }}>\n               Refresh\n             </button>\n         </ul>\n          <ErrorComponent error={this.state.error}/>\n        </div>\n      );\n    } \n    else if (this.state.loader){\n      return (\n        <div>\n          <LoaderComponent job_run_id={this.job_run_id}  set_job_run_state = {this.set_job_run_state} />\n        </div>\n      );\n    }\n    else{\n      return (\n        <div className=\"container\">\n        <div><Notification notification={this.state.notification} is_error={this.state.is_error}  errors = {errors}  message={message} job_props = {job_props} setNotification={this.setNotification}/></div>\n          <ul class = \"pagination justify-content-center\">\n            <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                   this.setCredentials()\n                }} >\n               Refresh\n            </button>\n            <div class=\"inner\"> \n               <button type=\"button\" class=\"btn btn-warning ml-2\" data-toggle=\"modal\" data-target=\"#exampleModal1\">\n                   Add New Credentials\n               </button>\n               <div class=\"modal fade\" id=\"exampleModal1\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel1\" aria-hidden=\"true\">\n                  <div class=\"modal-dialog\" role=\"document\">\n                    <div class=\"modal-content\">\n                      <div class=\"modal-header\">\n                        <h5 class=\"modal-title\" id=\"exampleModalLabel1\">Add Credentials</h5>\n                        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                          <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                      </div>\n                      <div class=\"modal-body\">\n                        <div class=\"row\">\n                          <div class=\"col-xs-7 col-sm-7 col-md-7\">\n                            <div class=\"form-group\">\n                               Credential Name\n                               <input class=\"form-control\" placeholder=\"Add Name\"  type=\"text\" id=\"cred_name\"/>\n                            </div>\n                          </div> \n                          <div class=\"col-xs-7 col-sm-7 col-md-7\">\n                            <div class=\"form-group\">\n                            <div class=\"dropdown\">\n                              <button type=\"button\" class=\"btn btn-light dropdown-toggle\" data-toggle=\"dropdown\">\n                                {filter_insert_button_name}\n                              </button>\n                              <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n                                { this.filterOperation.map ( filter => (\n                                  <a class=\"dropdown-item\">\n                                     <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                                     this.setState(prevState => ({\n                                      insert_credential_type: filter\n                                   }))\n                                   }}> {filter} </button>\n                                  </a>\n                                ))}\n                              </div>\n                            </div> \n                            </div>\n                          </div>  \n                        </div> \n                        {this.createAddCredUI()} \n                        <input type=\"button\" class=\"btn btn-primary ml-2\" value=\"Submit\" onClick = {() => this.addCredentials()}/>\n                      </div>\n                      <div class=\"modal-footer\">\n                        <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n             </div>\n          </ul>\n          <table id=\"jobruns\" class=\"table table-sm table-bordered\">\n              <thead class=\"thead-dark\">\n                    <tr>\n                      <th>Credential Name</th>\n                      <th>Type</th>\n                      <th>Last Updated</th>\n                      <th>Action</th>\n                    </tr>\n                  </thead>\n                    <tbody>\n                    {this.state.credential.map( data => (\n                      <tr>\n                        <td>{data.name}</td>\n                        <td>{data.type}</td>\n                        <td>{data.valid_from}</td>\n                        <td>\n                        <div class=\"inner\">\n                             <button type=\"button\" class=\"btn btn-warning ml-2\" data-toggle=\"modal\" data-target=\"#exampleModal\"  onClick = {() => \n                                      this.setState(prevState => ({\n                                        credential_name: data.name,\n                                        credential_type: data.type\n                                  }))}>\n                                 Update\n                             </button>\n                             <div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                                <div class=\"modal-dialog\" role=\"document\">\n                                  <div class=\"modal-content\">\n                                    <div class=\"modal-header\">\n                                      <h5 class=\"modal-title\" id=\"exampleModalLabel\">Update Credentials</h5>\n                                      <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                        <span aria-hidden=\"true\">&times;</span>\n                                      </button>\n                                    </div>\n                                    <div class=\"modal-body\">\n                                    <div class=\"row\">\n                                        <div class=\"col-xs-7 col-sm-7 col-md-7\">\n                                          <div class=\"form-group\">\n                                             Credential Name\n                                             <input class=\"form-control\" placeholder={this.state.credential_name}  type=\"text\" disabled/>\n                                          </div>\n                                        </div> \n                                        <div class=\"col-xs-7 col-sm-7 col-md-7\">\n                                          <div class=\"form-group\">\n                                              Type\n                                             <input class=\"form-control\" placeholder={this.state.credential_type}   type=\"text\" disabled/>\n                                          </div>\n                                        </div>  \n                                      </div> \n                                      {this.createUpdateCredUI()}        \n                                      <input type=\"button\" class=\"btn btn-primary ml-2\" value=\"Submit\" onClick = {() => this.updateCredentials()}/>\n                                    </div>\n                                    <div class=\"modal-footer\">\n                                      <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                    </div>\n                                  </div>\n                                </div>\n                              </div>\n                           </div>\n                        </td>\n                      </tr>\n                    ))}\n                    </tbody>\n               </table>  \n             </div>\n      );\n   }      \n  }\n}\n\nexport default Credential;\n","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n\nimport '../css/App.css'\nimport { withRouter } from 'react-router'\n\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport Notification from '../components/NotificationComponent';\nimport ErrorComponent from '../components/ErrorComponent';\n\nimport $ from 'jquery';\n\nclass JobList extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { \n      jobs: [],\n      notification: false,\n      run_job_props: '',\n      job_name: '',\n      errors: [],\n      is_error: false,\n      is_active: true,\n      values: [],keys: []\n    }\n  }\n\n  async updateJobActiveState(job_name,state) {\n    const GRAPHQL_URL = this.props.GRAPHQL_URL\n    const token = localStorage.getItem('Authorization')\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n            mutation {\n              update_job_state (name:\\\"${job_name}\\\" ,state: ${state}){\n             }\n           }\n          `\n        }\n      )  \n    })\n    if (!response.ok) {\n      var message = `An error has occured: ${response.status}`;\n      if (response.status === 403) {\n        message = `net::ERR_ABORTED 403 (Forbidden). Please Logout ...`;\n        this.props.logout() \n        throw  new Error(message);\n      } else { \n        throw  new Error(message);\n      }\n    } else {  \n      const {data} = await response.json();\n      return data;    \n    }   \n  }\n\n  async runEtlJob(job_name,props) {\n    const GRAPHQL_URL = this.props.GRAPHQL_URL\n    const token = localStorage.getItem('Authorization')\n\n    var query =  `\n      mutation {\n        run_job (name:\\\"${job_name}\\\"){\n          name\n          props {key value}\n      }\n      }\n    ` \n    if(props.length > 0) {\n      var props_updated = JSON.stringify(props).replaceAll(\"\\\"$\",\"\").replaceAll(\"$\\\"\",\"\")\n      query =  `\n      mutation {\n        run_job (name:\\\"${job_name}\\\" ,props: ${props_updated}){\n          name\n          props {key value}\n      }\n      }\n    ` \n    }\n    this.setState(prevState => ({\n      loader: true\n    }))\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: query\n        }\n      )  \n    })\n    \n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n\n    if (!response.ok) {\n      var message = `An error has occured: ${response.status}`;\n      if (response.status === 403) {\n        \n        message = `net::ERR_ABORTED 403 (Forbidden). Please Logout ...`;\n        this.props.logout() \n        localStorage.removeItem(\"Authorization\")\n        throw  new Error(message);\n      } else { \n        throw  new Error(message);\n      }\n    } \n    else {  \n      this.setState(prevState => ({\n        loader: false\n      }))\n\n      const {data,errors} = await response.json();\n      if(JSON.parse(JSON.stringify(data.run_job)) !== null){\n          this.setJobErrorDeails(false)\n      }\n      else {\n        this.setJobErrorDeails(true,JSON.parse(JSON.stringify(errors)))\n      }\n      return data;  \n    }\n  }\n\n  componentDidMount() {\n    var dt = $('#joblist').DataTable({\n      \"order\": [[ 6, \"desc\" ]]\n  });\n    dt.column(6).visible(false);\n    dt.column(3).visible(false);\n\n  }\n\n  showModal(data)\n  {\n    var job_properties = \"\" \n    { \n      data.map(  props =>\n        job_properties  += \"<b>\"+ props.key + \"</b>\" +\"=\" + props.value + \"<br></br>\"\n    )}\n\n   {$(\"#jobListeModal .modal-body\").html(job_properties)}\n   $(\"#jobListeModal\").modal();\n  }\n\n  setNotification = state => {\n    this.setState(prevState => ({\n      notification: state\n    }))\n  }\n\n  setJobDeails(job_name,props){\n    this.setState(prevState => ({\n      job_name: job_name,\n      run_job_props: props                    \n      }))\n  }\n\n  setErrorState(error,error_code) {\n    this.setState(prevState => ({\n      error: error,\n      error_code: error_code\n    }))\n  }\n\n  setJobErrorDeails(is_error,errors){\n    this.setState(prevState => ({\n      is_error: is_error,\n      errors: errors                    \n      }))\n  }\n\n  handleOnClick(job_name){    \n    this.props.history.push('/JobRuns/' + job_name)\n  }\n\n  createUI(){\n    return this.state.values.map((el, i) => \n        <div key={i}>\n        <div class=\"row\">\n          <div class=\"col-xs-4 col-sm-4 col-md-4\">\n            <div class=\"form-group\">\n               <input class=\"form-control\" value={this.state.keys[i]} type=\"text\" placeholder=\"Type Key\" onChange={this.setRunJobKeys.bind(this, i)} />\n            </div>\n          </div>  \n          <div class=\"col-xs-7 col-sm-7 col-md-7\">\n            <div class=\"form-group\">\n              <input class=\"form-control\" value={el||''} type=\"text\"  placeholder=\"Type Value\" onChange={this.setRunJobValues.bind(this, i)} />\n            </div>\n          </div> \n         <div class=\"col-xs-3\">\n             <input type='button' class=\"btn btn-danger\" value='-' onClick={this.removeProps.bind(this, i)}/>\n         </div>\n        </div> \n        </div>            \n    )\n  }\n\n\n  setRunJobValues(i, event) {\n    let values = [...this.state.values];\n    values[i] =  event.target.value;\n    this.setState({ values });\n  }\n\n  setRunJobKeys(i, event) {\n  let keys = [...this.state.keys];\n  keys[i] =  event.target.value;\n  this.setState({ keys });\n  }\n \n  addProps(){\n   this.setState(prevState => ({ values: [...prevState.values, '']}))\n  }\n \n  removeProps(i){\n\n    let values = [...this.state.values];\n    values.splice(i,1); \n    this.setState({ values });\n\n    let keys = [...this.state.keys];\n    keys.splice(i,1);\n    this.setState({ keys });\n  }\n\n  submitRunJob() {\n\n   var final_props = []\n   var i;\n   for (i = 0; i < this.state.keys.length; i++) {\n    var props = {[\"$key$\"] : this.state.keys[i],[\"$value$\"] : this.state.values[i]}\n    final_props[i] =  props\n   }\n\n  var props = ''\n\n  this.runEtlJob(this.state.job_name.replace(/^\"(.*)\"$/, '$1'),final_props).then(({run_job}) => {\n    this.setNotification(true)\n    var data =  JSON.parse(JSON.stringify(run_job))\n    if(data !== null){\n        props = JSON.stringify(data[\"props\"]) \n        var job_name = JSON.stringify(data[\"name\"]) \n        this.setJobDeails(job_name,props)\n   }})    \n  }\n\n  render(){  \n\n    var message = ''\n    var job_props = ''\n    var errors = ''\n    if(this.state.notification){\n      job_props = this.state.run_job_props\n      if(this.state.is_error) {\n          message = 'Error while submitting job!'\n          JSON.parse(JSON.stringify(this.state.errors)).map( (data) => {\n            errors = data.message\n          })\n       } else {\n          message = ' Job ' +  this.state.job_name.replace(/^\"(.*)\"$/, '$1') +  ' submitted successfully! '\n        }  \n    } \n\n    if (this.props.error !== ''){\n      return (\n        <div class=\"container\">\n         <ul class = \"pagination justify-content-center\">\n             <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                    this.props.get_etl_jobs()\n                }}>\n               Refresh\n             </button>\n         </ul>\n          <ErrorComponent error={this.props.error}/>\n        </div>\n      );\n     } \n    else{\n    return (\n          <div class=\"container-fluid\">\n          <div><Notification notification={this.state.notification} is_error={this.state.is_error}  errors = {errors}  message={message} job_props = {job_props} setNotification={this.setNotification}/></div>\n          <ul class = \"pagination justify-content-center\">\n             <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                      this.props.get_etl_jobs() \n                }} >\n               Refresh\n             </button>\n         </ul>\n          <table id=\"joblist\" class=\"table table-sm table-bordered\">\n            <thead class=\"thead-dark\">\n                  <tr>\n                    <th>Active/Inactive</th>\n                    <th>Job Name</th>\n                    <th>Schedule</th>\n                    <th>Next Schedule</th>\n                    <th>Schedule Remaining Time</th>\n                    <th>Job Last Run</th>\n                    <th>Job Last Time</th>\n                    <th>Action</th>\n                  </tr>\n                </thead>\n                  <tbody>\n                  {this.props.jobs.map( (data) => (\n                    <tr>\n                      <td>{(() => {\n                           if (this.state.is_active && data.is_active) {\n                             return (\n                               <div className = \"checkbox\">\n                                 <input type=\"checkbox\"\n                                     aria-describedby=\"UsernameHelp\"\n                                     data-toggle = \"toggle\"\n                                     defaultChecked\n                                     onClick={e => this.updateJobActiveState(data.name,false).then(({update_job_state}) => {\n                                      this.props.get_etl_jobs()\n                                      this.setState(prevState => ({  \n                                        is_active: false\n                                      }))\n                                    })}>\n                                 </input>\n                               </div>\n                             )\n                           } else {\n                            return (\n                              <div className = \"checkbox\">\n                                <input type=\"checkbox\"\n                                     aria-describedby=\"UsernameHelp\"\n                                     data-toggle = \"toggle\"\n                                     onClick={e => this.updateJobActiveState(data.name,true).then(({update_job_state}) => {\n                                      this.props.get_etl_jobs()\n                                      this.setState(prevState => ({  \n                                        is_active: true\n                                      }))\n                                    })}>\n                                 </input>\n                              </div>\n                            )\n                           }\n                         })()}\n                      </td>\n                        <td> <button type=\"button\" class=\"btn btn-link\" data-dismiss=\"modal\" onClick = {() => this.handleOnClick(data.name)}>{data.name}</button></td>\n                      <td>{data.schedule}</td>\n                      <td>{data.nextSchedule}</td>\n                      <td data-order={data.nextSchedule}>{data.schduleRemainingTime}</td>\n                      <td data-order={data.last_run_time}>\n                      {(() => {\n\n                           if (data.last_run_time === 0) {\n                             return (\n                               <div>\n                               </div>\n                             )\n                           } else {\n                             return (\n                               <div>  \n                                  {data.last_run_description}\n                               </div>\n                             )\n                           } \n                         })()}\n                      </td>\n                      <td>{data.last_run_time}</td>\n\n                      <td >\n                      <div class='row'>\n                      <div class='col-xs-12 button-wrapper' class=\"inner\">\n                          <button type=\"button\" class=\"btn btn-secondary ml-2\" data-toggle=\"modal\" onClick = {() => this.showModal(data.props)}>\n                            Properties\n                          </button>\n                          <div class=\"modal fade\" id=\"jobListeModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                            <div class=\"modal-dialog\" role=\"document\">\n                              <div class=\"modal-content\">     \n                                <div class=\"modal-header\">\n                                  <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                  <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                    <span aria-hidden=\"true\">&times;</span>\n                                  </button>\n                                </div>\n                                <div class=\"modal-body\">\n                                </div>\n                                <div class=\"modal-footer\">\n                                  <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n\n\n                          <div class=\"inner\">\n                             <button type=\"button\" class=\"btn btn-warning ml-2\" data-toggle=\"modal\" data-target=\"#exampleModal\" onClick = {() => \n                                      this.setState(prevState => ({\n                                          job_name: data.name\n                                  }))}>\n                                 Run\n                             </button>\n                             <div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                                <div class=\"modal-dialog\" role=\"document\">\n                                  <div class=\"modal-content\">\n                                    <div class=\"modal-header\">\n                                      <h5 class=\"modal-title\" id=\"exampleModalLabel\">Run Job</h5>\n                                      <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                        <span aria-hidden=\"true\">&times;</span>\n                                      </button>\n                                    </div>\n                                    <div class=\"modal-body\">\n                                       {this.createUI()}        \n                                      <input type='button' class=\"btn btn-primary ml-2\" value='Add Properties' onClick={this.addProps.bind(this)}/>\n                                      <input type=\"button\" class=\"btn btn-primary ml-2\" value=\"Submit\" onClick = {() => this.submitRunJob()}/>\n                                    </div>\n                                    <div class=\"modal-footer\">\n                                      <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                    </div>\n                                  </div>\n                                </div>\n                              </div>\n                           </div>\n                           </div>\n                           </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n            </table>\n      </div>     \n    );}\n  }\n}\n// export default JobList;\nexport default withRouter(JobList)","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery/dist/jquery.min.js';\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport $ from 'jquery';\nimport '../css/App.css'\nimport { withRouter } from 'react-router'\nimport ErrorComponent from '../components/ErrorComponent';\nimport Notification from '../components/NotificationComponent';\n\nimport LoaderComponent from '../components/LoaderComponent';\n\nclass JobRuns extends React.Component {\n  constructor(props){\n    super(props); \n    this.job_run_id = ''\n    this.filterOperation = [\"IN\",\"NOT IN\"]\n    this.state  = { \n      jobruns: [],\n      filter: '',\n      job_name: '',\n      retry_job_name: '',\n      filter_start_date: '',\n      filter_end_date: '',\n      paginationValue: 0,\n      loader:false,\n      errors: [],\n      is_error: false,\n      notification: false,\n      run_job_props: '',\n      error:'',\n      error_code:'',\n\n    }\n\n  }\n\n  async fetchEtlFlowJobs() {\n    const GRAPHQL_URL = this.props.GRAPHQL_URL\n    const token = localStorage.getItem('Authorization')\n\n    const limit = 10;\n    const offset = this.state.paginationValue;\n\n    var query = ` query { jobruns(limit: ${limit} , offset: ${offset}){ job_run_id job_name properties state start_time elapsed_time job_type is_master}}`\n    \n    if(this.props.match.params.job_name !== undefined){\n      query = ` query { jobruns(limit: ${limit} , offset: ${offset} ,filter: \"IN\", jobName: \\\"${this.props.match.params.job_name}\\\"  )\n              { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n\n      if (this.state.filter_end_date !== \"\") {\n        query = ` query { jobruns(limit: ${limit} , offset: ${offset},  startTime: \\\"${this.state.filter_start_date}\\\", endTime: \\\"${this.state.filter_end_date}\\\",filter: \"IN\", jobName: \\\"${this.props.match.params.job_name}\\\"  )\n        { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n      } \n\n      this.setState(prevState => ({\n        filter: 'IN',\n        job_name: this.props.match.params.job_name\n      }))\n\n    } else {\n      if (this.state.filter_end_date !== \"\" && this.state.filter !== \"\" ) {\n        query = ` query { jobruns(limit: ${limit} , offset: ${offset},  startTime: \\\"${this.state.filter_start_date}\\\", endTime: \\\"${this.state.filter_end_date}\\\",filter: \\\"${this.state.filter}\\\", jobName: \\\"${this.state.job_name}\\\"  )\n        { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n      } else if (this.state.filter_end_date !== \"\" ){\n        query = ` query { jobruns(limit: ${limit} , offset: ${offset},  startTime: \\\"${this.state.filter_start_date}\\\", endTime: \\\"${this.state.filter_end_date}\\\")\n        { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n      } else if (this.state.filter !== \"\" && this.state.job_name !== \"\") {\n        query = ` query { jobruns(limit: ${limit} , offset: ${offset}, filter: \\\"${this.state.filter}\\\", jobName: \\\"${this.state.job_name}\\\"  )\n        { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n      } else if (this.state.filter === \"\" && this.state.job_name !== \"\" ) {\n        query = ` query { jobruns(limit: ${limit} , offset: ${offset} ,filter: \"IN\", jobName: \\\"${this.state.job_name}\\\"  )\n        { job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n      } else {\n        query = ` query { jobruns(limit: ${limit} , offset: ${offset}){ job_run_id job_name  properties state start_time elapsed_time job_type is_master}}`\n      }\n    }\n\n    this.setState(prevState => ({\n      loader: true,\n      error: ''\n    }))\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: query\n        }\n      )  \n    })\n\n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n\n\n    if (!response.ok) {\n      var message = `An error has occured: ${response.status}`;\n      if (response.status === 403) {\n        \n        message = `net::ERR_ABORTED 403 (Forbidden). Please Logout ...`;\n        this.props.logout() \n        localStorage.removeItem(\"Authorization\")\n        throw  new Error(message);\n      } else { \n        throw  new Error(message);\n      }\n    } \n    else {  \n      this.setState(prevState => ({\n        loader: false\n      }))\n      const {data} = await response.json();\n      return data;  \n    } \n  }\n\n  async runEtlJob(job_name,props) {\n    const GRAPHQL_URL = this.props.GRAPHQL_URL\n    const token = localStorage.getItem('Authorization')\n\n    var query =  `\n      mutation {\n        run_job (name:\\\"${job_name}\\\"){\n          name\n          props {key value}\n      }\n      }\n    ` \n    if(props.length > 0) {\n      var props_updated = [JSON.stringify(props).replaceAll(\"\\\"$\",\"\").replaceAll(\"$\\\"\",\"\")]   \n      query =  `\n      mutation {\n        run_job (name:\\\"${job_name}\\\" ,props: ${props_updated}){\n          name\n          props {key value}\n      }\n      }\n    ` \n    }\n    this.setState(prevState => ({\n      loader: true\n    }))\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: query\n        }\n      )  \n    })\n\n    if (!response.ok) {\n      var message = `An error has occured: ${response.status}`;\n      if (response.status === 403) {\n        message = `net::ERR_ABORTED 403 (Forbidden). Please Logout ...`;\n        this.props.logout() \n        throw  new Error(message);\n      } else { \n        throw  new Error(message);\n      }\n    } else {  \n\n    this.setState(prevState => ({\n      loader: false\n    }))\n    const {data,errors} = await response.json();\n    if(JSON.parse(JSON.stringify(data.run_job)) !== null){\n      this.setJobErrorDeails(false)\n    }\n    else {\n      this.setJobErrorDeails(true,JSON.parse(JSON.stringify(errors)))\n    }\n    return data;  \n  }  \n  }\n\n  setJobErrorDeails(is_error,errors){\n    this.setState(prevState => ({\n      is_error: is_error,\n      errors: errors                    \n      }))\n  }\n\n  setInterval() {\n    this.timerID = setInterval(\n      () => this.fetchEtlFlowJobs(),\n      1000 * 1000\n    );\n  }\n \n  componentDidMount() {\n    this.setJobruns()\n  }\n\n  componentWillUnmount() {\n  clearInterval(this.timerID);\n  }\n\n  setJobruns(){\n  this.fetchEtlFlowJobs().then(({jobruns}) => {\n    this.setState(prevState => ({\n      jobruns: jobruns\n    }))\n   }).catch(error => {\n    this.setState(prevState => ({\n      error: error,\n      loader: false\n    }))})\n  }\n\n  setJobName() {\n  this.setState(prevState => ({\n    job_name: document.getElementById(\"exampleDataList\").value\n  }))\n  }\n\n  setFilterStartDate() {\n   this.setState(prevState => ({\n    filter_start_date: document.getElementById(\"start_date\").value\n   }))\n  }\n\n  setFilterEndDate() {\n   this.setState(prevState => ({\n    filter_end_date: document.getElementById(\"end_date\").value\n   }))\n  } \n\n  showModal(data)\n {\n   var props = ''\n   var data_jobruns = JSON.parse(data)\n\n   for(var key in data_jobruns) {\n   { \n       props  += \"<b>\"+ key + \"</b>\" +\"=\" + data_jobruns[key]+ \"<br></br>\"\n   }\n  {$(\"#jobRunModal .modal-body\").html(props)}\n  $(\"#jobRunModal\").modal();\n }\n  }\n\n  retryJobRun(job_name,data)\n  {\n   var final_props = []\n   var data_jobruns = JSON.parse(data)\n   var default_props=[\"job_send_slack_notification\", \"job_enable_db_logging\", \"job_notification_level\"];\n\n   var i = 0\n   var final_props = []\n   var i;\n   for(var key in data_jobruns) {\n     if(!default_props.includes(key)){\n        final_props[i] =  {[\"$key$\"] : key,[\"$value$\"] : data_jobruns[key]}\n        i++\n     }\n   }\n   var props = ''\n\n\n   this.runEtlJob(job_name,final_props).then(({run_job}) => {\n    this.setNotification(true)\n    var data =  JSON.parse(JSON.stringify(run_job))\n    if(data !== null){\n        props = JSON.stringify(data[\"props\"]) \n        var job_name = JSON.stringify(data[\"name\"]) \n        this.setJobDeails(job_name,props)\n   }});     \n  }\n\n  setJobDeails(job_name,props){\n  this.setState(prevState => ({\n    retry_job_name: job_name,\n    run_job_props: props                    \n    }))\n  }\n\n  setNotification = state => {\n    this.setState(prevState => ({\n      notification: state\n    }))\n  }\n\n  setInitialState(){\n  this.props.match.params.job_name = undefined\n  this.setState(prevState => ({  \n    filter: '',\n    job_name: '',\n    filter_start_date: '',\n    filter_end_date: '',\n    paginationValue: 0,\n  }), () => this.setJobruns())\n  }\n\n  showJobRunStateModal(data)\n {\n  {$(\"#jobRunStateModal .modal-body\").html(data)}\n  $(\"#jobRunStateModal\").modal();\n  }\n\n  handleOnClick(job_id){    \n  this.props.history.push('/JobRunDetails/' + job_id)\n  }\n\n  render(){\n   var button = ''\n   var filter_button_name = '' \n   var filter_button_job_name = '' \n   var filter_start_date = ''  \n   var filter_end_date = ''  \n   var filter_back_button = ''\n\n   var message = ''\n   var job_props = ''\n   var errors = ''\n   if(this.state.notification){\n     job_props = this.state.run_job_props\n     if(this.state.is_error) {\n         message = 'Error while submitting job!'\n         JSON.parse(JSON.stringify(this.state.errors)).map( (data) => {\n           errors = data.message\n         })\n      } else {\n         message = ' Job ' +  this.state.retry_job_name.replace(/^\"(.*)\"$/, '$1') +  ' submitted successfully! '\n       }  \n   } \n\n\n   //Code for adding pagination element\n  if (this.state.paginationValue === 0) {\n    button = <li class=\"page-item disabled\">\n    <input type=\"button\" value=\"Previous\" class=\"page-link btn btn-secondary btn-sm\"/></li>\n  } else {\n    button =  <li class=\"page-item\">\n    <input type=\"button\" value=\"Previous\" class=\"page-link btn btn-secondary btn-sm\" onClick = {() => {\n             this.setState(prevState => ({\n              paginationValue: this.state.paginationValue  -   10\n            }))\n            this.fetchEtlFlowJobs(this.state.paginationValue - 10).then(({jobruns}) => {\n              this.setState(prevState => ({\n                jobruns: jobruns\n              }))\n            }) \n    }}/></li>\n  } \n\n   //Code for adding button name\n  if (this.state.filter !== '') {\n    filter_button_name = this.state.filter\n  }else {\n    filter_button_name = \"Add Filter\"\n  } \n\n   //Code for adding button name\n  if (this.state.job_name !== '') {\n     filter_button_job_name = this.state.job_name\n  }else {\n     filter_button_job_name = \"Type to search\"\n  } \n\n  if (this.state.filter_start_date !== '') {\n   filter_start_date = this.state.filter_start_date\n  }else {\n    filter_start_date = \"Start Date\"\n  } \n\n  if (this.state.filter_end_date !== '') {\n    filter_end_date = this.state.filter_end_date\n  }else {\n    filter_end_date = \"End Date\"\n  } \n\n  if(this.props.match.params.job_name !== undefined){\n    filter_back_button= <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                          this.props.history.push('/')\n                         }} >\n                        Back\n                        </button>\n  }\n\n  if (this.state.error !== ''){\n    return (\n      <div class=\"container\">\n       <ul class = \"pagination justify-content-center\">\n           <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                  this.setJobruns()\n              }}>\n             Refresh\n           </button>\n       </ul>\n        <ErrorComponent error={this.state.error}/>\n      </div>\n    );\n   } else  if (this.state.loader){\n    return (\n      <div>\n        <LoaderComponent />\n      </div>\n    );\n   }\n   else{\n   return (\n     <div className=\"container-fluid\">\n       <div><Notification notification={this.state.notification} is_error={this.state.is_error}  errors = {this.state.errors}  message={message} job_props = {job_props} setNotification={this.setNotification}/></div>\n       <ul class = \"pagination justify-content-center\">\n         <div class=\"dropdown\">\n            <button class=\"btn btn-light dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n               {filter_button_name}\n            </button>\n            <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n              { this.filterOperation.map ( filter => (\n                   <a class=\"dropdown-item\">\n                      <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                           this.setState(prevState => ({\n                               filter: filter\n                       }))}}> {filter} </button>\n                   </a>\n              ))}\n            </div>\n         </div>\n         <div className =\"form-inline float-right\">\n             <div className=\"mb-1\">\n             <input type=\"text\"\n                        className=\"form-control input-sm\"\n                        list = \"datalistOptions\"\n                        id = \"exampleDataList\"\n                        placeholder = {filter_button_job_name}\n                        onChange={e => this.setJobName()}></input>      \n             </div>\n             <datalist id = \"datalistOptions\">\n               {this.props.jobs.map( data => (\n                 <option value = {data.name}></option>\n               ))}\n             </datalist> \n         </div>\n         <div class = \"form-inline float-right\">\n              <div class = \"mb-1\"> \n                  <input type=\"date\"\n                         className=\"form-control input-sm\"\n                         placeholder={filter_start_date}\n                         id = \"start_date\"\n                         onChange={e => this.setFilterStartDate()}\n                   ></input>\n              </div>\n              <div class = \"mb-1\"> \n                  <input type=\"date\"\n                         className=\"form-control input-sm\"\n                         placeholder={filter_end_date}\n                         id = \"end_date\"\n                         onChange={e => this.setFilterEndDate()}\n                   ></input> \n              </div>    \n         </div> \n         <button class= \"btn btn btn-sm\" type=\"button \" onClick= {() => {\n            this.setInitialState()\n            }}>\n            Clear\n         </button>\n         <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                this.setJobruns()\n             }} >\n            Refresh\n         </button>\n         {filter_back_button}\n       </ul>\n       <table id=\"jobruns\" class=\"table table-sm table-bordered\">\n           <thead class=\"thead-dark\">\n                 <tr>\n                   <th>Job Name</th>\n                   <th>Job Type</th>\n                   <th>Job Start Time</th>\n                   <th>Elapsed Time</th>\n                   <th>Job Status</th>\n                   <th>Actions</th>\n                 </tr>\n               </thead>\n                 <tbody>\n                 {this.state.jobruns.map( data => (\n                   <tr>\n                     <td> <button type=\"button\" class=\"btn btn-link\" data-dismiss=\"modal\" onClick = {() => this.handleOnClick(data.job_run_id)}>{data.job_name}</button></td>\n                     <td>{data.job_type}</td>\n                     <td>{data.start_time}</td>\n                     <td>{data.elapsed_time}</td>\n                     <td>\n                     {(() => {\n                           if (data.state === \"pass\" || data.state == \"\" ) {\n                             return (\n                               <div>\n                                 <p className = \"text-success\">{data.state}</p>\n                               </div>\n                             )\n                           } else if (data.state === \"started\" || data.state == \"running\" ) {\n                             return (\n                               <div>\n                                 <p className = \"text-warning\">{data.state}</p>\n                               </div>\n                             )\n                           } else {\n                            return (\n                              <div>\n                                 <button type=\"button\" class=\"btn btn-danger btn btn-sm\" data-toggle=\"modal\" onClick = {() => this.showJobRunStateModal(data.state)}>\n                                     Error\n                                 </button>\n                            \n                                 <div class=\"modal fade\" id=\"jobRunStateModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                                   <div class=\"modal-dialog\" role=\"document\">\n                                     <div class=\"modal-content\">\n                                       <div class=\"modal-header\">\n                                         <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                         <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                           <span aria-hidden=\"true\">&times;</span>\n                                         </button>\n                                       </div>\n                                       <div class=\"modal-body\">\n                                       </div>\n                                       <div class=\"modal-footer\">\n                                         <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                       </div>\n                                     </div>\n                                   </div>\n                                 </div>\n                              </div>\n                            )\n                           }\n                         })()}\n                     </td>\n                     <td>\n                     <div class='row'>\n                     <div class='col-xs-12 button-wrapper' class=\"inner\">\n                         <button type=\"button\" class=\"btn btn-secondary btn-sm ml-2\" data-toggle=\"modal\" onClick = {() => this.showModal(data.properties)}>\n                           Properties\n                         </button>\n                         \n                         <div class=\"modal fade\" id=\"jobRunModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                           <div class=\"modal-dialog\" role=\"document\">\n                             <div class=\"modal-content\">\n                               <div class=\"modal-header\">\n                                 <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                 <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                   <span aria-hidden=\"true\">&times;</span>\n                                 </button>\n                               </div>\n                               <div class=\"modal-body\">\n                               </div>\n                               <div class=\"modal-footer\">\n                                 <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                               </div>\n                             </div>\n                           </div>\n                         </div>\n\n                         {(() => {\n                           if (data.state === \"pass\" || data.state == \"\" || data.state == \"started\" ) {\n                             return (\n                               <div>\n                               </div>\n                             )\n                           } else {\n                             return (\n                               <div class=\"inner\">  \n                                  <button type=\"button\" class=\"btn btn-warning btn-sm ml-2\" data-toggle=\"modal\" onClick = {() => this.retryJobRun(data.job_name,data.properties)}>\n                                      Retry\n                                  </button>\n                               </div>\n                             )\n                           } \n                         })()}\n                        </div>\n                        </div> \n                     </td>\n                   </tr>\n                 ))}\n                 </tbody>\n            </table>  \n            <nav aria-label=\"Page navigation example\">\n               <ul class=\"pagination justify-content-center\">\n                 {button}\n                 <li class=\"page-item\"><input type=\"button\" value=\"Next\" class=\"page-link btn btn-secondary btn-sm\" onClick = {() => {\n                   this.setState(prevState => ({\n                     paginationValue: this.state.paginationValue  + 10\n                   }))\n                   this.fetchEtlFlowJobs(this.state.paginationValue + 10).then(({jobruns}) => {\n                    this.setState(prevState => ({  \n                      jobruns: jobruns\n                    }))\n                   })\n                   }}/></li>\n               </ul>\n         </nav>\n          </div>\n   );\n  }\n  }\n}\n\n// export default JobRuns; \nexport default withRouter(JobRuns)\n\n","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n  \nimport { withRouter } from 'react-router'\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport $ from 'jquery';\n\nclass JobLogsData extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { queueStats: [],\n      loader:false,\n      error:'',\n      error_code:'',\n\n    }\n  }\n\n  showModal(data)\n  {\n    var props = ''\n    var queue = JSON.parse(data)\n \n    for(var key in queue) {\n    { \n        props  += \"<b>\"+ key + \"</b>\" +\"=\" + queue[key]+ \"<br></br>\"\n    }\n\n   {$(\"#queueStats .modal-body\").html(props)}\n   $(\"#queueStats\").modal();\n  }\n  }\n\n  render(){\n    return(\n      <div class=\"container\">\n        <ul class = \"pagination justify-content-center\">\n             <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                    this.props.setEtlFlowQueueStats()\n                }}>\n               Refresh\n             </button>\n         </ul>\n          <table id=\"joblist\" class=\"table table-sm table-bordered\">\n            <thead class=\"thead-dark\">\n                  <tr>\n                    <th>Job Name</th>\n                    <th>Submitted From</th>\n                    <th>Execution Time</th>\n                    <th>Details</th>\n                  </tr>\n                </thead>\n                  <tbody>\n                  {this.props.queueStats.map( (data) => (\n                    <tr>\n                      <td>{data.name  }</td>\n                      <td>{data.submitted_from}</td>\n                      <td>{data.execution_time}</td>\n\n                      <td>\n                          <button type=\"button\" class=\"btn btn-secondary btn-sm\" data-toggle=\"modal\" onClick = {() => this.showModal(data.details)}>\n                            Stats\n                          </button>\n                          \n                          <div class=\"modal fade\" id=\"queueStats\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                            <div class=\"modal-dialog\" role=\"document\">\n                              <div class=\"modal-content\">\n                                <div class=\"modal-header\">\n                                  <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                  <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                    <span aria-hidden=\"true\">&times;</span>\n                                  </button>\n                                </div>\n                                <div class=\"modal-body\">\n                                </div>\n                                <div class=\"modal-footer\">\n                                  <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n            </table>\n      </div>     \n    );      \n  }\n}\nexport default JobLogsData;\n","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n  \n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport $ from 'jquery';\nimport LoaderComponent from '../components/LoaderComponent';\nimport ErrorComponent from '../components/ErrorComponent';\nimport JobLogsData from '../pages/JobLogs';\n\nclass JobLogs extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { queueStats: [],\n      loader:false,\n      error:'',\n      error_code:0,\n      errors: [],\n    }\n  }\n\n  async fetchEtlFlowQueueStats() {\n    const GRAPHQL_URL = this.props.GRAPHQL_URL\n    const token = localStorage.getItem('Authorization')\n\n    this.setState(prevState => ({\n      loader: true,\n      error: ''\n    }))\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          query {\n            queueStats {\n              name \n              details\n              submitted_from\n              execution_time\n              }\n           }\n          `\n        }\n      )  \n    })\n\n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n    \n    if (!response.ok) {\n      var message = `An error has occured: ${response.status}`;\n      if (response.status === 403) {\n        \n        message = `net::ERR_ABORTED 403 (Forbidden). Please Logout ...`;\n        this.props.logout() \n        localStorage.removeItem(\"Authorization\")\n        throw  new Error(message);\n      } else { \n        throw  new Error(message);\n      }\n    } \n    else {  \n      \n      this.setState(prevState => ({\n        loader: false\n      }))\n\n      const {data} = await response.json()\n      return data;   \n    } \n  }\n\n  \n  setJobErrorDeails(is_error,errors){\n    this.setState(prevState => ({\n      is_error: is_error,\n      errors: errors                    \n      }))\n  }\n\n  componentDidMount() {\n    //calling getInfo api\n    this.setEtlFlowQueueStats()\n  }\n\n  setEtlFlowQueueStats = () => {\n    this.fetchEtlFlowQueueStats().then(({queueStats}) => {\n      this.setState(prevState  => ({\n        queueStats: queueStats\n      }))\n    }).catch((error) => {\n      this.setState(prevState => ({\n        error: error,\n        loader: false,\n      }))\n  }); \n  }\n\n  showModal(data)\n  {\n    var props = ''\n    var queue = JSON.parse(data)\n \n    for(var key in queue) {\n    { \n        props  += \"<b>\"+ key + \"</b>\" +\"=\" + queue[key]+ \"<br></br>\"\n    }\n\n   {$(\"#queueStats .modal-body\").html(props)}\n   $(\"#queueStats\").modal();\n  }\n  }\n\n  render(){\n    if (this.state.error !== ''){\n      return (\n        <div class=\"container\">\n         <ul class = \"pagination justify-content-center\">\n             <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                    this.setEtlFlowQueueStats()\n                }}>\n               Refresh\n             </button>\n         </ul>\n          <ErrorComponent error={this.state.error}/>\n        </div>\n      );\n    } \n    else if (this.state.loader){\n      return (\n        <div>\n          <LoaderComponent job_run_id={this.job_run_id}  set_job_run_state = {this.set_job_run_state} />\n        </div>\n      );\n    }\n    else{ \n      return (\n        <div>\n          <JobLogsData queueStats = {this.state.queueStats} setEtlFlowQueueStats = {this.setEtlFlowQueueStats} />\n       </div>\n    ); \n    }         \n  }\n}\nexport default JobLogs;\n","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\nimport { withRouter } from 'react-router'\n\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport $ from 'jquery';\nimport LoaderComponent from '../components/LoaderComponent';\nimport ErrorComponent from '../components/ErrorComponent';\n\nclass JobRunDetails extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { \n      stepruns: [],\n      loader:false,\n      error:'',\n      error_code:'',\n\n\n    }\n    \n  }\n\n  async fetchEtlFlowJobById(job_run_id) {\n    const GRAPHQL_URL = this.props.GRAPHQL_URL\n    const token = localStorage.getItem('Authorization')\n\n    this.setState(prevState => ({\n      loader: true\n    }))\n\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          query {\n            stepruns(job_run_id:    \\\"${job_run_id}\\\"){\n                job_run_id\n                step_name\n                properties\n                state\n                start_time\n                elapsed_time\n                step_type\n                step_run_id\n             }\n           }\n          `\n        }\n      )  \n    })\n\n\n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n\n    if (!response.ok) {\n      var message = `An error has occured: ${response.status}`;\n      if (response.status === 403) {\n        \n        message = `net::ERR_ABORTED 403 (Forbidden). Please Logout ...`;\n        this.props.logout() \n        localStorage.removeItem(\"Authorization\")\n        throw  new Error(message);\n      } else { \n        throw  new Error(message);\n      }\n    } \n    else { \n\n      const {data} = await response.json();\n      this.setState(prevState => ({\n      loader: false\n    }))\n\n    return data;\n  }    \n  }\n\n  setInterval() {\n    this.timerID = setInterval(\n      () => this.fetchEtlFlowJobs(),\n      1000 * 1000\n    );\n  }\n \n  componentDidMount() {\n    this.setEtlFlowJobById(this.props.match.params.id)\n    // set Interval\n    this.setInterval();\n  }\n\n  setEtlFlowJobById(id) {\n    this.fetchEtlFlowJobById(id).then(({stepruns}) => {\n      this.setState(prevState => ({\n        stepruns: stepruns\n      }))\n    })\n  }\n\n  componentWillUnmount() {\n  clearInterval(this.timerID);\n  }\n \n  showModal(data)\n {\n   var props = ''\n   var data_jobruns = JSON.parse(data)\n\n   for(var key in data_jobruns) {\n   { \n       props  += \"<b>\"+ key + \"</b>\" +\"=\" + data_jobruns[key]+ \"<br></br>\"\n   }\n  {$(\"#stepRunModal .modal-body\").html(props)}\n  $(\"#stepRunModal\").modal();\n }\n  }\n\n  showStepRunStateModal(data)\n {\n  {$(\"#stepRunStateModal .modal-body\").html(data)}\n  $(\"#stepRunStateModal\").modal();\n  }\n\n  handleOnClick(job_id){    \n  this.props.history.push('/StepRunsById/' + job_id)\n  }\n\n  render(){\n   var step_run_id_flag = false\n   this.state.stepruns.map( item => {if(item.step_run_id !== \"\") step_run_id_flag = true})\n   var linked_jobs = ''\n   if(step_run_id_flag) {\n    linked_jobs = <th>Linked Job</th>\n   } else {\n    linked_jobs = \"\"\n   }\n\n   var remoteStep = [\"EtlFlowJobStep\",\"DPSparkJobStep\",\"ParallelETLStep\"];\n   if (this.state.error !== ''){\n    return (\n      <div>\n        <ErrorComponent error={this.state.error}/>\n      </div>\n    );\n   } else if (this.state.loader){\n    return (\n      <div>\n        <LoaderComponent job_run_id={this.job_run_id}  set_job_run_state = {this.set_job_run_state} />\n      </div>\n    );\n   }\n   else{\n   return (\n     <div className=\"container-fluid\">\n         <table id=\"job runs\" class=\"table table-sm table-bordered\">\n           <thead class=\"thead-dark\">\n                 <tr>\n                   <th>Job Run Id</th>\n                   <th>Step Type</th>\n                   <th>Step Name</th>\n                   <th>Start Time</th>\n                   <th>Elapsed Time</th>\n                   <th>Status</th>\n                   <th>Properties</th> \n                   {linked_jobs}\n                   <th>\n                        <button className=\"btn btn-secondary btn-block\" onClick = {() => {\n                          this.props.history.push('/JobRuns')\n                         }} >Back</button>\n                   </th>\n                 </tr>\n               </thead>\n                 <tbody>\n                 {this.state.stepruns.map( data => (\n                   <tr>\n                     <td>{data.job_run_id}</td>\n                     <td>{data.step_type}</td>\n                     <td>{data.step_name}</td>\n                     <td>{data.start_time}</td>\n                     <td>{data.elapsed_time}</td>\n                     <td>\n                     {(() => {\n                           if (data.state === \"pass\" || data.state == \"\" ) {\n                             return (\n                               <div>\n                                 <p className = \"text-success\">{data.state}</p>\n                               </div>\n                             )\n                           } else if (data.state === \"started\" || data.state == \"running\" ) {\n                             return (\n                               <div>\n                                 <p className = \"text-warning\">{data.state}</p>\n                               </div>\n                             )\n                           } else {\n                            return (\n                              <div>\n                                 <button type=\"button\" class=\"btn btn-danger btn btn-sm\" data-toggle=\"modal\" onClick = {() => this.showStepRunStateModal(data.state)}>\n                                     Error\n                                 </button>\n                            \n                                 <div class=\"modal fade\" id=\"stepRunStateModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                                   <div class=\"modal-dialog\" role=\"document\">\n                                     <div class=\"modal-content\">\n                                       <div class=\"modal-header\">\n                                         <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                         <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                           <span aria-hidden=\"true\">&times;</span>\n                                         </button>\n                                       </div>\n                                       <div class=\"modal-body\">\n                                       </div>\n                                       <div class=\"modal-footer\">\n                                         <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                       </div>\n                                     </div>\n                                   </div>\n                                 </div>\n                              </div>\n                            )\n                           }\n                         })()}\n                     </td>\n                     <td>\n                          <button type=\"button\" class=\"btn btn-secondary btn-sm\" data-toggle=\"modal\" onClick = {() => this.showModal(data.properties)}>\n                            Properties\n                          </button>\n                          \n                          <div class=\"modal fade\" id=\"stepRunModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                            <div class=\"modal-dialog\" role=\"document\">\n                              <div class=\"modal-content\">\n                                <div class=\"modal-header\">\n                                  <h5 class=\"modal-title\" id=\"exampleModalLabel\">Step Properties</h5>\n                                  <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                    <span aria-hidden=\"true\">&times;</span>\n                                  </button>\n                                </div>\n                                <div class=\"modal-body\">\n                                </div>\n                                <div class=\"modal-footer\">\n                                  <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                      </td>\n                     <td>\n                         {(() => {\n                            if (remoteStep.includes(data.step_type)) {\n                              return (\n                                <input type=\"button\" value=\"Check Progress\" class=\"btn btn-secondary btn-sm\" onClick = {() => this.setEtlFlowJobById(data.step_run_id)}/>\n                              )\n                            } else {\n                              return (\n                                <div></div>\n                              )\n                            }\n                          })()}\n                    </td>\n                   </tr>\n                 ))}\n                 </tbody>\n            </table>\n          </div>\n    );\n    }\n  }\n}\nexport default withRouter(JobRunDetails)\n","import React from 'react';\n\nimport jwt_decode from \"jwt-decode\";\nimport CurrentTime from './CurrentTime';\nimport Stats from '../cards/Stats';\nimport Credentials from '../cards/Credential';\nimport JobList from '../cards/JobList';\nimport JobRuns from '../cards/JobRuns';\nimport JobLogs from '../cards/JobLogs';\nimport ErrorComponent from '../components/ErrorComponent';\n\nimport '../css/App.css'\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport JobRunDetails from '../pages/JobRunDetails';\n\n\nclass Routes extends React.Component {\n\n  constructor(props){\n    super(props); \n    this.state  = {\n      jobs: [],\n      metrics: [],\n      user: '',\n      loader:false,\n      error:'',\n      error_code:''\n    }\n  }\n\n  async fetchEtlFlowJobs() {\n    const GRAPHQL_URL = this.props.GRAPHQL_URL\n    const token = localStorage.getItem('Authorization')\n\n    this.setState(prevState => ({\n      loader: true,\n      error:''\n    }))\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          query {\n              jobs {\n                name \n                schedule\n                props {key value} \n                nextSchedule \n                schduleRemainingTime \n                is_active \n                last_run_time\n                last_run_description\n             }\n           }\n          `\n        }\n      )   \n    })\n\n    if (response.status === 403) {\n      localStorage.removeItem(\"Authorization\")\n    } \n    \n    if (!response.ok) {\n      var message = `An error has occured: ${response.status}`;\n      if (response.status === 403) {\n        message = `net::ERR_ABORTED 403 (Forbidden). Please Logout ...`;\n        this.props.doLogout() \n        localStorage.removeItem(\"Authorization\")\n        throw  new Error(message);\n      } else { \n        throw  new Error(message);\n      }\n    } \n    else {  \n      const {data} = await response.json();\n      this.setState(prevState => ({\n      loader: false\n     }))\n\n    return data;    \n    }\n  }\n\n  setInterval() {\n    this.timerID = setInterval(\n      () => this.get_etl_jobs(),\n      1000 * 1000\n    );\n  }\n\n  fetchEtlFlowUserDetails() {\n    const token = localStorage.getItem('Authorization')\n    var decoded = JSON.parse(JSON.stringify(jwt_decode(token)));\n    this.setState({\n      user: decoded[\"user\"]\n    })\n  }\n\n  componentDidMount() {\n\n    //calling jobs api\n    this.get_etl_jobs()\n    this.fetchEtlFlowUserDetails()\n }\n\n  get_etl_jobs = () => {\n   this.fetchEtlFlowJobs().then(({jobs}) => {\n     this.setState(prevState => ({\n       jobs: jobs\n     }))\n   }).catch(error => {\n     this.setState(prevState => ({\n       error: error,\n       loader: false\n     }))\n    });\n  }\n\n  remove_token() {\n   localStorage.removeItem(\"Authorization\")\n   this.props.doLogout(\"\")\n}\n\n  render(){\n    return (\n       <Router>\n          <nav className = \"navbar navbar-expand-lg navbar-dark bg-dark mb-3\">\n              <ul className = \"nav navbar-nav w-100\">\n                <li className = \"nav-item nav-link\" ><Link to=\"/\">Jobs</Link> </li>\n                <li className = \"nav-item nav-link\" ><Link to=\"/JobRuns\">Job Runs</Link> </li>\n                <li className = \"nav-item nav-link\" ><Link to=\"/JobLogs\">Job Logs</Link> </li>\n                <li className = \"nav-item nav-link\" ><Link to=\"/Stats\">Stats</Link> </li>\n                <li className = \"nav-item nav-link\" ><Link to=\"/Credentials\">Credentials</Link> </li>\n              </ul>\n              <div class=\"navbar-collapse collapse w-100 order-3 dual-collapse2\">\n              <ul class=\"nav justify-content-end w-100\">\n              <CurrentTime GRAPHQL_URL = {this.props.GRAPHQL_URL}/>\n                <li class=\"nav-item dropdown\">\n\t                <a class=\"nav-link  dropdown-toggle\" href=\"#\" data-toggle=\"dropdown\">{this.state.user}</a>\n\t                  <ul class=\"dropdown-menu\">\n\t\t                  <li>\n                        <a class=\"dropdown-item\" href=\"https://github.com/tharwaninitin/etlflow\">\n                           Git Hub \n                        </a>\n                      </li>\n                      <li>\n                        <a class=\"dropdown-item\" href=\"https://tharwaninitin.github.io/etlflow/site/\">\n                          Docs\n                        </a>\n                      </li>\n                      <li>\n                        <a class=\"dropdown-item\">\n                          <input type=\"button\" class=\"btn btn-secondary btn-sm\" value=\"LogOut\" onClick = {() => this.remove_token()}></input>\n                        </a>\n                      </li>\n\t                  </ul>\n\t              </li>\n              </ul>\n            </div>\n          </nav>\n          <Switch>\n              <Route exact path=\"/\" component={() => (<JobList GRAPHQL_URL = {this.props.GRAPHQL_URL} jobs={this.state.jobs} logout={this.props.doLogout} get_etl_jobs = {this.get_etl_jobs} error = {this.state.error}/>)}/>\n              <Route path=\"/JobRuns/:job_name?\" render={props => (<JobRuns GRAPHQL_URL = {this.props.GRAPHQL_URL} logout={this.props.doLogout} jobs={this.state.jobs}/>)}/>\n              <Route path=\"/JobLogs\" render={props => (<JobLogs GRAPHQL_URL = {this.props.GRAPHQL_URL} logout={this.props.doLogout}/>)}/>\n              <Route path=\"/Stats\" render={props => (<Stats GRAPHQL_URL = {this.props.GRAPHQL_URL} logout={this.props.doLogout}/>)}/>\n              <Route path=\"/Credentials\" render={props => ( <Credentials GRAPHQL_URL = {this.props.GRAPHQL_URL} logout={this.props.doLogout} />)}/>\n              <Route path=\"/JobRunDetails/:id\" render={props => ( <JobRunDetails GRAPHQL_URL = {this.props.GRAPHQL_URL}/>)}/>\n          </Switch>\n       </Router>\n    );\n    }\n}\nexport default Routes;\n// export default withRouter(Routes)\n\n","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery/dist/jquery.min.js';\nimport jwt_decode from \"jwt-decode\";\n\n\nclass Login extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = {\n         user_name: '',\n         password: '',\n         token: '', \n         login: [],\n\n        }\n\n    this.login_validation = this.login_validation.bind(this);\n    this.set_login_user_name = this.set_login_user_name.bind(this);\n    this.set_login_password = this.set_login_password.bind(this);\n  }\n\n  async fetchLoginDetails(user_name,password) {\n    const GRAPHQL_URL = this.props.GRAPHQL_LOGIN_URL\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          mutation {\n            login (user_name: \\\"${user_name}\\\", password: \\\"${password}\\\") {\n                message \n                token\n             }\n           }\n          `\n         }\n      )  \n    })  \n    const {data} = await response.json();\n    return data;        \n  }\n\n login_validation() {\n    this.fetchLoginDetails(this.state.user_name,this.state.password).then(({login}) => {\n        var token_value = JSON.parse(JSON.stringify(login)).token\n        if(token_value !== \"\")\n        {\n            localStorage.setItem('Authorization', token_value);   \n            this.props.doLogin(token_value)\n            this.setState(prevState => ({\n                token: token_value\n              }))\n        }\n        else \n        {\n            alert(\"Invalid User\")\n        }\n    })   \n  } \n\n  set_login_user_name() {\n    this.setState(prevState => ({\n        user_name: document.getElementById(\"user_name\").value\n      }))\n  }\n\n  set_login_password() {\n    this.setState(prevState => ({\n        password: document.getElementById(\"password\").value\n      }))\n  }\n\n  render(){\n    return (\n    <div className=\"main\" align=\"center\">\n         <nav className = \"navbar navbar-expand-lg navbar-dark bg-dark mb-3\">\n             <ul className = \"nav navbar-nav w-50\">\n                 <li className = \"nav-item nav-link\">EtlFlow</li>\n             </ul>\n         </nav>   \n           <div className=\"col-md-3\">\n            <div className=\"login-form \">\n                <form id=\"form_login\" className = \"text-center border border-dark p-5\" onSubmit={(e) => {this.login_validation(); e.preventDefault();}  }>\n                    <p className = \"h4 mb-4\">EtlFlow Login</p>\n                    <div className=\"form-group\">\n                        <input type=\"text\"\n                         className=\"form-control\" \n                         aria-describedby=\"UsernameHelp\"\n                         placeholder=\"Username\"\n                         id=\"user_name\"\n                         onChange={e => this.set_login_user_name()}></input>\n                    </div>\n                    <div className=\"form-group\">\n                        <input\n                         type=\"password\"\n                         className=\"form-control\"\n                         aria-describedby=\"PasswordHelp\"\n                         placeholder=\"Password\"\n                         id=\"password\"\n                         onChange={e => this.set_login_password()}></input>\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-secondary btn-block\">Submit</button>\n                </form>   \n            </div>\n        </div>\n    </div>\n    );\n  }\n}\nexport default Login;","import React from 'react';\n//Bootstrap and jQuery libraries\nimport Routes from './components/Routes';\nimport LoginComponent from './components/Login';\n\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props);\n\n    this.state = {\n      token: '',\n    }\n\n  //  this.GRAPHQL_URL = 'https://devetlflow.startv.com/api/etlflow'\n  //  this.GRAPHQL_LOGIN_URL = 'https://devetlflow.startv.com/api/login'\n\n   this.GRAPHQL_URL = '/api/etlflow'\n   this.GRAPHQL_LOGIN_URL = 'api/login' \n   \n   this.doLogin = this.doLogin.bind(this)\n   this.doLogout = this.doLogout.bind(this)\n\n  }\n\n  doLogin(args_token,args_user) {\n    this.setState({\n      token: args_token\n    })\n  }\n\n\n  doLogout(args_token) {\n    this.setState({\n      token: ''\n    })\n  }\n\n\n  render(){\n    if(localStorage.getItem(\"Authorization\") === null){\n      return (  \n          <div>\n            <LoginComponent  GRAPHQL_LOGIN_URL = {this.GRAPHQL_LOGIN_URL} doLogin = {this.doLogin}/>  \n          </div>\n      );\n    } else {\n      return (  \n        <div>\n          <Routes  GRAPHQL_URL = {this.GRAPHQL_URL} doLogout = {this.doLogin}/>  \n        </div>\n     );\n    }\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}