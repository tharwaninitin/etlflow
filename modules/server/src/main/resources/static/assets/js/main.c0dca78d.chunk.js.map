{"version":3,"sources":["components/JobList.js","components/StepRuns.js","components/JobRuns.js","components/Metrics.js","components/Routes.js","components/Login.js","App.js","index.js"],"names":["JobList","props","state","jobs","$","DataTable","data","job_properties","map","key","value","html","modal","class","id","this","name","schedule","nextSchedule","schduleRemainingTime","is_active","job_deploy_mode","type","data-toggle","onClick","show_modal","role","aria-labelledby","aria-hidden","data-dismiss","aria-label","msg","React","Component","StepRuns","stepruns","job_run_id","a","console","log","fetch","method","headers","body","JSON","stringify","query","response","json","timerID","setInterval","fetchEtlFlowJobs","fetchEtlFlowJobById","then","setState","prevState","clearInterval","data_jobruns","parse","step_run_id_flag","item","step_run_id","linked_jobs","remoteStep","className","setJobRunState","step_type","step_name","start_time","elapsed_time","properties","tabindex","includes","JobRuns","resetForm","jobruns","filter","job_name","filter_start_date","filter_end_date","paginationValue","stepRun","filterOperation","baseState","set_job_run_state","bind","token","localStorage","getItem","limit","offset","document","getElementById","button","filter_button_name","aria-haspopup","aria-expanded","list","placeholder","onChange","e","set_job_name","set_filter_start_date","set_filter_end_date","window","location","reload","job_type","show_job_run_stat_modal","Metrics","metrics","fetchEtlFlowMetrics","active_jobs","active_subscribers","etl_jobs","cron_jobs","used_memory","free_memory","total_memory","max_memory","build_time","Routes","removeItem","doLogout","to","href","remove_token","exact","path","component","Login","user_name","password","login","login_validation","set_login_user_name","set_login_password","fetchLoginDetails","token_value","setItem","doLogin","alert","align","onSubmit","preventDefault","aria-describedby","App","args_token","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c0dca78d.chunk.js","sourcesContent":["import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n\n\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport $ from 'jquery';\n\nclass JobList extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { jobs: [] }\n  }\n\n  componentDidMount() {\n    $('#joblist').DataTable();\n  }\n\n show_modal(data)\n  {\n    var job_properties = \"\"\n    { \n      data.map(  props =>\n        job_properties  += \"<b>\"+ props.key + \"</b>\" +\"=\" + props.value + \"<br></br>\"\n    )}\n\n   {$(\"#jobListeModal .modal-body\").html(job_properties)}\n   $(\"#jobListeModal\").modal();\n  }\n\n  render(){\n    return (\n      <div class=\"container-fluid\">\n          <table id=\"joblist\" class=\"table table-sm table-bordered\">\n            <thead class=\"thead-dark\">\n                  <tr>\n                    <th>Job Name</th>\n                    <th>Schedule</th>\n                    <th>Next Schedule</th>\n                    <th>Schdule Remaining Time</th>\n                    <th>Is Active</th>\n                    <th>Job Deploy Mode</th>\n                    <th>Properties</th>\n                    <th>Action</th>\n                  </tr>\n                </thead>\n                  <tbody>\n                  {this.props.jobs.map( (data) => (\n                    <tr>\n                      <td>{data.name}</td>\n                      <td>{data.schedule}</td>\n                      <td>{data.nextSchedule}</td>\n                      <td>{data.schduleRemainingTime}</td>\n                      <td>{data.is_active}</td>\n                      <td>{data.job_deploy_mode}</td>\n                      <td>\n                          <button type=\"button\" class=\"btn btn-secondary btn-sm\" data-toggle=\"modal\" onClick = {() => this.show_modal(data.props)}>\n                            Properties\n                          </button>\n                          \n                          <div class=\"modal fade\" id=\"jobListeModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                            <div class=\"modal-dialog\" role=\"document\">\n                              <div class=\"modal-content\">\n                                <div class=\"modal-header\">\n                                  <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                  <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                    <span aria-hidden=\"true\">&times;</span>\n                                  </button>\n                                </div>\n                                <div class=\"modal-body\">\n                                </div>\n                                <div class=\"modal-footer\">\n                                  <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                      </td>\n                      <td><input type=\"button\" value=\"Run\" class=\"btn btn-secondary btn-sm\" onClick = {() => this.msg(data.name)}/></td>\n                    </tr>\n                  ))}\n                </tbody>\n            </table>\n      </div>     \n    );\n  }\n}\nexport default JobList;\n","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport $ from 'jquery';\n\nclass StepRuns extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { \n      stepruns: []\n    }\n    \n  }\n\n  async fetchEtlFlowJobById(job_run_id) {\n    const GRAPHQL_URL = 'https://etlflow.startv.com/api/etlflow'\n    console.log(\"job_run_id :\" + job_run_id )\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjogIm1pbnRfYWRtaW4iLCJyb2xlIjoiYWRtaW4ifQ.eP4C2dvhO6Ng4pSxTgRqDo4r-X0JiQLCOYMu3zkLmSE',\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          query {\n            stepruns(job_run_id:    \\\"${job_run_id}\\\"){\n                job_run_id\n                step_name\n                properties\n                state\n                start_time\n                elapsed_time\n                step_type\n                step_run_id\n             }\n           }\n          `\n        }\n      )  \n    })\n    const {data} = await response.json();\n    return data;    \n  }\n\n  setInterval() {\n    this.timerID = setInterval(\n      () => this.fetchEtlFlowJobs(),\n      1000 * 1000\n    );\n  }\n \n  componentDidMount() {\n    this.fetchEtlFlowJobById(this.props.job_run_id).then(({stepruns}) => {\n      console.log(stepruns)\n      this.setState(prevState => ({\n        stepruns: stepruns\n      }))\n    })\n    // set Interval\n    this.setInterval();\n }\n\n componentWillUnmount() {\n  clearInterval(this.timerID);\n }\n \n show_modal(data)\n {\n   var props = ''\n   var data_jobruns = JSON.parse(data)\n   console.log(\"data_jobruns :\" + data_jobruns  )\n\n   for(var key in data_jobruns) {\n   { \n       props  += \"<b>\"+ key + \"</b>\" +\"=\" + data_jobruns[key]+ \"<br></br>\"\n       console.log(\"result is :\" + key + \" value: \" + data_jobruns[key])\n   }\n  {$(\"#stepRunModal .modal-body\").html(props)}\n  $(\"#stepRunModal\").modal();\n }\n}\n\nshow_step_run_stat_modal(data)\n {\n  console.log(\"data state  :\" + data  )\n\n  {$(\"#stepRunStateModal .modal-body\").html(data)}\n  $(\"#stepRunStateModal\").modal();\n }\n\n\n\n render(){\n   var step_run_id_flag = false\n   this.state.stepruns.map( item => {if(item.step_run_id !== \"\") step_run_id_flag = true})\n   var linked_jobs = ''\n   if(step_run_id_flag) {\n    linked_jobs = <th>Linked Job</th>\n   } else {\n    linked_jobs = \"\"\n   }\n\n   var remoteStep = [\"EtlFlowJobStep\",\"DPSparkJobStep\"];\n   return (\n     <div className=\"container-fluid\">\n         <table id=\"job runs\" class=\"table table-sm table-bordered\">\n           <thead class=\"thead-dark\">\n                 <tr>\n                   <th>Job Run Id</th>\n                   <th>Step Type</th>\n                   <th>Step Name</th>\n                   <th>Start Time</th>\n                   <th>Elapsed Time</th>\n                   <th>Status</th>\n                   <th>Properties</th> \n                   {linked_jobs}\n                   <th>\n                        <button className=\"btn btn-secondary btn-block\" onClick = {() => this.props.setJobRunState()}>Back</button>\n                   </th>\n                 </tr>\n               </thead>\n                 <tbody>\n                 {this.state.stepruns.map( data => (\n                   <tr>\n                     <td>{data.job_run_id}</td>\n                     <td>{data.step_type}</td>\n                     <td>{data.step_name}</td>\n                     <td>{data.start_time}</td>\n                     <td>{data.elapsed_time}</td>\n                     <td>\n                     {(() => {\n                           if (data.state === \"pass\" || data.state == \"\" ) {\n                             return (\n                               <div>\n                                 <p className = \"text-success\">{data.state}</p>\n                               </div>\n                             )\n                           } else if (data.state === \"started\" || data.state == \"running\" ) {\n                             return (\n                               <div>\n                                 <p className = \"text-warning\">{data.state}</p>\n                               </div>\n                             )\n                           } else {\n                              <div>\n                                  <button type=\"button\" class=\"btn btn-secondary btn-sm\" data-toggle=\"modal\" onClick = {() => alert(\"jghg\")}>\n                                   Error\n                                  </button>\n                        \n                                  <div class=\"modal fade\" id=\"stepRunStateModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                                   <div class=\"modal-dialog\" role=\"document\">\n                                     <div class=\"modal-content\">\n                                       <div class=\"modal-header\">\n                                         <h5 class=\"modal-title\" id=\"exampleModalLabel\">Status</h5>\n                                         <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                           <span aria-hidden=\"true\">&times;</span>\n                                         </button>\n                                       </div>\n                                       <div class=\"modal-body\">\n                                       </div>\n                                       <div class=\"modal-footer\">\n                                         <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                       </div>\n                                     </div>\n                                   </div>\n                                  </div>\n                              </div>\n                           }\n                         })()}\n                     </td>\n                     <td>\n                          <button type=\"button\" class=\"btn btn-secondary btn-sm\" data-toggle=\"modal\" onClick = {() => this.show_modal(data.properties)}>\n                            Properties\n                          </button>\n                          \n                          <div class=\"modal fade\" id=\"stepRunModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                            <div class=\"modal-dialog\" role=\"document\">\n                              <div class=\"modal-content\">\n                                <div class=\"modal-header\">\n                                  <h5 class=\"modal-title\" id=\"exampleModalLabel\">Step Properties</h5>\n                                  <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                    <span aria-hidden=\"true\">&times;</span>\n                                  </button>\n                                </div>\n                                <div class=\"modal-body\">\n                                </div>\n                                <div class=\"modal-footer\">\n                                  <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                      </td>\n                     <td>\n                         {(() => {\n                            if (remoteStep.includes(data.step_type)) {\n                              return (\n                                <input type=\"button\" value=\"Check Progress\" class=\"btn btn-secondary btn-sm\" onClick = {() => this.fetchEtlFlowJobById(data.step_run_id).then(({stepruns}) => {\n                                    console.log(stepruns)\n                                    this.setState(prevState => ({\n                                      stepruns: stepruns\n                                    }))\n                                  })}/>\n                              )\n                            } else {\n                              return (\n                                <div></div>\n                              )\n                            }\n                          })()}\n                    </td>\n                   </tr>\n                 ))}\n                 </tbody>\n            </table>\n          </div>\n    );\n  }\n}\nexport default StepRuns;     ","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery/dist/jquery.min.js';\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport StepRuns from './StepRuns';\nimport $ from 'jquery';\n\nclass JobRuns extends React.Component {\n  constructor(props){\n    super(props); \n    this.job_run_id = ''\n    this.filterOperation = [\"IN\",\"NOT IN\"]\n    this.state  = { \n      jobruns: [],\n      filter: '',\n      job_name: '',\n      filter_start_date: '',\n      filter_end_date: '',\n      paginationValue: 0,\n      stepRun: false\n    }\n    this.baseState = this.state \n    this.set_job_run_state = this.set_job_run_state.bind(this);    \n  }\n\n  resetForm = () => {\n    this.setState({jobruns: this.state.jobruns,\n      filter: '',\n      job_name: '',\n      filter_start_date: '',\n      filter_end_date: '',\n      paginationValue: 0,\n      stepRun: false})\n  }\n\n\n  async fetchEtlFlowJobs() {\n    const GRAPHQL_URL = 'https://devetlflow.startv.com/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    console.log(\"paginationValue :\" + this.state.paginationValue)\n    const limit = 10;\n    const offset = this.state.paginationValue;\n\n    var query = ` query { jobruns(limit: ${limit} , offset: ${offset}){ job_run_id job_name description properties state start_time elapsed_time job_type is_master}}`\n    \n    if (this.state.filter_end_date !== \"\" && this.state.filter !== \"\" ) {\n      query = ` query { jobruns(limit: ${limit} , offset: ${offset},  startTime: \\\"${this.state.filter_start_date}\\\", endTime: \\\"${this.state.filter_end_date}\\\",filter: \\\"${this.state.filter}\\\", jobName: \\\"${this.state.job_name}\\\"  )\n      { job_run_id job_name description properties state start_time elapsed_time job_type is_master}}`\n    } else if (this.state.filter_end_date !== \"\" ){\n      query = ` query { jobruns(limit: ${limit} , offset: ${offset},  startTime: \\\"${this.state.filter_start_date}\\\", endTime: \\\"${this.state.filter_end_date}\\\")\n      { job_run_id job_name description properties state start_time elapsed_time job_type is_master}}`\n    } else if (this.state.filter !== \"\") {\n      query = ` query { jobruns(limit: ${limit} , offset: ${offset}, filter: \\\"${this.state.filter}\\\", jobName: \\\"${this.state.job_name}\\\"  )\n      { job_run_id job_name description properties state start_time elapsed_time job_type is_master}}`\n    } else if (this.state.filter === \"\" && this.state.job_name !== \"\") {\n      query = ` query { jobruns(limit: ${limit} , offset: ${offset} ,filter: \"IN\", jobName: \\\"${this.state.job_name}\\\"  )\n      { job_run_id job_name description properties state start_time elapsed_time job_type is_master}}`\n    } else {\n      query = ` query { jobruns(limit: ${limit} , offset: ${offset}){ job_run_id job_name description properties state start_time elapsed_time job_type is_master}}`\n    }\n    \n    console.log(\"Query is :\" + query)\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: query\n        }\n      )  \n    })\n    const {data} = await response.json();\n    return data;   \n  }\n\n  setInterval() {\n    this.timerID = setInterval(\n      () => this.fetchEtlFlowJobs(),\n      1000 * 1000\n    );\n  }\n \n  componentDidMount() {\n    this.fetchEtlFlowJobs().then(({jobruns}) => {\n      console.log(jobruns)\n      this.setState(prevState => ({\n        jobruns: jobruns\n      }))\n    })\n\n\n    // set Interval\n    this.setInterval();\n }\n\n componentWillUnmount() {\n  clearInterval(this.timerID);\n }\n\n set_job_run_state() {\n  this.setState(state => ({\n    stepRun: !state.stepRun\n  }))\n }\n \n\n set_job_name() {\n  this.setState(prevState => ({\n    job_name: document.getElementById(\"exampleDataList\").value\n  }))\n }\n\n set_filter_start_date() {\n  this.setState(prevState => ({\n    filter_start_date: document.getElementById(\"start_date\").value\n  }))\n }\n\n set_filter_end_date() {\n  this.setState(prevState => ({\n    filter_end_date: document.getElementById(\"end_date\").value\n  }))\n }\n\n\n show_modal(data)\n {\n   var props = ''\n   var data_jobruns = JSON.parse(data)\n   console.log(\"data_jobruns :\" + data_jobruns  )\n\n   for(var key in data_jobruns) {\n   { \n       props  += \"<b>\"+ key + \"</b>\" +\"=\" + data_jobruns[key]+ \"<br></br>\"\n       console.log(\"result is :\" + key + \" value: \" + data_jobruns[key])\n   }\n  {$(\"#jobRunModal .modal-body\").html(props)}\n  $(\"#jobRunModal\").modal();\n }\n}\n\n show_job_run_stat_modal(data)\n {\n  {$(\"#jobRunStateModal .modal-body\").html(data)}\n  $(\"#jobRunStateModal\").modal();\n }\n\n render(){\n   \n   var button = ''\n   var filter_button_name = '' \n\n   //Code for adding pagination element\n   if (this.state.paginationValue === 0) {\n     button = <li class=\"page-item disabled\">\n     <input type=\"button\" value=\"Previous\" class=\"page-link btn btn-secondary btn-sm\"/></li>\n   } else {\n     button =  <li class=\"page-item\">\n     <input type=\"button\" value=\"Previous\" class=\"page-link btn btn-secondary btn-sm\" onClick = {() => {\n              this.setState(prevState => ({\n               paginationValue: this.state.paginationValue  -   10\n             }))\n             this.fetchEtlFlowJobs(this.state.paginationValue - 10).then(({jobruns}) => {\n               console.log(jobruns)\n               this.setState(prevState => ({\n                 jobruns: jobruns\n               }))\n             }) \n     }}/></li>\n   } \n\n   //Code for adding button name\n   if (this.state.filter !== '') {\n     filter_button_name = this.state.filter\n   }else {\n     filter_button_name = \"Add Filter\"\n   } \n\n   if(this.state.stepRun) {\n     return (\n       <div>\n         <StepRuns job_run_id={this.job_run_id}  set_job_run_state = {this.set_job_run_state} />\n       </div>\n     );\n   } else{\n   return (\n     <div className=\"container-fluid\">\n       <ul class = \"pagination justify-content-center\">\n         <div class=\"dropdown\">\n            <button class=\"btn btn-light dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n               {filter_button_name}\n            </button>\n            <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n              { this.filterOperation.map ( filter => (\n                   <a class=\"dropdown-item\">\n                      <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                           this.setState(prevState => ({\n                               filter: filter\n                       }))}}> {filter} </button>\n                   </a>\n              ))}\n            </div>\n         </div>\n         <div className =\"form-inline float-right\">\n             <div className=\"mb-1\">\n             <input type=\"text\"\n                        className=\"form-control input-sm\"\n                        list = \"datalistOptions\"\n                        id = \"exampleDataList\"\n                        placeholder = \"Type to search\"\n                        onChange={e => this.set_job_name()}></input>      \n             </div>\n             <datalist id = \"datalistOptions\">\n               {this.props.jobs.map( data => (\n                 <option value = {data.name}></option>\n               ))}\n             </datalist> \n         </div>\n         <div class = \"form-inline float-right\">\n              <div class = \"mb-1\"> \n                  <input type=\"date\"\n                         className=\"form-control input-sm\"\n                         placeholder=\"startdate(YYYY-MM-DD)\" \n                         id = \"start_date\"\n                         onChange={e => this.set_filter_start_date()}\n                   ></input>\n              </div>\n              <div class = \"mb-1\"> \n                  <input type=\"date\"\n                         className=\"form-control input-sm\"\n                         placeholder=\"enddate(YYYY-MM-DD)\"\n                         id = \"end_date\"\n                         onChange={e => this.set_filter_end_date()}\n                   ></input> \n              </div>    \n         </div> \n         <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                window.location.reload(true)\n             }} >\n            Clear\n         </button>\n         <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                this.fetchEtlFlowJobs().then(({jobruns}) => {\n                     console.log(jobruns)\n                     this.setState(prevState => ({\n                       jobruns: jobruns\n                     }))\n                   })\n             }} >\n            Refresh\n         </button>\n       </ul>\n       <table id=\"jobruns\" class=\"table table-sm table-bordered\">\n           <thead class=\"thead-dark\">\n                 <tr>\n                   <th>Job Name</th>\n                   <th>Job Type</th>\n                   <th>Job Start Time</th>\n                   <th>Elapsed Time</th>\n                   <th>Job Status</th>\n                   <th>Job Properties</th>\n                   <th>Step Properties</th>\n                 </tr>\n               </thead>\n                 <tbody>\n                 {this.state  .jobruns.map( data => (\n                   <tr>\n                     <td>{data.job_name}</td>\n                     <td>{data.job_type}</td>\n                     <td>{data.start_time}</td>\n                     <td>{data.elapsed_time}</td>\n                     <td>\n                     {(() => {\n                           if (data.state === \"pass\" || data.state == \"\" ) {\n                             return (\n                               <div>\n                                 <p className = \"text-success\">{data.state}</p>\n                               </div>\n                             )\n                           } else if (data.state === \"started\" || data.state == \"running\" ) {\n                             return (\n                               <div>\n                                 <p className = \"text-warning\">{data.state}</p>\n                               </div>\n                             )\n                           } else {\n                            return (\n                              <div>\n                                 <button type=\"button\" class=\"btn btn-danger btn btn-sm\" data-toggle=\"modal\" onClick = {() => this.show_job_run_stat_modal(data.state)}>\n                                     Error\n                                 </button>\n                            \n                                 <div class=\"modal fade\" id=\"jobRunStateModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                                   <div class=\"modal-dialog\" role=\"document\">\n                                     <div class=\"modal-content\">\n                                       <div class=\"modal-header\">\n                                         <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                         <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                           <span aria-hidden=\"true\">&times;</span>\n                                         </button>\n                                       </div>\n                                       <div class=\"modal-body\">\n                                       </div>\n                                       <div class=\"modal-footer\">\n                                         <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                       </div>\n                                     </div>\n                                   </div>\n                                 </div>\n                              </div>\n                            )\n                           }\n                         })()}\n                     </td>\n                     <td>\n                         <button type=\"button\" class=\"btn btn-secondary btn-sm\" data-toggle=\"modal\" onClick = {() => this.show_modal(data.properties)}>\n                           Properties\n                         </button>\n                         \n                         <div class=\"modal fade\" id=\"jobRunModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                           <div class=\"modal-dialog\" role=\"document\">\n                             <div class=\"modal-content\">\n                               <div class=\"modal-header\">\n                                 <h5 class=\"modal-title\" id=\"exampleModalLabel\">Properties </h5>\n                                 <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                   <span aria-hidden=\"true\">&times;</span>\n                                 </button>\n                               </div>\n                               <div class=\"modal-body\">\n                               </div>\n                               <div class=\"modal-footer\">\n                                 <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                               </div>\n                             </div>\n                           </div>\n                         </div>\n                     </td>\n                     <td><input type=\"button\" value=\"Step Properties\" class=\"btn btn-secondary btn-sm\" onClick = {() => {\n                       this.set_job_run_state()\n                       this.job_run_id =  data.job_run_id\n                     }}/></td>\n                   </tr>\n                 ))}\n                 </tbody>\n            </table>  \n            <nav aria-label=\"Page navigation example\">\n               <ul class=\"pagination justify-content-center\">\n                 {button}\n                 <li class=\"page-item\"><input type=\"button\" value=\"Next\" class=\"page-link btn btn-secondary btn-sm\" onClick = {() => {\n                   this.setState(prevState => ({\n                     paginationValue: this.state.paginationValue  + 10\n                   }))\n                   this.fetchEtlFlowJobs(this.state.paginationValue + 10).then(({jobruns}) => {\n                     console.log(jobruns)\n                     this.setState(prevState => ({  \n                       jobruns: jobruns\n                     }))\n                   })\n                   }}/></li>\n               </ul>\n         </nav>\n          </div>\n   );\n  }\n }\n}\nexport default JobRuns;     ","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nimport 'popper.js/dist/umd/popper.min.js';\nimport 'popper.js/dist/umd/popper.js';\n\n\n//Datatable Modules\nimport \"datatables.net-dt/js/dataTables.dataTables\"\nimport \"datatables.net-dt/css/jquery.dataTables.min.css\"\nimport $ from 'jquery';\n\nclass Metrics extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = { metrics: [] }\n  }\n\n  async fetchEtlFlowMetrics() {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          query {\n            metrics {\n                active_jobs\n                active_subscribers\n                etl_jobs\n                cron_jobs\n                used_memory\n                free_memory\n                total_memory\n                max_memory\n                build_time\n              }\n           }\n          `\n        }\n      )  \n    })\n    const {data} = await response.json();\n    return data;    \n  }\n\n  componentDidMount() {\n    //calling getInfo api\n    this.fetchEtlFlowMetrics().then(({metrics}) => {\n        console.log(metrics)\n        this.setState(prevState => ({\n            metrics: metrics\n        }))\n      })\n   }\n\n\n  render(){\n    return (\n      <div class=\"container\">\n          <ul class = \"pagination justify-content-center\">\n             <button class= \"btn btn btn-sm\" type=\"button \" onClick = {() => {\n                   this.fetchEtlFlowMetrics().then(({metrics}) => {\n                    console.log(metrics)\n                    this.setState(prevState => ({\n                        metrics: metrics\n                    }))\n                  })\n                }} >\n               Refresh\n             </button>\n         </ul>\n         <ul class=\"list-group \">\n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Active Jobs</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.active_jobs}</span>\n            </li>\n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Active Subscribers</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.active_subscribers}</span>\n            </li>\n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Etl Jobs</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.etl_jobs}</span>\n            </li>\n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Cron Jobs</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.cron_jobs}</span>\n            </li>  \n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Used Memory</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.used_memory}</span>\n            </li> \n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Free Memory</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.free_memory}</span>\n            </li>  \n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Total Memory</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.total_memory}</span>\n            </li>\n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Max Memory</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.max_memory}</span>\n            </li> \n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <b>Build Time</b>\n              <span class=\"badge badge-secondary badge-pill\">{this.state.metrics.build_time}</span>\n            </li>   \n         </ul>\n      </div>     \n    );          \n  }\n}\nexport default Metrics;\n","import React from 'react';\nimport JobList from './JobList';\nimport JobRuns from './JobRuns';\nimport Metrics from './Metrics';\n\nimport '../css/App.css'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nclass Routes extends React.Component {\n\n  constructor(props){\n    super(props); \n    this.state  = {\n      jobs: [],\n      metrics: []\n    }\n  }\n\n  async fetchEtlFlowJobs() {\n    const GRAPHQL_URL = '/api/etlflow'\n    const token = localStorage.getItem('Authorization')\n\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n        'Authorization': token,\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          query {\n              jobs {\n                name \n                schedule\n                props {key value} \n                nextSchedule \n                schduleRemainingTime \n                is_active \n                job_deploy_mode \n                max_active_runs\n             }\n           }\n          `\n        }\n      )  \n    })\n    const {data} = await response.json();\n    return data;    \n  }\n\n  setInterval() {\n    this.timerID = setInterval(\n      () => this.fetchEtlFlowJobs(),\n      1000 * 1000\n    );\n  }\n\n\n\n\n  componentDidMount() {\n\n    //calling jobs api\n    this.fetchEtlFlowJobs().then(({jobs}) => {\n      console.log(jobs)\n      this.setState(prevState => ({\n        jobs: jobs\n      }))\n    })\n\n }\n\n remove_token() {\n  localStorage.removeItem(\"Authorization\")\n  this.props.doLogout(\"\")\n}\n\n  render(){\n    return (\n      <Router>\n      <div>\n        <nav className = \"navbar navbar-expand-lg navbar-dark bg-dark mb-3\">\n            <ul className = \"nav navbar-nav w-100\">\n                <li className = \"nav-item nav-link\" ><Link to=\"/\">Etlflow</Link> </li>\n                <li className = \"nav-item nav-link\" ><Link to=\"/JobRuns\">JobRuns</Link> </li>\n                <li className = \"nav-item nav-link\" ><Link to=\"/getInfo\">Metrics</Link> </li>\n\n            </ul>\n            <div class=\"navbar-collapse collapse w-100 order-3 dual-collapse2\">\n              <ul class=\"nav justify-content-end w-100\">\n                <li class=\"nav-item dropdown\">\n\t                <a class=\"nav-link  dropdown-toggle\" href=\"#\" data-toggle=\"dropdown\"> mint_admin  </a>\n\t                  <ul class=\"dropdown-menu\">\n\t\t                  <li>\n                        <a class=\"dropdown-item\" href=\"https://github.com/tharwaninitin/etlflow\">\n                           Git Hub \n                        </a>\n                      </li>\n                      <li>\n                        <a class=\"dropdown-item\" href=\"https://tharwaninitin.github.io/etlflow/site/\">\n                          Docs\n                        </a>\n                      </li>\n                      <li>\n                        <a class=\"dropdown-item\">\n                          <input type=\"button\" class=\"btn btn-secondary btn-sm\" value=\"LogOut\" onClick = {() => this.remove_token()}></input>\n                        </a>\n                      </li>\n\t                  </ul>\n\t              </li>\n              </ul>\n            </div>\n        </nav>\n        <Switch>\n          <Route exact path=\"/\" component={() => (<JobList jobs={this.state.jobs} />)}/>\n          <Route path=\"/JobRuns\" component={() => (<JobRuns jobs={this.state.jobs}/>)}/>\n          <Route path=\"/getInfo\" component={() => (<Metrics/>)}/>\n        </Switch>\n      </div>\n      </Router>\n    );\n  }\n}\nexport default Routes;\n\n","import React from 'react';\n//Bootstrap and jQuery libraries\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery/dist/jquery.min.js';\n\nclass Login extends React.Component {\n  constructor(props){\n    super(props); \n    this.state  = {\n         user_name: '',\n         password: '',\n         token: '', \n         login: [],\n\n        }\n\n    this.login_validation = this.login_validation.bind(this);\n    this.set_login_user_name = this.set_login_user_name.bind(this);\n    this.set_login_password = this.set_login_password.bind(this);\n  }\n\n  async fetchLoginDetails(user_name,password) {\n    const GRAPHQL_URL = '/api/login'\n    const response = await fetch(GRAPHQL_URL, {\n      method: 'POST',\n      headers: {\n        'content_type': 'applcation/json',\n      },\n      body:  JSON.stringify(\n        {\n          query: `\n          mutation {\n            login (user_name: \\\"${user_name}\\\", password: \\\"${password}\\\") {\n                message \n                token\n             }\n           }\n          `\n         }\n      )  \n    })  \n    const {data} = await response.json();\n    return data;        \n  }\n\n login_validation() {\n    this.fetchLoginDetails(this.state.user_name,this.state.password).then(({login}) => {\n        var token_value = JSON.parse(JSON.stringify(login)).token\n        if(token_value !== \"\")\n        {\n            console.log(\"Valid user\")\n            localStorage.setItem('Authorization', token_value);   \n            this.setState(prevState => ({\n                token: token_value\n              })) \n            this.props.doLogin(token_value)\n        }\n        else \n        {\n            console.log(\"Invalid User\")\n            alert(\"Invalid User\")\n        }\n    })   \n  } \n\n  set_login_user_name() {\n    this.setState(prevState => ({\n        user_name: document.getElementById(\"user_name\").value\n      }))\n  }\n\n  set_login_password() {\n    this.setState(prevState => ({\n        password: document.getElementById(\"password\").value\n      }))\n  }\n\n  render(){\n    return (\n    <div className=\"main\" align=\"center\">\n         <nav className = \"navbar navbar-expand-lg navbar-dark bg-dark mb-3\">\n             <ul className = \"nav navbar-nav w-50\">\n                 <li className = \"nav-item nav-link\">EtlFlow</li>\n             </ul>\n         </nav>   \n           <div className=\"col-md-3\">\n            <div className=\"login-form \">\n                <form id=\"form_login\" className = \"text-center border border-dark p-5\" onSubmit={(e) => {this.login_validation(); e.preventDefault();}  }>\n                    <p className = \"h4 mb-4\">EtlFlow Login</p>\n                    <div className=\"form-group\">\n                        <input type=\"text\"\n                         className=\"form-control\" \n                         aria-describedby=\"UsernameHelp\"\n                         placeholder=\"Username\"\n                         id=\"user_name\"\n                         onChange={e => this.set_login_user_name()}></input>\n                    </div>\n                    <div className=\"form-group\">\n                        <input\n                         type=\"password\"\n                         className=\"form-control\"\n                         aria-describedby=\"PasswordHelp\"\n                         placeholder=\"Password\"\n                         id=\"password\"\n                         onChange={e => this.set_login_password()}></input>\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-secondary btn-block\">Submit</button>\n                </form>   \n            </div>\n        </div>\n    </div>\n    );\n  }\n}\nexport default Login;","import React from 'react';\n//Bootstrap and jQuery libraries\nimport Routes from './components/Routes';\nimport LoginComponent from './components/Login';\nimport StepRuns from './components/StepRuns';\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props);\n\n    this.state = {\n      token: ''\n    }\n\n    this.doLogin = this.doLogin.bind(this)\n    this.doLogout = this.doLogout.bind(this)\n\n  }\n\n  doLogin(args_token) {\n    console.log(\"token from parent :\" +args_token )\n    this.setState({\n      token: args_token\n    })\n  }\n\n\n  doLogout(args_token) {\n    console.log(\"token from parent :\" + args_token )\n    this.setState({\n      token: ''\n    })\n  }\n\n\n  render(){\n    if(localStorage.getItem(\"Authorization\") === null){\n      return (  \n          <div>\n            <LoginComponent doLogin = {this.doLogin}/>  \n          </div>\n      );\n    } else {\n      return (  \n        <div>\n          <Routes doLogout = {this.doLogin} />  \n        </div>\n     );\n    }\n  }\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}